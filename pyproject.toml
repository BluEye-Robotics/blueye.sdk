[tool.poetry]
name = "blueye.sdk"
version = "2.0.0"
description = "SDK for controlling a Blueye underwater drone"
authors = ["Sindre Hansen <sindre.hansen@blueye.no>",
           "Johannes Schrimpf <johannes.schrimpf@blueye.no>",
           "Aksel Lenes <aksel.lenes@blueye.no>"]
packages = [
  { include = "blueye" }
]

include= ["blueye.sdk_docs/**/*"]
readme = "README.md"
repository="https://github.com/blueye-robotics/blueye.sdk"
homepage ="https://www.blueyerobotics.com"
keywords = ["Blueye", "Pioneer", "Pro", "Robotics", "SDK", "Software Development Kit"]

[tool.poetry.dependencies]
python = "^3.8"
asciimatics = {version = "^1.11.0", optional = true}
inputs = {version = "^0.5", optional = true}
pandas = {version = "^1.3", optional = true}
matplotlib = {version = "^3.1.1", optional = true}
webdavclient3 = {version = "^3.14.6", optional = true}
requests = "^2.22.0"
tabulate = "^0.8.5"
packaging = "^22.0"
"blueye.protocol" = "^2.2.0"
python-dateutil = "^2.8.2"
pyzmq = "^25.0.0"
proto-plus = "^1.22.2"

[tool.poetry.dev-dependencies]
pytest = "^7.4"
pytest-mock = "^3.11"
portray = "^1.8"
pre-commit = "^3.3"
black = "^23.7"
mkdocs-macros-plugin = "^1.0"
pytest-cov = "^4.1"
requests-mock = "^1.11"
freezegun = "^1.2"

[tool.poetry.extras]
examples = ["inputs", "asciimatics", "pandas", "matplotlib", "webdavclient3"]

[tool.portray.mkdocs]
repo_url = "https://github.com/BluEye-Robotics/blueye.sdk"
repo_name = ""
site_name = "Blueye SDK"
markdown_extensions = ["admonition",
                       "pymdownx.arithmatex",
                       "pymdownx.caret",
                       "pymdownx.critic",
                       "pymdownx.details",
                       "pymdownx.inlinehilite",
                       "pymdownx.magiclink",
                       "pymdownx.mark",
                       "pymdownx.smartsymbols",
                       "pymdownx.superfences",
                       "pymdownx.tilde",
                       ]

[tool.portray.mkdocs.plugins]
[tool.portray.mkdocs.plugins.search]
[tool.portray.mkdocs.plugins.macros]
    module_name = "blueye.sdk/doc_utils"

[[tool.portray.extra_markdown_extensions]]
[tool.portray.extra_markdown_extensions."pymdownx.tabbed"]
alternate_style = true

[tool.portray.mkdocs.theme]
favicon = "docs/media/blueye_b.svg"
logo = "docs/media/blueye_b.svg"
name = "material"
palette = {primary = "white", accent = "blue"}
custom_dir = "docs/mkdocs_templates"
features = ["content.tabs.link"]

[[tool.portray.mkdocs.nav]]
"About the Blueye Drones" = "README.md"

[[tool.portray.mkdocs.nav]]
"Quick Start" = "docs/quick_start.md"

[[tool.portray.mkdocs.nav]]
    [[tool.portray.mkdocs.nav.Movement]]
    "Control from the CLI" = "docs/movement/from-the-CLI.md"
    [[tool.portray.mkdocs.nav.Movement]]
    "Control with a gamepad" = "docs/movement/with-a-gamepad.md"

[[tool.portray.mkdocs.nav]]
    [[tool.portray.mkdocs.nav.Video]]
    "GStreamer for video streaming" = "docs/video/gstreamer-for-video-streaming.md"
    [[tool.portray.mkdocs.nav.Video]]
    "Downloading videos and images" = "docs/video/downloading.md"

[[tool.portray.mkdocs.nav]]
    [[tool.portray.mkdocs.nav.Logs]]
    "Listing and downloading log files" = "docs/logs/listing-and-downloading.md"
    [[tool.portray.mkdocs.nav.Logs]]
    "Plotting log files" = "docs/logs/plotting.md"
    [[tool.portray.mkdocs.nav.Logs]]
    "Runtime logs" = "docs/logs/runtime-logs.md"
    [[tool.portray.mkdocs.nav.Logs]]
    "Legacy log file format" = "docs/logs/legacy-log-file-format.md"

[[tool.portray.mkdocs.nav]]
"Configure drone parameters" = "docs/configuration.md"

[[tool.portray.mkdocs.nav]]
"Subscribing to a telemetry message" = "docs/telemetry-callback.md"

[[tool.portray.mkdocs.nav]]
"Updating from v1 to v2" = "docs/migrating-to-v2.md"

[[tool.portray.mkdocs.nav]]
"Protobuf protocol" = "docs/protobuf-protocol.md"

[[tool.portray.mkdocs.nav]]
"HTTP API" = "docs/http-api.html"

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']

[tool.pytest.ini_options]
markers = "connected_to_drone: a mark for test that can only be run when connected to a drone, useful when developing"

addopts = "--cov=blueye --cov-report=xml:coverage.xml --cov-report=html --cov-append"

filterwarnings = ["ignore::DeprecationWarning:blueye","ignore::DeprecationWarning:pkg_resources"]

[build-system]
requires = ["poetry>=1.3.0"]
build-backend = "poetry.masonry.api"
