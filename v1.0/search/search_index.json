{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About the Blueye Drones","text":"<p>Blueye produces and sells three models of underwater drones, the Blueye Pioneer, Blueye Pro, and Blueye X3. The Pioneer and the Pro are drones designed for inspection, while the X3 is extensible with three guest ports that allow attaching for example grippers or sonars. Visit blueyerobotics.com for more information about the Blueye products.</p>"},{"location":"#this-sdk-and-the-blueye-drones","title":"This SDK and the Blueye drones","text":"<p>A Blueye drone is normally controlled via a mobile device through the Blueye App (iOS/Android). The mobile device is connected via Wi-Fi to a surface unit, and the drone is connected to the surface unit via a tether cable.</p> <p>This python SDK exposes the functionality of the Blueye app through a Python object. The SDK enables remote control of a Blueye drone as well as reading telemetry data and viewing video streams. It is not meant for executing code on the drone itself.</p> <p>To control the drone you connect your laptop to the surface unit Wi-Fi and run code that interfaces with the through the Python object.</p> <p>Check out the <code>Quick Start Guide</code> to get started with using the SDK.</p>"},{"location":"configuration/","title":"Configure drone parameters","text":"<p>There are settings on the drone that are remotely configurable from the Blueye mobile app. These can also be set directly from the SDK.</p>"},{"location":"configuration/#configure-time-and-date","title":"Configure time and date","text":"<p>The drone does not keep track of time internally. The SDK sets the time on the drone automatically when you connect initially. But you can also configure time and date manually like this</p> <pre><code>import time\nfrom blueye.sdk import Drone\n\nmyDrone = Drone()\n\ntime_to_set_on_drone = int(time.time()) # Unix Timestamp\nmyDrone.config.set_drone_time(time_to_set_on_drone)\n</code></pre> <p>or if we for example want to offset the drone time 5 hours relative to our current system time we can do something like this:</p> <pre><code>from blueye.sdk import Drone\nfrom datetime import timezone, timedelta, datetime\n\nmyDrone = Drone()\n\noffset_in_hours = timedelta(hours=5)\nequivalent_timezone = timezone(offset_in_hours)\nunix_timestamp = datetime.now(tz=equivalent_timezone).timestamp()\n\nmyDrone.config.set_drone_time(int(unix_timestamp))\n</code></pre>"},{"location":"configuration/#calibrate-pressure-sensor-for-water-density","title":"Calibrate pressure sensor for water density","text":"<p>The water density on the drone default to a reasonable density for salt water: 1025 grams per liter. For more accurate depth readings, the water density can be configured manually to suit your local conditions</p> <pre><code>from blueye.sdk import Drone, WaterDensities\n\nmyDrone = Drone()\n\n# Salt water\nmyDrone.config.water_density = WaterDensities.salty  # 1025 g/L\n\n# Brackish water\nmyDrone.config.water_density = WaterDensities.brackish  # 1011 g/L\n\n# Fresh water\nmyDrone.config.water_density = WaterDensities.fresh  # 997 g/L\n\n# Can also be set to arbitrary values\nmyDrone.config.water_density = 1234\n</code></pre>"},{"location":"configuration/#configure-camera-parameters","title":"Configure camera parameters","text":"<p>There are 6 different camera parameters that can be set. For a full list of camera parameters and their possible values see the <code>camera reference</code> section. For example you could set the bit rate like this</p> <pre><code>from blueye.sdk import Drone\n\nmyDrone = Drone()\n\nmyDrone.camera.bitrate = 8_000_000 # 8 Mbit bitrate\n</code></pre>"},{"location":"quick_start/","title":"Quick Start","text":""},{"location":"quick_start/#installation","title":"Installation","text":"<p>The SDK requires Python 3.7.1 or higher. Since many operating systems do not package the newest version of Python we recommend using <code>pyenv</code> or something similar for configuring multiple python versions on the same system. Pyenv also has the added benefit of managing your virtual environments for you, though you are of course free to use other tools for that as well.</p> <p>The instructions below show the necessary steps to get started with the SDK on a fresh install:</p> Windows <p>Install Python</p> <p>Install Python 3.7.1 or higher, you can find the latest python versions here. Remember to check the option \"Add Python to path\" when installing.</p> <p>Install virtualenv for managing Python versions (optional)</p> <p>Using a virtual environment is not strictly necessary, but it greatly simplifies the development of Python packages. <pre><code># Upgrade pip version\npython -m pip install --upgrade pip\npip install virtualenv\n</code></pre></p> <p>Next, we create a virtual environment</p> <p><pre><code>cd .\\Desktop\nmkdir drone_project\ncd .\\drone_project\n# Replace \"C:\\Program Files\\Python310\\python.exe\" with the path\n# to the python version you want to use in the line below\nvirtualenv blueye_sdk_env -p \"C:\\Program Files\\Python310\\python.exe\"\n</code></pre> activate the virtual environment <pre><code>.\\blueye_sdk_env\\Scripts\\activate.bat\n</code></pre> if you are not allowed to activate the virtual environment, you might have to allow running unsigned scripts, see this link for instructions.</p> <p>Install the SDK</p> <p>Now we're ready to install the SDK, which should be as simple as</p> <pre><code>pip install blueye.sdk\n</code></pre> <p>or, if you want to include the dependencies required for running the examples shown in this documentation you should run</p> <pre><code>pip install \"blueye.sdk[examples]\"\n</code></pre> Mac OS <p>** Install the necessary Python version**</p> <p>Install pyenv, for more instructions see the pyenv-installer</p> <pre><code>curl https://pyenv.run | bash\npyenv update\n</code></pre> <p>If you want pyenv to be loaded each time you open a new terminal you can add this to your .zshrc or the equivalent for your terminal <pre><code>export PATH=\"$HOME/.pyenv/bin:$PATH\"\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n</code></pre></p> <p>The Pyenv wiki recommends installing some additional dependencies before building Python.</p> <pre><code># optional, but recommended:\nbrew install openssl readline sqlite3 xz zlib\n</code></pre> <p>When running Mojave or higher (10.14+) you will also need to install the additional SDK headers: <pre><code>sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /\n</code></pre> Then build Python with pyenv</p> <pre><code>pyenv install 3.10.1\n</code></pre> <p>Create a virtual environment</p> <p>Using a virtual environment is not strictly necessary, but it greatly simplifies the development of Python packages.</p> <p>Since we already have pyenv installed we'll use it to create a virtual environment,</p> <pre><code>pyenv virtualenv 3.10.1 blueye.sdk\npyenv activate blueye.sdk\n</code></pre> <p>Install the SDK</p> <p>Now we're ready to install the SDK, which should be as simple as.</p> <pre><code>pip install blueye.sdk\n</code></pre> <p>or, if you want to include the dependencies required for running the examples shown in this documentation you should run</p> <pre><code>pip install \"blueye.sdk[examples]\"\n</code></pre> Linux <p>These instructions are directed at Ubuntu, but the process should be similar for other distributions.</p> <p>Install the necessary Python version</p> <p>Install pyenv, for more instructions see the pyenv-installer</p> <pre><code>curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash\npyenv update\n</code></pre> <p>Install the needed dependencies for building python 3.10.1</p> <p><pre><code>apt install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \\\nlibreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \\\nxz-utils tk-dev libffi-dev liblzma-dev python-openssl\n</code></pre> Then build python with pyenv <pre><code>pyenv install 3.10.1\n</code></pre></p> <p>Create a virtual environment</p> <p>Using a virtual environment is not strictly necessary, but it greatly simplifies the development of Python packages.</p> <p>Since we already have pyenv installed we'll use it to create a virtual environment,</p> <pre><code>pyenv virtualenv 3.10.1 blueye.sdk\npyenv activate blueye.sdk\n</code></pre> <p>Install the SDK</p> <p>Now we're ready to install the SDK, which should be as simple as</p> <pre><code>pip install blueye.sdk\n</code></pre> <p>or, if you want to include the dependencies required for running the examples shown in this documentation you should run</p> <pre><code>pip install \"blueye.sdk[examples]\"\n</code></pre>"},{"location":"quick_start/#connect-to-the-drone","title":"Connect to the drone","text":"<p>To use the SDK your computer must be connected to the drone via the surface unit WiFi. For a how-to on turning on the drone and surface unit you can watch the quick start video.</p>"},{"location":"quick_start/#control-the-drone","title":"Control the drone","text":"<p>Most of the functionality is controlled using Python properties and we will illustrate the use of properties by showing how to control the lights:</p> <p><pre><code>import time\nfrom blueye.sdk import Drone\n\n# When the Drone object is instantiatied a connection to the drone is established\nmyDrone = Drone()\n\n# Setting the lights property to 10\nmyDrone.lights = 10\n\ntime.sleep(2)\n\n# We can also get the current brightness of the lights through the lights property\nprint(f\"Current light intensity: {myDrone.lights}\")\nmyDrone.lights = 0\n\n# Properties can also be used for reading telemetry data from the drone\nprint(f\"Current depth in millimeters: {myDrone.depth}\")\n</code></pre> For an overview of the properties that are available for controlling and reading data from the drone, go to the <code>Reference section</code> of the documentation. The valid input ranges and descriptions of the different properties can also be found there.</p> <p>Tip</p> <p>You can explore the properties of the drone interactively using an interactive python interpreter like <code>iPython</code>, install it with: <pre><code>pip install ipython\n</code></pre> By instantiating a Drone object and using the completion key (normally the <code>tab-key \u21b9</code>) you can get a interactive list of the available properties on the drone, it is then easy to try setting and getting the different properties. </p>"},{"location":"quick_start/#watching-the-video-stream","title":"Watching the video stream","text":"<p>The easiest way to open the  RTSP video stream is using <code>VLC media player</code>. Once VLC is downloaded you can start the stream like this, the RTSP URL is: <code>rtsp://192.168.1.101:8554/test</code> </p> <p>For lower latency streaming (on a PC) you can see the instructions on using <code>Gstreamer</code>, or if you just want to watch a low latency stream you can download the Blueye Observer app. (iOS / Android)</p> <p>The normal Blueye app can not be used to spectate when controlling the drone from the SDK because it will interfere with the commands sent from the SDK. The Observer app, however, is only a spectator and can be used together with the SDK.</p>"},{"location":"quick_start/#explore-the-examples","title":"Explore the examples","text":"<p>For further examples on how to use the SDK to control the drone have a look at the motion examples.</p> <p>Remember to install the example dependencies before running the examples.</p> <pre><code>pip install \"blueye.sdk[examples]\"\n</code></pre>"},{"location":"quick_start/#local-documentation","title":"Local documentation","text":"<p>Since the drone surface unit (usually) does not have internet access it can be a bit tricky to reference this documentation while developing on the drone. Luckily when you install the SDK from PyPI it includes a pre-built, local copy of this documentation. This documentation can be viewed by executing the following Python snippet:</p> <pre><code>import blueye.sdk\n\nblueye.sdk.open_local_documentation()\n</code></pre>"},{"location":"logs/listing-and-downloading/","title":"Logs from the drone","text":"<p>When the drone is powered on a new comma-separated-value file, where it stores telemetry data such as depth, temperature, and more, is created. The drone will log data as long as it is powered on. These files can be downloaded to your local system where you can plot them or use them however you see fit.</p>"},{"location":"logs/listing-and-downloading/#listing-the-log-files","title":"Listing the log files","text":"<p>If your drone has completed 5 dives and you do</p> <pre><code>from blueye.sdk import Drone\n\nmyDrone = Drone()\n\nprint(myDrone.logs)\n</code></pre> <p>you should see something like the following lines be printed</p> <pre><code>Name                        Time                Max depth  Size\nea9add4d40f69d4-00000.csv   24. Oct 2018 09:40  21.05 m    6.3 MiB\nea9add4d40f69d4-00001.csv   25. Oct 2018 10:29  21.06 m    879.2 KiB\nea9add4d40f69d4-00002.csv   31. Oct 2018 10:05  60.69 m    8.5 MiB\nea9add4d40f69d4-00003.csv   31. Oct 2018 12:13  41.68 m    8.4 MiB\nea9add4d40f69d4-00004.csv   02. Nov 2018 08:59  52.52 m    7.8 MiB\n</code></pre> <p>The first part of the filename (the part before the -) is the unique ID of your drone and second part is the dive number. In addition we see the start time of the dive, the maximum depth reached, as well as the size of the log file.</p> <p>You might notice that there can be more log files listed then the amount of dives you have done. This is due to the fact that the drone creates a new log file whenever it is turned on, regardless of whether you actually took the drone for a dive. To easier separate out the log files that result from actual dives you can filter out all the dives with a max depth below some threshold. The Blueye app does this, filtering out all log files with a max depth below 20 cm.</p>"},{"location":"logs/listing-and-downloading/#downloading-a-log-file-to-your-computer","title":"Downloading a log file to your computer","text":"<p>When you want to download a log file all you have to do is to call the <code>download()</code> method on the desired log and the file will be downloaded to your current folder.</p> <p>The <code>download()</code> method takes two optional parameters, <code>output_path</code> and <code>output_name</code>. These specify, respectively, which folder the log is downloaded to and what name it's stored with.</p>"},{"location":"logs/listing-and-downloading/#example-downloading-multiple-log-files","title":"Example: Downloading multiple log files","text":"<p>Downloading multiple log files is solved by a simple Python for-loop. The example below shows how one can download the last 3 logs to the current folder:</p> <pre><code>from blueye.sdk import Drone\n\nmyDrone = Drone()\n\nfor log in myDrone.logs[:-3]:\n    log.download()\n</code></pre>"},{"location":"logs/listing-and-downloading/#example-adding-a-prefix-to-log-names","title":"Example: Adding a prefix to log names","text":"<p>The example code below shows how one can add a simple prefix to all log files when downloading:</p> <pre><code>from blueye.sdk import Drone\n\nmyDrone = Drone()\n\nprefix = \"pre_\"\n\nfor log in myDrone.logs:\n    log.download(output_name=prefix+log.name)\n</code></pre>"},{"location":"logs/log-file-format/","title":"Log file format","text":"<p>The log files from the Blueye drones are in essence a recording of the data that is published over UDP stored as a comma-separated-value (CSV) file.</p> <p>The rest of this page documents the most useful fields of the log files. The column indices listed are zero-based. If you feel that some fields need more documentation, feel free to open an issue on Github, and we'll happily supply the requested information.</p>"},{"location":"logs/log-file-format/#time","title":"Time","text":"Column Type Unit Description 2 Integer Milliseconds The elapsed time since the start of the log 3 Float Unix timestamp Global time"},{"location":"logs/log-file-format/#position","title":"Position","text":"<p>The position is based on the user's phone's GPS at the start of the dive.</p> Column Type Unit Description 6 Float Degrees Latitude 7 Float Degrees Longitude"},{"location":"logs/log-file-format/#file-storage","title":"File storage","text":"Column Type Unit Description 8 Integer Bytes Total file storage on the drone 9 Integer Bytes Available free space"},{"location":"logs/log-file-format/#temperature","title":"Temperature","text":"<p>Note: All temperatures are in \"deci-degrees Celsius\", ie. to get \u00b0C you need to divide the value by 10.</p> Column Type Unit Description 11 Integer Deci-Celsius Bottom canister temperature 12 Integer Deci-Celsius Water temperature 13 Integer Deci-Celsius Top canister temperature 14 Integer Deci-Celsius CPU temperature"},{"location":"logs/log-file-format/#internal-humidity","title":"Internal humidity","text":"<p>Note: The unit is in deci-percent (ie. divide by 10 to get percent).</p> Column Type Unit Description 15 Integer Deci-percent Humidity in the top canister. 16 Integer Deci-percent Humidity in the bottom canister."},{"location":"logs/log-file-format/#lights","title":"Lights","text":"Column Type Unit Description 17 Integer - State of the on-board light. Range is 0 to 255."},{"location":"logs/log-file-format/#depth","title":"Depth","text":"Column Type Unit Description 22 Integer Milli-meters Depth below water surface. Positive values are below the surface, negative are above."},{"location":"logs/log-file-format/#control-force","title":"Control force","text":"<p>Control force is the force exerted on the drone by the control system.</p> Column Type Unit Description 29 Float Newton Force in the surge direction. 30 Float Newton Force in the sway direction. 31 Float Newton Force in the heave direction. 32 Float Newton-meters Moment in the yaw direction."},{"location":"logs/log-file-format/#orientation-pose","title":"Orientation (pose)","text":"Column Type Unit Description 32 Float Degrees Roll angle. Range from -180\u00b0 - 180\u00b0 33 Float Degrees Pitch angle. Range from -180\u00b0 - 180\u00b0 34 Float Degrees Yaw angle. Range from -180\u00b0 - 180\u00b0"},{"location":"logs/log-file-format/#battery","title":"Battery","text":"Column Type Unit Description 38 Integer Milli-volts Battery voltage 39 Integer Milli-amperes Battery current. Negative values are drained from the battery, positive are charged. 41 Integer Percent Relative state of charge. Range from 0 - 100 %"},{"location":"logs/plotting/","title":"Plotting","text":"<p>This example shows how one can pull a log file from the drone and use pandas and matplotlib to plot it.</p> <p>We'll start by downloading a log file from the drone</p> <pre><code>from blueye.sdk import Drone\n\nmyDrone = Drone()\n\nmyDrone.logs[0].download(output_name=\"log0.csv\")\n</code></pre> <p>We can now read the csv-file into a pandas object for easy manipulation</p> <pre><code>import pandas\n\ndivelog = pandas.read_csv(\"log0.csv\")\n</code></pre> <p>and then we'll convert the unix timestamp in <code>rt_clock</code> into a more readable format:</p> <pre><code>divelog[\"rt_clock\"] = pandas.to_datetime(divelog[\"rt_clock\"], unit=\"s\")\n</code></pre> <p>Next we will plot depth vs time with matplotlib:</p> <pre><code>import matplotlib.pyplot as plt\n\n# Instantiate our figure and axes to plot on\nfigure, axes = plt.subplots()\n\nx = divelog[\"rt_clock\"]\ny = divelog[\"depth\"] / 1000  # Dividing by 1000 to get depth in meters\n\n# Plot the depth values against time\naxes.plot(x, y, label=\"depth\")\n\n# Set title, labels, and legend\nplt.title(\"Depth chart\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Depth [m]\")\nplt.legend()\n\n# Save the figure\nfigure.savefig(\"depth_plot.svg\")\n</code></pre> <p>This should yield us a plot that looks something like this: </p> <p>See the matplotlib documentation for more ways to plot your data.</p>"},{"location":"movement/from-the-CLI/","title":"Controlling from the Command Line Interface","text":"<p>This is a super simple example showing how you make the drone move from the command line interface:</p> <pre><code>import time\nfrom blueye.sdk import Drone\nmyDrone = Drone()\nmyDrone.motion.surge = 0.4\ntime.sleep(1)\nmyDrone.motion.surge = 0\n</code></pre>"},{"location":"movement/with-a-gamepad/","title":"Controlling the drone from a gamepad","text":"<p>To run the example remember to first install the optional dependencies needed for running the examples <pre><code>pip install \"blueye.sdk[examples]\"\n</code></pre></p> <p>The example below illustrates how one could use an Xbox controller and the SDK to control the drone.</p> <p>The inputs library supports many other gamepads, so using a different controller should be as simple as looking up the event codes for the buttons/axes and mapping them to the functions you want.</p> <pre><code>import inputs\n\nfrom blueye.sdk import Drone\n\n\nclass JoystickHandler:\n\"\"\"Maps drone functions to joystick events\"\"\"\n\n    def __init__(self, drone):\n        self.drone = drone\n        self.event_to_function_map = {\n            \"BTN_NORTH\": self.handle_x_button,\n            \"BTN_WEST\": self.handle_y_button,\n            \"BTN_EAST\": self.handle_b_button,\n            \"BTN_SOUTH\": self.handle_a_button,\n            \"ABS_X\": self.handle_left_x_axis,\n            \"ABS_Y\": self.handle_left_y_axis,\n            \"ABS_Z\": self.handle_left_trigger,\n            \"ABS_RX\": self.handle_right_x_axis,\n            \"ABS_RY\": self.handle_right_y_axis,\n            \"ABS_RZ\": self.handle_right_trigger,\n        }\n\n    def handle_x_button(self, value):\n\"\"\"Starts/stops the video recording\"\"\"\n        self.drone.camera.is_recording = value\n\n    def handle_y_button(self, value):\n\"\"\"Turns lights on or off\"\"\"\n        if value:\n            if self.drone.lights &gt; 0:\n                self.drone.lights = 0\n            else:\n                self.drone.lights = 0.1\n\n    def handle_b_button(self, value):\n\"\"\"Toggles autoheading\"\"\"\n        if value:\n            self.drone.motion.auto_heading_active = not self.drone.motion.auto_heading_active\n\n    def handle_a_button(self, value):\n\"\"\"Toggles autodepth\"\"\"\n        if value:\n            self.drone.motion.auto_depth_active = not self.drone.motion.auto_depth_active\n\n    def filter_and_normalize(self, value, lower=5000, upper=32768):\n\"\"\"Normalizing the joystick axis range from (default) -32768&lt;-&gt;32678 to -1&lt;-&gt;1\n\n        The sticks also tend to not stop at 0 when you let them go but rather some\n        low value, so we'll filter those out as well.\n        \"\"\"\n        if -lower &lt; value &lt; lower:\n            return 0\n        elif lower &lt;= value &lt;= upper:\n            return (value - lower) / (upper - lower)\n        elif -upper &lt;= value &lt;= -lower:\n            return (value + lower) / (upper - lower)\n        else:\n            return 0\n\n    def handle_left_x_axis(self, value):\n        self.drone.motion.yaw = self.filter_and_normalize(value)\n\n    def handle_left_y_axis(self, value):\n        self.drone.motion.heave = self.filter_and_normalize(value)\n\n    def handle_right_x_axis(self, value):\n        self.drone.motion.sway = self.filter_and_normalize(value)\n\n    def handle_right_y_axis(self, value):\n        self.drone.motion.surge = -self.filter_and_normalize(value)\n\n    def handle_left_trigger(self, value):\n        self.drone.motion.slow = self.filter_and_normalize(value, lower=0, upper=255)\n\n    def handle_right_trigger(self, value):\n        self.drone.motion.boost = self.filter_and_normalize(value, lower=0, upper=255)\n\n\nif __name__ == \"__main__\":\n    try:\n        myDrone = Drone()\n        handler = JoystickHandler(myDrone)\n        while True:\n            events = inputs.get_gamepad()\n            for event in events:\n                if event.code in handler.event_to_function_map:\n                    handler.event_to_function_map[event.code](event.state)\n\n    except KeyboardInterrupt:\n        pass\n</code></pre>"},{"location":"reference/blueye/sdk/camera/","title":"Module blueye.sdk.camera","text":"View Source <pre><code>from __future__ import annotations\n\nimport re\n\nimport warnings\n\nfrom collections import namedtuple\n\nfrom enum import Enum\n\nfrom typing import TYPE_CHECKING, NamedTuple\n\nimport numpy as np\n\nimport requests\n\n# Necessary to avoid cyclic imports\n\nif TYPE_CHECKING:\n\n    from .drone import Drone\n\nclass Tilt:\n\n    @staticmethod\n\n    def _tilt_angle_from_debug_flags(flags: int) -&gt; float:\n\n        \"\"\"Helper function for decoding tilt angle from debug flags\n\n        The tilt angle is encoded as an int8, with 0 at 0 degrees, and each increment representing\n\n        0.5 degrees in either direction. A positive angle is upwards, and negative is downwards.\n\n        \"\"\"\n\n        TILT_ANGLE_MASK = 0x0000FF0000000000\n\n        TILT_ANGLE_OFFSET = 40\n\n        tilt_angle_array = np.array(\n\n            np.right_shift(np.bitwise_and(flags, TILT_ANGLE_MASK), TILT_ANGLE_OFFSET),\n\n            dtype=[(\"tilt_angle\", np.int8)],\n\n        ).astype([(\"tilt_angle\", float)])\n\n        return tilt_angle_array[\"tilt_angle\"] / 2\n\n    @staticmethod\n\n    def _tilt_stabilization_status_from_debug_flags(flags: int) -&gt; bool:\n\n        \"\"\"Helper function for decoding tilt stabilization status from debug flags\"\"\"\n\n        TILT_STABILIZATION_MASK = 0x100\n\n        return bool(flags &amp; TILT_STABILIZATION_MASK)\n\n    def __init__(self, parent_drone: Drone):\n\n        self._parent_drone = parent_drone\n\n    def _verify_tilt_in_features(self):\n\n        \"\"\"Checks that the connected drone has the tilt feature\n\n        Raises a RuntimeError if it does not.\n\n        \"\"\"\n\n        if \"tilt\" not in self._parent_drone.features:\n\n            raise RuntimeError(\"The connected drone does not support tilting the camera.\")\n\n    def set_speed(self, speed: float):\n\n        \"\"\"Set the speed and direction of the camera tilt\n\n        *Arguments*:\n\n        * speed (float): Speed and direction of the tilt. 1 is max speed up, -1 is max speed down.\n\n        Requires a drone with the tilt feature, and software version 1.5 or newer.\n\n        A RuntimeError is raised if either of those requirements are not met.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.5\")\n\n        self._verify_tilt_in_features()\n\n        # The tilt command is grouped together with the thruster commands, so to avoid messing with\n\n        # the thruster setpoint while tilting we need to get the current setpoint and send it with\n\n        # the tilt command.\n\n        with self._parent_drone.motion.thruster_lock:\n\n            thruster_setpoints = self._parent_drone.motion.current_thruster_setpoints.values()\n\n            self._parent_drone._tcp_client.motion_input_tilt(*thruster_setpoints, 0, 0, speed)\n\n    @property\n\n    def angle(self) -&gt; float:\n\n        \"\"\"Return the current angle of the camera tilt\n\n        Requires a drone with the tilt feature, and software version 1.5 or newer.\n\n        A RuntimeError is raised if either of those requirements are not met.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.5\")\n\n        self._verify_tilt_in_features()\n\n        debug_flags = self._parent_drone._state_watcher.general_state[\"debug_flags\"]\n\n        return self._tilt_angle_from_debug_flags(debug_flags)\n\n    @property\n\n    def stabilization_enabled(self) -&gt; bool:\n\n        \"\"\"Get the state of active camera stabilization\n\n        Use the `toggle_stabilization` method to turn stabilization on or off\n\n        *Returns*:\n\n        * Current state of active camera stabilization (bool)\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.6.42\")\n\n        self._verify_tilt_in_features()\n\n        debug_flags = self._parent_drone._state_watcher.general_state[\"debug_flags\"]\n\n        return self._tilt_stabilization_status_from_debug_flags(debug_flags)\n\n    def toggle_stabilization(self):\n\n        \"\"\"Toggle active camera stabilization on or off\n\n        Requires a drone with the tilt feature, and Blunux version 1.6.42 or newer.\n\n        A RuntimeError is raised if either of those requirements are not met.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.6.42\")\n\n        self._verify_tilt_in_features()\n\n        self._parent_drone._tcp_client.toggle_tilt_stabilization()\n\nclass LogoOverlay(Enum):\n\n    DISABLED = 0\n\n    BLUEYE = 1\n\n    CUSTOM = 2\n\nclass DepthUnitOverlay(Enum):\n\n    METERS = 0\n\n    FEET = 1\n\nclass TemperatureUnitOverlay(Enum):\n\n    CELSIUS = 0\n\n    FAHRENHEIT = 1\n\nclass FontSizeOverlay(Enum):\n\n    PX15 = 15\n\n    PX20 = 20\n\n    PX25 = 25\n\n    PX30 = 30\n\n    PX35 = 35\n\n    PX40 = 40\n\nclass Overlay:\n\n    \"\"\"Control the overlay on videos and pictures\"\"\"\n\n    def __init__(self, parent_drone: Drone):\n\n        self._parent_drone = parent_drone\n\n    def _get_named_overlay_parameters(self) -&gt; NamedTuple:\n\n        \"\"\"Get overlay parameters from drone and convert them to a named tuple\"\"\"\n\n        NamedParameters = namedtuple(\n\n            \"Parameters\",\n\n            [\n\n                \"returned_parameter\",\n\n                \"temperature_enabled\",\n\n                \"depth_enabled\",\n\n                \"heading_enabled\",\n\n                \"tilt_enabled\",\n\n                \"date_enabled\",\n\n                \"logo_index\",\n\n                \"depth_unit\",\n\n                \"temperature_unit\",\n\n                \"tz_offset\",\n\n                \"margin_width\",\n\n                \"margin_height\",\n\n                \"font_size\",\n\n                \"title\",\n\n                \"subtitle\",\n\n                \"date_format\",\n\n            ],\n\n        )\n\n        parameters = self._parent_drone._tcp_client.get_overlay_parameters()\n\n        return NamedParameters(*parameters)\n\n    @property\n\n    def temperature_enabled(self) -&gt; bool:\n\n        \"\"\"Get or set the state of the temperature overlay\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return bool(self._get_named_overlay_parameters().temperature_enabled)\n\n    @temperature_enabled.setter\n\n    def temperature_enabled(self, enable_temperature: bool):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        self._parent_drone._tcp_client.set_overlay_temperature_enabled(\n\n            1 if enable_temperature else 0\n\n        )\n\n    @property\n\n    def depth_enabled(self) -&gt; bool:\n\n        \"\"\"Get or set the state of the depth overlay\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return bool(self._get_named_overlay_parameters().depth_enabled)\n\n    @depth_enabled.setter\n\n    def depth_enabled(self, enable_depth: bool):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        self._parent_drone._tcp_client.set_overlay_depth_enabled(1 if enable_depth else 0)\n\n    @property\n\n    def heading_enabled(self) -&gt; bool:\n\n        \"\"\"Get or set the state of the heading overlay\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return bool(self._get_named_overlay_parameters().heading_enabled)\n\n    @heading_enabled.setter\n\n    def heading_enabled(self, enable_heading: bool):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        self._parent_drone._tcp_client.set_overlay_heading_enabled(1 if enable_heading else 0)\n\n    @property\n\n    def tilt_enabled(self) -&gt; bool:\n\n        \"\"\"Get or set the state of the tilt overlay\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return bool(self._get_named_overlay_parameters().tilt_enabled)\n\n    @tilt_enabled.setter\n\n    def tilt_enabled(self, enable_tilt: bool):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        self._parent_drone._tcp_client.set_overlay_tilt_enabled(1 if enable_tilt else 0)\n\n    @property\n\n    def date_enabled(self) -&gt; bool:\n\n        \"\"\"Get or set the state of the date overlay\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return bool(self._get_named_overlay_parameters().date_enabled)\n\n    @date_enabled.setter\n\n    def date_enabled(self, enable_date: bool):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        self._parent_drone._tcp_client.set_overlay_date_enabled(1 if enable_date else 0)\n\n    @property\n\n    def logo(self) -&gt; LogoOverlay:\n\n        \"\"\"Get or set logo overlay selection\n\n        Needs to be set to an instance of the `LogoOverlay` class, if not a RuntimeWarning is\n\n        raised.\n\n        Requires Blunux version 1.8.72 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.8.72\")\n\n        return LogoOverlay(self._get_named_overlay_parameters().logo_index)\n\n    @logo.setter\n\n    def logo(self, logo_index: LogoOverlay):\n\n        self._parent_drone._verify_required_blunux_version(\"1.8.72\")\n\n        if not isinstance(logo_index, LogoOverlay):\n\n            warnings.warn(\"Invalid logo index, ignoring\", RuntimeWarning)\n\n        elif logo_index.value not in range(3):\n\n            warnings.warn(\"Logo index out of range, ignoring\", RuntimeWarning)\n\n        else:\n\n            self._parent_drone._tcp_client.set_overlay_logo_index(logo_index.value)\n\n    @property\n\n    def depth_unit(self) -&gt; DepthUnitOverlay:\n\n        \"\"\"Get or set the depth unit for the overlay\n\n        Needs to be set to an instance of the `DepthUnitOverlay` class, if not a RuntimeWarning is\n\n        raised.\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return DepthUnitOverlay(self._get_named_overlay_parameters().depth_unit)\n\n    @depth_unit.setter\n\n    def depth_unit(self, unit_index: DepthUnitOverlay):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        if not isinstance(unit_index, DepthUnitOverlay):\n\n            warnings.warn(\"Invalid depth unit index, ignoring\", RuntimeWarning)\n\n        elif unit_index.value not in range(2):\n\n            warnings.warn(\"Depth unit index out of range, ignoring\", RuntimeWarning)\n\n        else:\n\n            self._parent_drone._tcp_client.set_overlay_depth_unit(unit_index.value)\n\n    @property\n\n    def temperature_unit(self) -&gt; TemperatureUnitOverlay:\n\n        \"\"\"Get or set the temperature unit for the overlay\n\n        Needs to be set to an instance of the `TemperatureUnitOverlay` class, if not a\n\n        RuntimeWarning is raised.\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return TemperatureUnitOverlay(self._get_named_overlay_parameters().temperature_unit)\n\n    @temperature_unit.setter\n\n    def temperature_unit(self, unit_index: TemperatureUnitOverlay):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        if not isinstance(unit_index, TemperatureUnitOverlay):\n\n            warnings.warn(\"Invalid temperature unit index, ignoring\", RuntimeWarning)\n\n        elif unit_index.value not in range(2):\n\n            warnings.warn(\"Temperature unit index out of range, ignoring\", RuntimeWarning)\n\n        else:\n\n            self._parent_drone._tcp_client.set_overlay_temperature_unit(unit_index.value)\n\n    @property\n\n    def timezone_offset(self) -&gt; int:\n\n        \"\"\"Get or set the timezone offset for the overlay\n\n        Set to the number of minutes (either positive or negative) the timestamp should be offset.\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return self._get_named_overlay_parameters().tz_offset\n\n    @timezone_offset.setter\n\n    def timezone_offset(self, offset: int):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        self._parent_drone._tcp_client.set_overlay_tz_offset(offset)\n\n    @property\n\n    def margin_width(self) -&gt; int:\n\n        \"\"\"Get or set the margin width for the overlay\n\n        The amount of pixels to use as margin on the right and left side of the overlay. Needs to\n\n        be a positive integer.\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return self._get_named_overlay_parameters().margin_width\n\n    @margin_width.setter\n\n    def margin_width(self, width: int):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        if width &lt; 0:\n\n            warnings.warn(\"Invalid margin width, ignoring\", RuntimeWarning)\n\n        else:\n\n            self._parent_drone._tcp_client.set_overlay_margin_width(width)\n\n    @property\n\n    def margin_height(self) -&gt; int:\n\n        \"\"\"Get or set the margin height for the overlay\n\n        The amount of pixels to use as margin on the top and bottom side of the overlay. Needs to be\n\n        a positive integer.\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return self._get_named_overlay_parameters().margin_height\n\n    @margin_height.setter\n\n    def margin_height(self, height: int):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        if height &lt; 0:\n\n            warnings.warn(\"Invalid margin height, ignoring\", RuntimeWarning)\n\n        else:\n\n            self._parent_drone._tcp_client.set_overlay_margin_height(height)\n\n    @property\n\n    def font_size(self) -&gt; FontSizeOverlay:\n\n        \"\"\"Get or set the font size for the overlay\n\n        Needs to be an instance of the `FontSizeOverlay` class, if not a RuntimeWarning is raised.\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return FontSizeOverlay(self._get_named_overlay_parameters().font_size)\n\n    @font_size.setter\n\n    def font_size(self, size: FontSizeOverlay):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        if not isinstance(size, FontSizeOverlay):\n\n            warnings.warn(\"Invalid font size, ignoring\", RuntimeWarning)\n\n        elif size.value not in range(15, 41):\n\n            warnings.warn(\"Font size out of range, ignoring\", RuntimeWarning)\n\n        else:\n\n            self._parent_drone._tcp_client.set_overlay_font_size(size.value)\n\n    @property\n\n    def title(self) -&gt; str:\n\n        \"\"\"Get or set the title for the overlay\n\n        The title needs to be a string of only ASCII characters with a maximum length of 63\n\n        characters. If a longer title is passed it will be truncated, and a RuntimeWarning is\n\n        raised.\n\n        Set to an empty string to disable title.\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return self._get_named_overlay_parameters().title.decode(\"utf-8\").rstrip(\"\\x00\")\n\n    @title.setter\n\n    def title(self, input_title: str):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        new_title = input_title\n\n        if len(input_title) &gt; 63:\n\n            warnings.warn(\"Too long title, truncating to 63 characters\", RuntimeWarning)\n\n            new_title = new_title[:63]\n\n        try:\n\n            encoded_title = bytes(new_title, \"ascii\")\n\n        except UnicodeEncodeError:\n\n            warnings.warn(\"Title can only contain ASCII characters, ignoring\", RuntimeWarning)\n\n            return\n\n        self._parent_drone._tcp_client.set_overlay_title(encoded_title + b\"\\x00\")\n\n    @property\n\n    def subtitle(self) -&gt; str:\n\n        \"\"\"Get or set the subtitle for the overlay\n\n        The subtitle needs to be a string of only ASCII characters with a maximum length of 63\n\n        characters. If a longer subtitle is passed it will be truncated, and a RuntimeWarning is\n\n        raised.\n\n        Set to an empty string to disable the subtitle.\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return self._get_named_overlay_parameters().subtitle.decode(\"utf-8\").rstrip(\"\\x00\")\n\n    @subtitle.setter\n\n    def subtitle(self, input_subtitle: str):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        new_subtitle = input_subtitle\n\n        if len(input_subtitle) &gt; 63:\n\n            warnings.warn(\"Too long subtitle, truncating to 63 characters\", RuntimeWarning)\n\n            new_subtitle = new_subtitle[:63]\n\n        try:\n\n            encoded_subtitle = bytes(new_subtitle, \"ascii\")\n\n        except UnicodeEncodeError:\n\n            warnings.warn(\"Subtitle can only contain ASCII characters, ignoring\", RuntimeWarning)\n\n            return\n\n        self._parent_drone._tcp_client.set_overlay_subtitle(encoded_subtitle + b\"\\x00\")\n\n    @property\n\n    def date_format(self) -&gt; str:\n\n        \"\"\"Get or set the format string for the time displayed in the overlay\n\n        Must be a string containing only ASCII characters, with a max length of 63 characters.\n\n        The format codes are defined by the C89 standard, see\n\n        https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes\n\n        for an overview of the available codes.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return self._get_named_overlay_parameters().date_format.decode(\"utf-8\").rstrip(\"\\x00\")\n\n    @date_format.setter\n\n    def date_format(self, input_format_str: str):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        format_str = input_format_str\n\n        if len(format_str) &gt; 63:\n\n            warnings.warn(\n\n                \"Too long date format string, truncating to 63 characters\", RuntimeWarning\n\n            )\n\n            format_str = format_str[:63]\n\n        try:\n\n            encoded_format_str = bytes(format_str, \"ascii\")\n\n        except UnicodeEncodeError:\n\n            warnings.warn(\n\n                \"Date format string can only contain ASCII characters, ignoring\", RuntimeWarning\n\n            )\n\n            return\n\n        self._parent_drone._tcp_client.set_overlay_date_format(encoded_format_str + b\"\\x00\")\n\n    def upload_logo(self, path_to_logo: str):\n\n        \"\"\"Upload user selectable logo for watermarking videos and pictures\n\n        Set the logo-property to `LogoOverlay.CUSTOM` to enable this logo.\n\n        Allowed filetype: JPG or PNG.\n\n        Max resolution: 2000 px.\n\n        Max file size: 5 MB.\n\n        Requires Blunux version 1.8.72 or newer.\n\n        *Exceptions*:\n\n        * `requests.exceptions.HTTPError` : Status code 400 for invalid files\n\n        * `requests.exceptions.ConnectTimeout` : If unable to create a connection within 1s\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.8.72\")\n\n        with open(path_to_logo, \"rb\") as f:\n\n            url = f\"http://{self._parent_drone._ip}/asset/logo\"\n\n            files = {\"image\": f}\n\n            response = requests.post(url, files=files, timeout=1)\n\n        response.raise_for_status()\n\n    def download_logo(self, output_directory=\".\"):\n\n        \"\"\"Download the original user uploaded logo (PNG or JPG)\n\n        Select the download directory with the output_directory parameter.\n\n        *Exceptions*:\n\n        * `requests.exceptions.HTTPError` : If no custom logo is uploaded.\n\n        * `requests.exceptions.ConnectTimeout` : If unable to create a connection within 1s\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.8.72\")\n\n        response = requests.get(f\"http://{self._parent_drone._ip}/asset/logo\", timeout=1)\n\n        response.raise_for_status()\n\n        filename = re.findall('filename=\"(.+)\"', response.headers[\"Content-Disposition\"])[0]\n\n        with open(f\"{output_directory}/{filename}\", \"wb\") as f:\n\n            f.write(response.content)\n\n    def delete_logo(self):\n\n        \"\"\"Delete the user uploaded logo from the drone\n\n        *Exceptions*:\n\n        * `requests.exceptions.HTTPError` : If an error occurs during deletion\n\n        * `requests.exceptions.ConnectTimeout` : If unable to create a connection within 1s\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.8.72\")\n\n        response = requests.delete(f\"http://{self._parent_drone._ip}/asset/logo\", timeout=1)\n\n        response.raise_for_status()\n\nclass Camera:\n\n    def __init__(self, parent_drone: Drone):\n\n        self._state_watcher = parent_drone._state_watcher\n\n        self._parent_drone = parent_drone\n\n        self.tilt = Tilt(parent_drone)\n\n        self.overlay = Overlay(parent_drone)\n\n    @property\n\n    def is_recording(self) -&gt; bool:\n\n        \"\"\"Start or stop a camera recording\n\n        *Arguments*:\n\n        * is_recording (bool): Set to True to start a recording, set to False to stop the current recording\n\n        *Returns*:\n\n        * is_recording (bool): True if the camera is currently recording, False if not\n\n        \"\"\"\n\n        state = self._state_watcher.general_state\n\n        if state[\"camera_record_time\"] != -1:\n\n            return True\n\n        else:\n\n            return False\n\n    @is_recording.setter\n\n    def is_recording(self, start_recording: bool):\n\n        if start_recording:\n\n            self._parent_drone._tcp_client.start_recording()\n\n        else:\n\n            self._parent_drone._tcp_client.stop_recording()\n\n    @property\n\n    def bitrate(self) -&gt; int:\n\n        \"\"\"Set or get the camera bitrate\n\n        *Arguments*:\n\n        * bitrate (int): Set the camera bitrate in bits, Valid values are in range &lt;1 000 000, 16 000 000&gt;\n\n        *Returns*:\n\n        * bitrate (int): Get the camera bitrate\n\n        \"\"\"\n\n        camera_parameters = self._parent_drone._tcp_client.get_camera_parameters()\n\n        bitrate = camera_parameters[1]\n\n        return bitrate\n\n    @bitrate.setter\n\n    def bitrate(self, bitrate: int):\n\n        self._parent_drone._tcp_client.set_camera_bitrate(bitrate)\n\n    @property\n\n    def exposure(self) -&gt; int:\n\n        \"\"\"Set or get the camera exposure\n\n        *Arguments*:\n\n        * exposure (int): Set the camera exposure_value: 1 = 1/1000th of a second, 5 = 1/200th of a second. Valid values are in the range &lt;1, 5000&gt;\n\n        *Returns*:\n\n        * exposure (int): Get the camera exposure\n\n        \"\"\"\n\n        camera_parameters = self._parent_drone._tcp_client.get_camera_parameters()\n\n        exposure = camera_parameters[2]\n\n        return exposure\n\n    @exposure.setter\n\n    def exposure(self, exposure: int):\n\n        self._parent_drone._tcp_client.set_camera_exposure(exposure)\n\n    @property\n\n    def whitebalance(self) -&gt; int:\n\n        \"\"\"Set or get the camera white balance\n\n        *Arguments*:\n\n        * whitebalance (int): Set the camera white balance. Valid values are in the range &lt;2800, 9300&gt;\n\n        *Returns*:\n\n        * whitebalance (int): Get the camera white balance\n\n        \"\"\"\n\n        camera_parameters = self._parent_drone._tcp_client.get_camera_parameters()\n\n        whitebalance = camera_parameters[3]\n\n        return whitebalance\n\n    @whitebalance.setter\n\n    def whitebalance(self, whitebalance: int):\n\n        self._parent_drone._tcp_client.set_camera_whitebalance(whitebalance)\n\n    @property\n\n    def hue(self) -&gt; int:\n\n        \"\"\"Set or get the camera hue\n\n        *Arguments*:\n\n        * hue (int): Set the camera hue. Valid values are in the range &lt;-40, 40&gt;\n\n        *Returns*:\n\n        * hue (int): Get the camera hue\n\n        \"\"\"\n\n        camera_parameters = self._parent_drone._tcp_client.get_camera_parameters()\n\n        hue = camera_parameters[4]\n\n        return hue\n\n    @hue.setter\n\n    def hue(self, hue: int):\n\n        self._parent_drone._tcp_client.set_camera_hue(hue)\n\n    @property\n\n    def resolution(self) -&gt; int:\n\n        \"\"\"Set or get the camera resolution\n\n        *Arguments*:\n\n        * resolution (int): Set the camera in vertical pixels. Valid values are 720 or 1080\n\n        *Returns*:\n\n        * resolution (int): Get the camera resolution\n\n        \"\"\"\n\n        camera_parameters = self._parent_drone._tcp_client.get_camera_parameters()\n\n        resolution = camera_parameters[5]\n\n        return resolution\n\n    @resolution.setter\n\n    def resolution(self, resolution: int):\n\n        self._parent_drone._tcp_client.set_camera_resolution(resolution)\n\n    @property\n\n    def framerate(self) -&gt; int:\n\n        \"\"\"Set or get the camera frame rate\n\n        *Arguments*:\n\n        * framerate (int): Set the camera frame rate in frames per second. Valid values are 25 or 30\n\n        *Returns*:\n\n        * framerate (int): Get the camera frame rate\n\n        \"\"\"\n\n        camera_parameters = self._parent_drone._tcp_client.get_camera_parameters()\n\n        framerate = camera_parameters[6]\n\n        return framerate\n\n    @framerate.setter\n\n    def framerate(self, framerate: int):\n\n        self._parent_drone._tcp_client.set_camera_framerate(framerate)\n\n    @property\n\n    def record_time(self) -&gt; int:\n\n        \"\"\"Set or get the duration of the current camera recording\n\n        *Returns*:\n\n        * record_time (int): The length in seconds of the current recording, -1 if the camera is not currently recording\n\n        \"\"\"\n\n        return self._state_watcher.general_state[\"camera_record_time\"]\n\n    def take_picture(self):\n\n        \"\"\"Takes a still picture and stores it locally on the drone\n\n        These pictures can be downloaded with the Blueye App, or by any WebDAV compatible client.\n\n        This feature was added with drone version 1.4.7, so if you try to use it with an older\n\n        version this method will raise a RunTimeError.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.4.7\")\n\n        self._parent_drone._tcp_client.take_still_picture()\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#variables","title":"Variables","text":"<pre><code>TYPE_CHECKING\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#classes","title":"Classes","text":""},{"location":"reference/blueye/sdk/camera/#camera","title":"Camera","text":"<pre><code>class Camera(\n    parent_drone: 'Drone'\n)\n</code></pre> View Source <pre><code>class Camera:\n\n    def __init__(self, parent_drone: Drone):\n\n        self._state_watcher = parent_drone._state_watcher\n\n        self._parent_drone = parent_drone\n\n        self.tilt = Tilt(parent_drone)\n\n        self.overlay = Overlay(parent_drone)\n\n    @property\n\n    def is_recording(self) -&gt; bool:\n\n        \"\"\"Start or stop a camera recording\n\n        *Arguments*:\n\n        * is_recording (bool): Set to True to start a recording, set to False to stop the current recording\n\n        *Returns*:\n\n        * is_recording (bool): True if the camera is currently recording, False if not\n\n        \"\"\"\n\n        state = self._state_watcher.general_state\n\n        if state[\"camera_record_time\"] != -1:\n\n            return True\n\n        else:\n\n            return False\n\n    @is_recording.setter\n\n    def is_recording(self, start_recording: bool):\n\n        if start_recording:\n\n            self._parent_drone._tcp_client.start_recording()\n\n        else:\n\n            self._parent_drone._tcp_client.stop_recording()\n\n    @property\n\n    def bitrate(self) -&gt; int:\n\n        \"\"\"Set or get the camera bitrate\n\n        *Arguments*:\n\n        * bitrate (int): Set the camera bitrate in bits, Valid values are in range &lt;1 000 000, 16 000 000&gt;\n\n        *Returns*:\n\n        * bitrate (int): Get the camera bitrate\n\n        \"\"\"\n\n        camera_parameters = self._parent_drone._tcp_client.get_camera_parameters()\n\n        bitrate = camera_parameters[1]\n\n        return bitrate\n\n    @bitrate.setter\n\n    def bitrate(self, bitrate: int):\n\n        self._parent_drone._tcp_client.set_camera_bitrate(bitrate)\n\n    @property\n\n    def exposure(self) -&gt; int:\n\n        \"\"\"Set or get the camera exposure\n\n        *Arguments*:\n\n        * exposure (int): Set the camera exposure_value: 1 = 1/1000th of a second, 5 = 1/200th of a second. Valid values are in the range &lt;1, 5000&gt;\n\n        *Returns*:\n\n        * exposure (int): Get the camera exposure\n\n        \"\"\"\n\n        camera_parameters = self._parent_drone._tcp_client.get_camera_parameters()\n\n        exposure = camera_parameters[2]\n\n        return exposure\n\n    @exposure.setter\n\n    def exposure(self, exposure: int):\n\n        self._parent_drone._tcp_client.set_camera_exposure(exposure)\n\n    @property\n\n    def whitebalance(self) -&gt; int:\n\n        \"\"\"Set or get the camera white balance\n\n        *Arguments*:\n\n        * whitebalance (int): Set the camera white balance. Valid values are in the range &lt;2800, 9300&gt;\n\n        *Returns*:\n\n        * whitebalance (int): Get the camera white balance\n\n        \"\"\"\n\n        camera_parameters = self._parent_drone._tcp_client.get_camera_parameters()\n\n        whitebalance = camera_parameters[3]\n\n        return whitebalance\n\n    @whitebalance.setter\n\n    def whitebalance(self, whitebalance: int):\n\n        self._parent_drone._tcp_client.set_camera_whitebalance(whitebalance)\n\n    @property\n\n    def hue(self) -&gt; int:\n\n        \"\"\"Set or get the camera hue\n\n        *Arguments*:\n\n        * hue (int): Set the camera hue. Valid values are in the range &lt;-40, 40&gt;\n\n        *Returns*:\n\n        * hue (int): Get the camera hue\n\n        \"\"\"\n\n        camera_parameters = self._parent_drone._tcp_client.get_camera_parameters()\n\n        hue = camera_parameters[4]\n\n        return hue\n\n    @hue.setter\n\n    def hue(self, hue: int):\n\n        self._parent_drone._tcp_client.set_camera_hue(hue)\n\n    @property\n\n    def resolution(self) -&gt; int:\n\n        \"\"\"Set or get the camera resolution\n\n        *Arguments*:\n\n        * resolution (int): Set the camera in vertical pixels. Valid values are 720 or 1080\n\n        *Returns*:\n\n        * resolution (int): Get the camera resolution\n\n        \"\"\"\n\n        camera_parameters = self._parent_drone._tcp_client.get_camera_parameters()\n\n        resolution = camera_parameters[5]\n\n        return resolution\n\n    @resolution.setter\n\n    def resolution(self, resolution: int):\n\n        self._parent_drone._tcp_client.set_camera_resolution(resolution)\n\n    @property\n\n    def framerate(self) -&gt; int:\n\n        \"\"\"Set or get the camera frame rate\n\n        *Arguments*:\n\n        * framerate (int): Set the camera frame rate in frames per second. Valid values are 25 or 30\n\n        *Returns*:\n\n        * framerate (int): Get the camera frame rate\n\n        \"\"\"\n\n        camera_parameters = self._parent_drone._tcp_client.get_camera_parameters()\n\n        framerate = camera_parameters[6]\n\n        return framerate\n\n    @framerate.setter\n\n    def framerate(self, framerate: int):\n\n        self._parent_drone._tcp_client.set_camera_framerate(framerate)\n\n    @property\n\n    def record_time(self) -&gt; int:\n\n        \"\"\"Set or get the duration of the current camera recording\n\n        *Returns*:\n\n        * record_time (int): The length in seconds of the current recording, -1 if the camera is not currently recording\n\n        \"\"\"\n\n        return self._state_watcher.general_state[\"camera_record_time\"]\n\n    def take_picture(self):\n\n        \"\"\"Takes a still picture and stores it locally on the drone\n\n        These pictures can be downloaded with the Blueye App, or by any WebDAV compatible client.\n\n        This feature was added with drone version 1.4.7, so if you try to use it with an older\n\n        version this method will raise a RunTimeError.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.4.7\")\n\n        self._parent_drone._tcp_client.take_still_picture()\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#instance-variables","title":"Instance variables","text":"<pre><code>bitrate\n</code></pre> <p>Set or get the camera bitrate</p> <p>Arguments:</p> <ul> <li>bitrate (int): Set the camera bitrate in bits, Valid values are in range &lt;1 000 000, 16 000 000&gt;</li> </ul> <p>Returns:</p> <ul> <li>bitrate (int): Get the camera bitrate</li> </ul> <pre><code>exposure\n</code></pre> <p>Set or get the camera exposure</p> <p>Arguments:</p> <ul> <li>exposure (int): Set the camera exposure_value: 1 = 1/1000<sup>th</sup> of a second, 5 = 1/200<sup>th</sup> of a second. Valid values are in the range &lt;1, 5000&gt;</li> </ul> <p>Returns:</p> <ul> <li>exposure (int): Get the camera exposure</li> </ul> <pre><code>framerate\n</code></pre> <p>Set or get the camera frame rate</p> <p>Arguments:</p> <ul> <li>framerate (int): Set the camera frame rate in frames per second. Valid values are 25 or 30</li> </ul> <p>Returns:</p> <ul> <li>framerate (int): Get the camera frame rate</li> </ul> <pre><code>hue\n</code></pre> <p>Set or get the camera hue</p> <p>Arguments:</p> <ul> <li>hue (int): Set the camera hue. Valid values are in the range &lt;-40, 40&gt;</li> </ul> <p>Returns:</p> <ul> <li>hue (int): Get the camera hue</li> </ul> <pre><code>is_recording\n</code></pre> <p>Start or stop a camera recording</p> <p>Arguments:</p> <ul> <li>is_recording (bool): Set to True to start a recording, set to False to stop the current recording</li> </ul> <p>Returns:</p> <ul> <li>is_recording (bool): True if the camera is currently recording, False if not</li> </ul> <pre><code>record_time\n</code></pre> <p>Set or get the duration of the current camera recording</p> <p>Returns:</p> <ul> <li>record_time (int): The length in seconds of the current recording, -1 if the camera is not currently recording</li> </ul> <pre><code>resolution\n</code></pre> <p>Set or get the camera resolution</p> <p>Arguments:</p> <ul> <li>resolution (int): Set the camera in vertical pixels. Valid values are 720 or 1080</li> </ul> <p>Returns:</p> <ul> <li>resolution (int): Get the camera resolution</li> </ul> <pre><code>whitebalance\n</code></pre> <p>Set or get the camera white balance</p> <p>Arguments:</p> <ul> <li>whitebalance (int): Set the camera white balance. Valid values are in the range &lt;2800, 9300&gt;</li> </ul> <p>Returns:</p> <ul> <li>whitebalance (int): Get the camera white balance</li> </ul>"},{"location":"reference/blueye/sdk/camera/#methods","title":"Methods","text":""},{"location":"reference/blueye/sdk/camera/#take_picture","title":"take_picture","text":"<pre><code>def take_picture(\n    self\n)\n</code></pre> <p>Takes a still picture and stores it locally on the drone</p> <p>These pictures can be downloaded with the Blueye App, or by any WebDAV compatible client. This feature was added with drone version 1.4.7, so if you try to use it with an older version this method will raise a RunTimeError.</p> View Source <pre><code>    def take_picture(self):\n\n        \"\"\"Takes a still picture and stores it locally on the drone\n\n        These pictures can be downloaded with the Blueye App, or by any WebDAV compatible client.\n\n        This feature was added with drone version 1.4.7, so if you try to use it with an older\n\n        version this method will raise a RunTimeError.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.4.7\")\n\n        self._parent_drone._tcp_client.take_still_picture()\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#depthunitoverlay","title":"DepthUnitOverlay","text":"<pre><code>class DepthUnitOverlay(\n    *args,\n    **kwds\n)\n</code></pre> <p>Create a collection of name/value pairs.</p> <p>Example enumeration:</p> <p>class Color(Enum): ...     RED = 1 ...     BLUE = 2 ...     GREEN = 3</p> <p>Access them by:</p> <ul> <li>attribute access::</li> </ul> <p>Color.RED  <ul> <li>value lookup:</li> </ul> <p>Color(1)  <ul> <li>name lookup:</li> </ul> <p>Color['RED']  <p>Enumerations can be iterated over, and know how many members they have:</p> <p>len(Color) 3</p> <p>list(Color) [, , ] <p>Methods can be added to enumerations, and members can have their own attributes -- see the documentation for details.</p> View Source <pre><code>class DepthUnitOverlay(Enum):\n\n    METERS = 0\n\n    FEET = 1\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>enum.Enum</li> </ul>"},{"location":"reference/blueye/sdk/camera/#class-variables","title":"Class variables","text":"<pre><code>FEET\n</code></pre> <pre><code>METERS\n</code></pre> <pre><code>name\n</code></pre> <pre><code>value\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#fontsizeoverlay","title":"FontSizeOverlay","text":"<pre><code>class FontSizeOverlay(\n    *args,\n    **kwds\n)\n</code></pre> <p>Create a collection of name/value pairs.</p> <p>Example enumeration:</p> <p>class Color(Enum): ...     RED = 1 ...     BLUE = 2 ...     GREEN = 3</p> <p>Access them by:</p> <ul> <li>attribute access::</li> </ul> <p>Color.RED  <ul> <li>value lookup:</li> </ul> <p>Color(1)  <ul> <li>name lookup:</li> </ul> <p>Color['RED']  <p>Enumerations can be iterated over, and know how many members they have:</p> <p>len(Color) 3</p> <p>list(Color) [, , ] <p>Methods can be added to enumerations, and members can have their own attributes -- see the documentation for details.</p> View Source <pre><code>class FontSizeOverlay(Enum):\n\n    PX15 = 15\n\n    PX20 = 20\n\n    PX25 = 25\n\n    PX30 = 30\n\n    PX35 = 35\n\n    PX40 = 40\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#ancestors-in-mro_1","title":"Ancestors (in MRO)","text":"<ul> <li>enum.Enum</li> </ul>"},{"location":"reference/blueye/sdk/camera/#class-variables_1","title":"Class variables","text":"<pre><code>PX15\n</code></pre> <pre><code>PX20\n</code></pre> <pre><code>PX25\n</code></pre> <pre><code>PX30\n</code></pre> <pre><code>PX35\n</code></pre> <pre><code>PX40\n</code></pre> <pre><code>name\n</code></pre> <pre><code>value\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#logooverlay","title":"LogoOverlay","text":"<pre><code>class LogoOverlay(\n    *args,\n    **kwds\n)\n</code></pre> <p>Create a collection of name/value pairs.</p> <p>Example enumeration:</p> <p>class Color(Enum): ...     RED = 1 ...     BLUE = 2 ...     GREEN = 3</p> <p>Access them by:</p> <ul> <li>attribute access::</li> </ul> <p>Color.RED  <ul> <li>value lookup:</li> </ul> <p>Color(1)  <ul> <li>name lookup:</li> </ul> <p>Color['RED']  <p>Enumerations can be iterated over, and know how many members they have:</p> <p>len(Color) 3</p> <p>list(Color) [, , ] <p>Methods can be added to enumerations, and members can have their own attributes -- see the documentation for details.</p> View Source <pre><code>class LogoOverlay(Enum):\n\n    DISABLED = 0\n\n    BLUEYE = 1\n\n    CUSTOM = 2\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#ancestors-in-mro_2","title":"Ancestors (in MRO)","text":"<ul> <li>enum.Enum</li> </ul>"},{"location":"reference/blueye/sdk/camera/#class-variables_2","title":"Class variables","text":"<pre><code>BLUEYE\n</code></pre> <pre><code>CUSTOM\n</code></pre> <pre><code>DISABLED\n</code></pre> <pre><code>name\n</code></pre> <pre><code>value\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#overlay","title":"Overlay","text":"<pre><code>class Overlay(\n    parent_drone: 'Drone'\n)\n</code></pre> <p>Control the overlay on videos and pictures</p> View Source <pre><code>class Overlay:\n\n    \"\"\"Control the overlay on videos and pictures\"\"\"\n\n    def __init__(self, parent_drone: Drone):\n\n        self._parent_drone = parent_drone\n\n    def _get_named_overlay_parameters(self) -&gt; NamedTuple:\n\n        \"\"\"Get overlay parameters from drone and convert them to a named tuple\"\"\"\n\n        NamedParameters = namedtuple(\n\n            \"Parameters\",\n\n            [\n\n                \"returned_parameter\",\n\n                \"temperature_enabled\",\n\n                \"depth_enabled\",\n\n                \"heading_enabled\",\n\n                \"tilt_enabled\",\n\n                \"date_enabled\",\n\n                \"logo_index\",\n\n                \"depth_unit\",\n\n                \"temperature_unit\",\n\n                \"tz_offset\",\n\n                \"margin_width\",\n\n                \"margin_height\",\n\n                \"font_size\",\n\n                \"title\",\n\n                \"subtitle\",\n\n                \"date_format\",\n\n            ],\n\n        )\n\n        parameters = self._parent_drone._tcp_client.get_overlay_parameters()\n\n        return NamedParameters(*parameters)\n\n    @property\n\n    def temperature_enabled(self) -&gt; bool:\n\n        \"\"\"Get or set the state of the temperature overlay\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return bool(self._get_named_overlay_parameters().temperature_enabled)\n\n    @temperature_enabled.setter\n\n    def temperature_enabled(self, enable_temperature: bool):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        self._parent_drone._tcp_client.set_overlay_temperature_enabled(\n\n            1 if enable_temperature else 0\n\n        )\n\n    @property\n\n    def depth_enabled(self) -&gt; bool:\n\n        \"\"\"Get or set the state of the depth overlay\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return bool(self._get_named_overlay_parameters().depth_enabled)\n\n    @depth_enabled.setter\n\n    def depth_enabled(self, enable_depth: bool):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        self._parent_drone._tcp_client.set_overlay_depth_enabled(1 if enable_depth else 0)\n\n    @property\n\n    def heading_enabled(self) -&gt; bool:\n\n        \"\"\"Get or set the state of the heading overlay\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return bool(self._get_named_overlay_parameters().heading_enabled)\n\n    @heading_enabled.setter\n\n    def heading_enabled(self, enable_heading: bool):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        self._parent_drone._tcp_client.set_overlay_heading_enabled(1 if enable_heading else 0)\n\n    @property\n\n    def tilt_enabled(self) -&gt; bool:\n\n        \"\"\"Get or set the state of the tilt overlay\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return bool(self._get_named_overlay_parameters().tilt_enabled)\n\n    @tilt_enabled.setter\n\n    def tilt_enabled(self, enable_tilt: bool):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        self._parent_drone._tcp_client.set_overlay_tilt_enabled(1 if enable_tilt else 0)\n\n    @property\n\n    def date_enabled(self) -&gt; bool:\n\n        \"\"\"Get or set the state of the date overlay\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return bool(self._get_named_overlay_parameters().date_enabled)\n\n    @date_enabled.setter\n\n    def date_enabled(self, enable_date: bool):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        self._parent_drone._tcp_client.set_overlay_date_enabled(1 if enable_date else 0)\n\n    @property\n\n    def logo(self) -&gt; LogoOverlay:\n\n        \"\"\"Get or set logo overlay selection\n\n        Needs to be set to an instance of the `LogoOverlay` class, if not a RuntimeWarning is\n\n        raised.\n\n        Requires Blunux version 1.8.72 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.8.72\")\n\n        return LogoOverlay(self._get_named_overlay_parameters().logo_index)\n\n    @logo.setter\n\n    def logo(self, logo_index: LogoOverlay):\n\n        self._parent_drone._verify_required_blunux_version(\"1.8.72\")\n\n        if not isinstance(logo_index, LogoOverlay):\n\n            warnings.warn(\"Invalid logo index, ignoring\", RuntimeWarning)\n\n        elif logo_index.value not in range(3):\n\n            warnings.warn(\"Logo index out of range, ignoring\", RuntimeWarning)\n\n        else:\n\n            self._parent_drone._tcp_client.set_overlay_logo_index(logo_index.value)\n\n    @property\n\n    def depth_unit(self) -&gt; DepthUnitOverlay:\n\n        \"\"\"Get or set the depth unit for the overlay\n\n        Needs to be set to an instance of the `DepthUnitOverlay` class, if not a RuntimeWarning is\n\n        raised.\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return DepthUnitOverlay(self._get_named_overlay_parameters().depth_unit)\n\n    @depth_unit.setter\n\n    def depth_unit(self, unit_index: DepthUnitOverlay):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        if not isinstance(unit_index, DepthUnitOverlay):\n\n            warnings.warn(\"Invalid depth unit index, ignoring\", RuntimeWarning)\n\n        elif unit_index.value not in range(2):\n\n            warnings.warn(\"Depth unit index out of range, ignoring\", RuntimeWarning)\n\n        else:\n\n            self._parent_drone._tcp_client.set_overlay_depth_unit(unit_index.value)\n\n    @property\n\n    def temperature_unit(self) -&gt; TemperatureUnitOverlay:\n\n        \"\"\"Get or set the temperature unit for the overlay\n\n        Needs to be set to an instance of the `TemperatureUnitOverlay` class, if not a\n\n        RuntimeWarning is raised.\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return TemperatureUnitOverlay(self._get_named_overlay_parameters().temperature_unit)\n\n    @temperature_unit.setter\n\n    def temperature_unit(self, unit_index: TemperatureUnitOverlay):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        if not isinstance(unit_index, TemperatureUnitOverlay):\n\n            warnings.warn(\"Invalid temperature unit index, ignoring\", RuntimeWarning)\n\n        elif unit_index.value not in range(2):\n\n            warnings.warn(\"Temperature unit index out of range, ignoring\", RuntimeWarning)\n\n        else:\n\n            self._parent_drone._tcp_client.set_overlay_temperature_unit(unit_index.value)\n\n    @property\n\n    def timezone_offset(self) -&gt; int:\n\n        \"\"\"Get or set the timezone offset for the overlay\n\n        Set to the number of minutes (either positive or negative) the timestamp should be offset.\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return self._get_named_overlay_parameters().tz_offset\n\n    @timezone_offset.setter\n\n    def timezone_offset(self, offset: int):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        self._parent_drone._tcp_client.set_overlay_tz_offset(offset)\n\n    @property\n\n    def margin_width(self) -&gt; int:\n\n        \"\"\"Get or set the margin width for the overlay\n\n        The amount of pixels to use as margin on the right and left side of the overlay. Needs to\n\n        be a positive integer.\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return self._get_named_overlay_parameters().margin_width\n\n    @margin_width.setter\n\n    def margin_width(self, width: int):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        if width &lt; 0:\n\n            warnings.warn(\"Invalid margin width, ignoring\", RuntimeWarning)\n\n        else:\n\n            self._parent_drone._tcp_client.set_overlay_margin_width(width)\n\n    @property\n\n    def margin_height(self) -&gt; int:\n\n        \"\"\"Get or set the margin height for the overlay\n\n        The amount of pixels to use as margin on the top and bottom side of the overlay. Needs to be\n\n        a positive integer.\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return self._get_named_overlay_parameters().margin_height\n\n    @margin_height.setter\n\n    def margin_height(self, height: int):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        if height &lt; 0:\n\n            warnings.warn(\"Invalid margin height, ignoring\", RuntimeWarning)\n\n        else:\n\n            self._parent_drone._tcp_client.set_overlay_margin_height(height)\n\n    @property\n\n    def font_size(self) -&gt; FontSizeOverlay:\n\n        \"\"\"Get or set the font size for the overlay\n\n        Needs to be an instance of the `FontSizeOverlay` class, if not a RuntimeWarning is raised.\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return FontSizeOverlay(self._get_named_overlay_parameters().font_size)\n\n    @font_size.setter\n\n    def font_size(self, size: FontSizeOverlay):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        if not isinstance(size, FontSizeOverlay):\n\n            warnings.warn(\"Invalid font size, ignoring\", RuntimeWarning)\n\n        elif size.value not in range(15, 41):\n\n            warnings.warn(\"Font size out of range, ignoring\", RuntimeWarning)\n\n        else:\n\n            self._parent_drone._tcp_client.set_overlay_font_size(size.value)\n\n    @property\n\n    def title(self) -&gt; str:\n\n        \"\"\"Get or set the title for the overlay\n\n        The title needs to be a string of only ASCII characters with a maximum length of 63\n\n        characters. If a longer title is passed it will be truncated, and a RuntimeWarning is\n\n        raised.\n\n        Set to an empty string to disable title.\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return self._get_named_overlay_parameters().title.decode(\"utf-8\").rstrip(\"\\x00\")\n\n    @title.setter\n\n    def title(self, input_title: str):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        new_title = input_title\n\n        if len(input_title) &gt; 63:\n\n            warnings.warn(\"Too long title, truncating to 63 characters\", RuntimeWarning)\n\n            new_title = new_title[:63]\n\n        try:\n\n            encoded_title = bytes(new_title, \"ascii\")\n\n        except UnicodeEncodeError:\n\n            warnings.warn(\"Title can only contain ASCII characters, ignoring\", RuntimeWarning)\n\n            return\n\n        self._parent_drone._tcp_client.set_overlay_title(encoded_title + b\"\\x00\")\n\n    @property\n\n    def subtitle(self) -&gt; str:\n\n        \"\"\"Get or set the subtitle for the overlay\n\n        The subtitle needs to be a string of only ASCII characters with a maximum length of 63\n\n        characters. If a longer subtitle is passed it will be truncated, and a RuntimeWarning is\n\n        raised.\n\n        Set to an empty string to disable the subtitle.\n\n        Requires Blunux version 1.7.60 or newer.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return self._get_named_overlay_parameters().subtitle.decode(\"utf-8\").rstrip(\"\\x00\")\n\n    @subtitle.setter\n\n    def subtitle(self, input_subtitle: str):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        new_subtitle = input_subtitle\n\n        if len(input_subtitle) &gt; 63:\n\n            warnings.warn(\"Too long subtitle, truncating to 63 characters\", RuntimeWarning)\n\n            new_subtitle = new_subtitle[:63]\n\n        try:\n\n            encoded_subtitle = bytes(new_subtitle, \"ascii\")\n\n        except UnicodeEncodeError:\n\n            warnings.warn(\"Subtitle can only contain ASCII characters, ignoring\", RuntimeWarning)\n\n            return\n\n        self._parent_drone._tcp_client.set_overlay_subtitle(encoded_subtitle + b\"\\x00\")\n\n    @property\n\n    def date_format(self) -&gt; str:\n\n        \"\"\"Get or set the format string for the time displayed in the overlay\n\n        Must be a string containing only ASCII characters, with a max length of 63 characters.\n\n        The format codes are defined by the C89 standard, see\n\n        https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes\n\n        for an overview of the available codes.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        return self._get_named_overlay_parameters().date_format.decode(\"utf-8\").rstrip(\"\\x00\")\n\n    @date_format.setter\n\n    def date_format(self, input_format_str: str):\n\n        self._parent_drone._verify_required_blunux_version(\"1.7.60\")\n\n        format_str = input_format_str\n\n        if len(format_str) &gt; 63:\n\n            warnings.warn(\n\n                \"Too long date format string, truncating to 63 characters\", RuntimeWarning\n\n            )\n\n            format_str = format_str[:63]\n\n        try:\n\n            encoded_format_str = bytes(format_str, \"ascii\")\n\n        except UnicodeEncodeError:\n\n            warnings.warn(\n\n                \"Date format string can only contain ASCII characters, ignoring\", RuntimeWarning\n\n            )\n\n            return\n\n        self._parent_drone._tcp_client.set_overlay_date_format(encoded_format_str + b\"\\x00\")\n\n    def upload_logo(self, path_to_logo: str):\n\n        \"\"\"Upload user selectable logo for watermarking videos and pictures\n\n        Set the logo-property to `LogoOverlay.CUSTOM` to enable this logo.\n\n        Allowed filetype: JPG or PNG.\n\n        Max resolution: 2000 px.\n\n        Max file size: 5 MB.\n\n        Requires Blunux version 1.8.72 or newer.\n\n        *Exceptions*:\n\n        * `requests.exceptions.HTTPError` : Status code 400 for invalid files\n\n        * `requests.exceptions.ConnectTimeout` : If unable to create a connection within 1s\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.8.72\")\n\n        with open(path_to_logo, \"rb\") as f:\n\n            url = f\"http://{self._parent_drone._ip}/asset/logo\"\n\n            files = {\"image\": f}\n\n            response = requests.post(url, files=files, timeout=1)\n\n        response.raise_for_status()\n\n    def download_logo(self, output_directory=\".\"):\n\n        \"\"\"Download the original user uploaded logo (PNG or JPG)\n\n        Select the download directory with the output_directory parameter.\n\n        *Exceptions*:\n\n        * `requests.exceptions.HTTPError` : If no custom logo is uploaded.\n\n        * `requests.exceptions.ConnectTimeout` : If unable to create a connection within 1s\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.8.72\")\n\n        response = requests.get(f\"http://{self._parent_drone._ip}/asset/logo\", timeout=1)\n\n        response.raise_for_status()\n\n        filename = re.findall('filename=\"(.+)\"', response.headers[\"Content-Disposition\"])[0]\n\n        with open(f\"{output_directory}/{filename}\", \"wb\") as f:\n\n            f.write(response.content)\n\n    def delete_logo(self):\n\n        \"\"\"Delete the user uploaded logo from the drone\n\n        *Exceptions*:\n\n        * `requests.exceptions.HTTPError` : If an error occurs during deletion\n\n        * `requests.exceptions.ConnectTimeout` : If unable to create a connection within 1s\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.8.72\")\n\n        response = requests.delete(f\"http://{self._parent_drone._ip}/asset/logo\", timeout=1)\n\n        response.raise_for_status()\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#instance-variables_1","title":"Instance variables","text":"<pre><code>date_enabled\n</code></pre> <p>Get or set the state of the date overlay</p> <p>Requires Blunux version 1.7.60 or newer.</p> <pre><code>date_format\n</code></pre> <p>Get or set the format string for the time displayed in the overlay</p> <p>Must be a string containing only ASCII characters, with a max length of 63 characters.</p> <p>The format codes are defined by the C89 standard, see https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes for an overview of the available codes.</p> <pre><code>depth_enabled\n</code></pre> <p>Get or set the state of the depth overlay</p> <p>Requires Blunux version 1.7.60 or newer.</p> <pre><code>depth_unit\n</code></pre> <p>Get or set the depth unit for the overlay</p> <p>Needs to be set to an instance of the <code>DepthUnitOverlay</code> class, if not a RuntimeWarning is raised.</p> <p>Requires Blunux version 1.7.60 or newer.</p> <pre><code>font_size\n</code></pre> <p>Get or set the font size for the overlay</p> <p>Needs to be an instance of the <code>FontSizeOverlay</code> class, if not a RuntimeWarning is raised.</p> <p>Requires Blunux version 1.7.60 or newer.</p> <pre><code>heading_enabled\n</code></pre> <p>Get or set the state of the heading overlay</p> <p>Requires Blunux version 1.7.60 or newer.</p> <pre><code>logo\n</code></pre> <p>Get or set logo overlay selection</p> <p>Needs to be set to an instance of the <code>LogoOverlay</code> class, if not a RuntimeWarning is raised.</p> <p>Requires Blunux version 1.8.72 or newer.</p> <pre><code>margin_height\n</code></pre> <p>Get or set the margin height for the overlay</p> <p>The amount of pixels to use as margin on the top and bottom side of the overlay. Needs to be a positive integer.</p> <p>Requires Blunux version 1.7.60 or newer.</p> <pre><code>margin_width\n</code></pre> <p>Get or set the margin width for the overlay</p> <p>The amount of pixels to use as margin on the right and left side of the overlay. Needs to be a positive integer.</p> <p>Requires Blunux version 1.7.60 or newer.</p> <pre><code>subtitle\n</code></pre> <p>Get or set the subtitle for the overlay</p> <p>The subtitle needs to be a string of only ASCII characters with a maximum length of 63 characters. If a longer subtitle is passed it will be truncated, and a RuntimeWarning is raised.</p> <p>Set to an empty string to disable the subtitle.</p> <p>Requires Blunux version 1.7.60 or newer.</p> <pre><code>temperature_enabled\n</code></pre> <p>Get or set the state of the temperature overlay</p> <p>Requires Blunux version 1.7.60 or newer.</p> <pre><code>temperature_unit\n</code></pre> <p>Get or set the temperature unit for the overlay</p> <p>Needs to be set to an instance of the <code>TemperatureUnitOverlay</code> class, if not a RuntimeWarning is raised.</p> <p>Requires Blunux version 1.7.60 or newer.</p> <pre><code>tilt_enabled\n</code></pre> <p>Get or set the state of the tilt overlay</p> <p>Requires Blunux version 1.7.60 or newer.</p> <pre><code>timezone_offset\n</code></pre> <p>Get or set the timezone offset for the overlay</p> <p>Set to the number of minutes (either positive or negative) the timestamp should be offset.</p> <p>Requires Blunux version 1.7.60 or newer.</p> <pre><code>title\n</code></pre> <p>Get or set the title for the overlay</p> <p>The title needs to be a string of only ASCII characters with a maximum length of 63 characters. If a longer title is passed it will be truncated, and a RuntimeWarning is raised.</p> <p>Set to an empty string to disable title.</p> <p>Requires Blunux version 1.7.60 or newer.</p>"},{"location":"reference/blueye/sdk/camera/#methods_1","title":"Methods","text":""},{"location":"reference/blueye/sdk/camera/#delete_logo","title":"delete_logo","text":"<pre><code>def delete_logo(\n    self\n)\n</code></pre> <p>Delete the user uploaded logo from the drone</p> <p>Exceptions:</p> <ul> <li> <p><code>requests.exceptions.HTTPError</code> : If an error occurs during deletion</p> </li> <li> <p><code>requests.exceptions.ConnectTimeout</code> : If unable to create a connection within 1s</p> </li> </ul> View Source <pre><code>    def delete_logo(self):\n\n        \"\"\"Delete the user uploaded logo from the drone\n\n        *Exceptions*:\n\n        * `requests.exceptions.HTTPError` : If an error occurs during deletion\n\n        * `requests.exceptions.ConnectTimeout` : If unable to create a connection within 1s\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.8.72\")\n\n        response = requests.delete(f\"http://{self._parent_drone._ip}/asset/logo\", timeout=1)\n\n        response.raise_for_status()\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#download_logo","title":"download_logo","text":"<pre><code>def download_logo(\n    self,\n    output_directory='.'\n)\n</code></pre> <p>Download the original user uploaded logo (PNG or JPG)</p> <p>Select the download directory with the output_directory parameter.</p> <p>Exceptions:</p> <ul> <li> <p><code>requests.exceptions.HTTPError</code> : If no custom logo is uploaded.</p> </li> <li> <p><code>requests.exceptions.ConnectTimeout</code> : If unable to create a connection within 1s</p> </li> </ul> View Source <pre><code>    def download_logo(self, output_directory=\".\"):\n\n        \"\"\"Download the original user uploaded logo (PNG or JPG)\n\n        Select the download directory with the output_directory parameter.\n\n        *Exceptions*:\n\n        * `requests.exceptions.HTTPError` : If no custom logo is uploaded.\n\n        * `requests.exceptions.ConnectTimeout` : If unable to create a connection within 1s\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.8.72\")\n\n        response = requests.get(f\"http://{self._parent_drone._ip}/asset/logo\", timeout=1)\n\n        response.raise_for_status()\n\n        filename = re.findall('filename=\"(.+)\"', response.headers[\"Content-Disposition\"])[0]\n\n        with open(f\"{output_directory}/{filename}\", \"wb\") as f:\n\n            f.write(response.content)\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#upload_logo","title":"upload_logo","text":"<pre><code>def upload_logo(\n    self,\n    path_to_logo: 'str'\n)\n</code></pre> <p>Upload user selectable logo for watermarking videos and pictures</p> <p>Set the logo-property to <code>LogoOverlay.CUSTOM</code> to enable this logo.</p> <p>Allowed filetype: JPG or PNG. Max resolution: 2000 px. Max file size: 5 MB.</p> <p>Requires Blunux version 1.8.72 or newer.</p> <p>Exceptions:</p> <ul> <li> <p><code>requests.exceptions.HTTPError</code> : Status code 400 for invalid files</p> </li> <li> <p><code>requests.exceptions.ConnectTimeout</code> : If unable to create a connection within 1s</p> </li> </ul> View Source <pre><code>    def upload_logo(self, path_to_logo: str):\n\n        \"\"\"Upload user selectable logo for watermarking videos and pictures\n\n        Set the logo-property to `LogoOverlay.CUSTOM` to enable this logo.\n\n        Allowed filetype: JPG or PNG.\n\n        Max resolution: 2000 px.\n\n        Max file size: 5 MB.\n\n        Requires Blunux version 1.8.72 or newer.\n\n        *Exceptions*:\n\n        * `requests.exceptions.HTTPError` : Status code 400 for invalid files\n\n        * `requests.exceptions.ConnectTimeout` : If unable to create a connection within 1s\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.8.72\")\n\n        with open(path_to_logo, \"rb\") as f:\n\n            url = f\"http://{self._parent_drone._ip}/asset/logo\"\n\n            files = {\"image\": f}\n\n            response = requests.post(url, files=files, timeout=1)\n\n        response.raise_for_status()\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#temperatureunitoverlay","title":"TemperatureUnitOverlay","text":"<pre><code>class TemperatureUnitOverlay(\n    *args,\n    **kwds\n)\n</code></pre> <p>Create a collection of name/value pairs.</p> <p>Example enumeration:</p> <p>class Color(Enum): ...     RED = 1 ...     BLUE = 2 ...     GREEN = 3</p> <p>Access them by:</p> <ul> <li>attribute access::</li> </ul> <p>Color.RED  <ul> <li>value lookup:</li> </ul> <p>Color(1)  <ul> <li>name lookup:</li> </ul> <p>Color['RED']  <p>Enumerations can be iterated over, and know how many members they have:</p> <p>len(Color) 3</p> <p>list(Color) [, , ] <p>Methods can be added to enumerations, and members can have their own attributes -- see the documentation for details.</p> View Source <pre><code>class TemperatureUnitOverlay(Enum):\n\n    CELSIUS = 0\n\n    FAHRENHEIT = 1\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#ancestors-in-mro_3","title":"Ancestors (in MRO)","text":"<ul> <li>enum.Enum</li> </ul>"},{"location":"reference/blueye/sdk/camera/#class-variables_3","title":"Class variables","text":"<pre><code>CELSIUS\n</code></pre> <pre><code>FAHRENHEIT\n</code></pre> <pre><code>name\n</code></pre> <pre><code>value\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#tilt","title":"Tilt","text":"<pre><code>class Tilt(\n    parent_drone: 'Drone'\n)\n</code></pre> View Source <pre><code>class Tilt:\n\n    @staticmethod\n\n    def _tilt_angle_from_debug_flags(flags: int) -&gt; float:\n\n        \"\"\"Helper function for decoding tilt angle from debug flags\n\n        The tilt angle is encoded as an int8, with 0 at 0 degrees, and each increment representing\n\n        0.5 degrees in either direction. A positive angle is upwards, and negative is downwards.\n\n        \"\"\"\n\n        TILT_ANGLE_MASK = 0x0000FF0000000000\n\n        TILT_ANGLE_OFFSET = 40\n\n        tilt_angle_array = np.array(\n\n            np.right_shift(np.bitwise_and(flags, TILT_ANGLE_MASK), TILT_ANGLE_OFFSET),\n\n            dtype=[(\"tilt_angle\", np.int8)],\n\n        ).astype([(\"tilt_angle\", float)])\n\n        return tilt_angle_array[\"tilt_angle\"] / 2\n\n    @staticmethod\n\n    def _tilt_stabilization_status_from_debug_flags(flags: int) -&gt; bool:\n\n        \"\"\"Helper function for decoding tilt stabilization status from debug flags\"\"\"\n\n        TILT_STABILIZATION_MASK = 0x100\n\n        return bool(flags &amp; TILT_STABILIZATION_MASK)\n\n    def __init__(self, parent_drone: Drone):\n\n        self._parent_drone = parent_drone\n\n    def _verify_tilt_in_features(self):\n\n        \"\"\"Checks that the connected drone has the tilt feature\n\n        Raises a RuntimeError if it does not.\n\n        \"\"\"\n\n        if \"tilt\" not in self._parent_drone.features:\n\n            raise RuntimeError(\"The connected drone does not support tilting the camera.\")\n\n    def set_speed(self, speed: float):\n\n        \"\"\"Set the speed and direction of the camera tilt\n\n        *Arguments*:\n\n        * speed (float): Speed and direction of the tilt. 1 is max speed up, -1 is max speed down.\n\n        Requires a drone with the tilt feature, and software version 1.5 or newer.\n\n        A RuntimeError is raised if either of those requirements are not met.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.5\")\n\n        self._verify_tilt_in_features()\n\n        # The tilt command is grouped together with the thruster commands, so to avoid messing with\n\n        # the thruster setpoint while tilting we need to get the current setpoint and send it with\n\n        # the tilt command.\n\n        with self._parent_drone.motion.thruster_lock:\n\n            thruster_setpoints = self._parent_drone.motion.current_thruster_setpoints.values()\n\n            self._parent_drone._tcp_client.motion_input_tilt(*thruster_setpoints, 0, 0, speed)\n\n    @property\n\n    def angle(self) -&gt; float:\n\n        \"\"\"Return the current angle of the camera tilt\n\n        Requires a drone with the tilt feature, and software version 1.5 or newer.\n\n        A RuntimeError is raised if either of those requirements are not met.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.5\")\n\n        self._verify_tilt_in_features()\n\n        debug_flags = self._parent_drone._state_watcher.general_state[\"debug_flags\"]\n\n        return self._tilt_angle_from_debug_flags(debug_flags)\n\n    @property\n\n    def stabilization_enabled(self) -&gt; bool:\n\n        \"\"\"Get the state of active camera stabilization\n\n        Use the `toggle_stabilization` method to turn stabilization on or off\n\n        *Returns*:\n\n        * Current state of active camera stabilization (bool)\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.6.42\")\n\n        self._verify_tilt_in_features()\n\n        debug_flags = self._parent_drone._state_watcher.general_state[\"debug_flags\"]\n\n        return self._tilt_stabilization_status_from_debug_flags(debug_flags)\n\n    def toggle_stabilization(self):\n\n        \"\"\"Toggle active camera stabilization on or off\n\n        Requires a drone with the tilt feature, and Blunux version 1.6.42 or newer.\n\n        A RuntimeError is raised if either of those requirements are not met.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.6.42\")\n\n        self._verify_tilt_in_features()\n\n        self._parent_drone._tcp_client.toggle_tilt_stabilization()\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#instance-variables_2","title":"Instance variables","text":"<pre><code>angle\n</code></pre> <p>Return the current angle of the camera tilt</p> <p>Requires a drone with the tilt feature, and software version 1.5 or newer. A RuntimeError is raised if either of those requirements are not met.</p> <pre><code>stabilization_enabled\n</code></pre> <p>Get the state of active camera stabilization</p> <p>Use the <code>toggle_stabilization</code> method to turn stabilization on or off</p> <p>Returns:</p> <ul> <li>Current state of active camera stabilization (bool)</li> </ul>"},{"location":"reference/blueye/sdk/camera/#methods_2","title":"Methods","text":""},{"location":"reference/blueye/sdk/camera/#set_speed","title":"set_speed","text":"<pre><code>def set_speed(\n    self,\n    speed: 'float'\n)\n</code></pre> <p>Set the speed and direction of the camera tilt</p> <p>Arguments:</p> <ul> <li>speed (float): Speed and direction of the tilt. 1 is max speed up, -1 is max speed down.</li> </ul> <p>Requires a drone with the tilt feature, and software version 1.5 or newer. A RuntimeError is raised if either of those requirements are not met.</p> View Source <pre><code>    def set_speed(self, speed: float):\n\n        \"\"\"Set the speed and direction of the camera tilt\n\n        *Arguments*:\n\n        * speed (float): Speed and direction of the tilt. 1 is max speed up, -1 is max speed down.\n\n        Requires a drone with the tilt feature, and software version 1.5 or newer.\n\n        A RuntimeError is raised if either of those requirements are not met.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.5\")\n\n        self._verify_tilt_in_features()\n\n        # The tilt command is grouped together with the thruster commands, so to avoid messing with\n\n        # the thruster setpoint while tilting we need to get the current setpoint and send it with\n\n        # the tilt command.\n\n        with self._parent_drone.motion.thruster_lock:\n\n            thruster_setpoints = self._parent_drone.motion.current_thruster_setpoints.values()\n\n            self._parent_drone._tcp_client.motion_input_tilt(*thruster_setpoints, 0, 0, speed)\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#toggle_stabilization","title":"toggle_stabilization","text":"<pre><code>def toggle_stabilization(\n    self\n)\n</code></pre> <p>Toggle active camera stabilization on or off</p> <p>Requires a drone with the tilt feature, and Blunux version 1.6.42 or newer. A RuntimeError is raised if either of those requirements are not met.</p> View Source <pre><code>    def toggle_stabilization(self):\n\n        \"\"\"Toggle active camera stabilization on or off\n\n        Requires a drone with the tilt feature, and Blunux version 1.6.42 or newer.\n\n        A RuntimeError is raised if either of those requirements are not met.\n\n        \"\"\"\n\n        self._parent_drone._verify_required_blunux_version(\"1.6.42\")\n\n        self._verify_tilt_in_features()\n\n        self._parent_drone._tcp_client.toggle_tilt_stabilization()\n</code></pre>"},{"location":"reference/blueye/sdk/constants/","title":"Module blueye.sdk.constants","text":"<p>This file contains constants used by the SDK.</p> View Source <pre><code>\"\"\"\n\nThis file contains constants used by the SDK.\n\n\"\"\"\n\nclass WaterDensities:\n\n    \"\"\"\n\n    Various typical densities for salt water (in grams/liter)\n\n    \"\"\"\n\n    fresh = 997\n\n    brackish = 1011\n\n    salty = 1025\n</code></pre>"},{"location":"reference/blueye/sdk/constants/#classes","title":"Classes","text":""},{"location":"reference/blueye/sdk/constants/#waterdensities","title":"WaterDensities","text":"<pre><code>class WaterDensities(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Various typical densities for salt water (in grams/liter)</p> View Source <pre><code>class WaterDensities:\n\n    \"\"\"\n\n    Various typical densities for salt water (in grams/liter)\n\n    \"\"\"\n\n    fresh = 997\n\n    brackish = 1011\n\n    salty = 1025\n</code></pre>"},{"location":"reference/blueye/sdk/constants/#class-variables","title":"Class variables","text":"<pre><code>brackish\n</code></pre> <pre><code>fresh\n</code></pre> <pre><code>salty\n</code></pre>"},{"location":"reference/blueye/sdk/drone/","title":"Module blueye.sdk.drone","text":"View Source <pre><code>#!/usr/bin/env python3\n\nimport socket\n\nimport threading\n\nimport time\n\nimport warnings\n\nfrom json import JSONDecodeError\n\nimport requests\n\nfrom blueye.protocol import TcpClient, UdpClient\n\nfrom blueye.protocol.exceptions import (\n\n    MismatchedReply,\n\n    NoConnectionToDrone,\n\n    ResponseTimeout,\n\n)\n\nfrom packaging import version\n\nfrom .camera import Camera\n\nfrom .constants import WaterDensities\n\nfrom .logs import Logs\n\nfrom .motion import Motion\n\nclass _DroneStateWatcher(threading.Thread):\n\n    \"\"\"Subscribes to UDP messages from the drone and stores the latest data\"\"\"\n\n    def __init__(self, ip: str = \"192.168.1.101\", udp_timeout: float = 3):\n\n        threading.Thread.__init__(self)\n\n        self._ip = ip\n\n        self._udp_timeout = udp_timeout\n\n        self._general_state = None\n\n        self._general_state_received = threading.Event()\n\n        self._calibration_state = None\n\n        self._calibration_state_received = threading.Event()\n\n        self._udp_client = UdpClient(drone_ip=self._ip)\n\n        self._exit_flag = threading.Event()\n\n        self.daemon = True\n\n    @property\n\n    def general_state(self) -&gt; dict:\n\n        if not self._general_state_received.wait(timeout=self._udp_timeout):\n\n            raise TimeoutError(\"No state message received from drone\")\n\n        return self._general_state\n\n    @property\n\n    def calibration_state(self) -&gt; dict:\n\n        if not self._calibration_state_received.wait(timeout=self._udp_timeout):\n\n            raise TimeoutError(\"No state message received from drone\")\n\n        return self._calibration_state\n\n    def run(self):\n\n        while not self._exit_flag.is_set():\n\n            data_packet = self._udp_client.get_data_dict()\n\n            if data_packet[\"command_type\"] == 1:\n\n                self._general_state = data_packet\n\n                self._general_state_received.set()\n\n            elif data_packet[\"command_type\"] == 2:\n\n                self._calibration_state = data_packet\n\n                self._calibration_state_received.set()\n\n    def stop(self):\n\n        self._exit_flag.set()\n\nclass SlaveModeWarning(UserWarning):\n\n    \"\"\"Raised when trying to perform action not possible in slave mode\"\"\"\n\nclass _SlaveTcpClient:\n\n    \"\"\"A dummy TCP client that warns you if you use any of its functions\"\"\"\n\n    def __getattr__(self, name):\n\n        def method(*args):\n\n            warnings.warn(\n\n                f\"Unable to call {name}{args} with client in slave mode\",\n\n                SlaveModeWarning,\n\n                stacklevel=2,\n\n            )\n\n        return method\n\nclass _NoConnectionTcpClient:\n\n    \"\"\"A TCP client that raises a ConnectionError if you use any of its functions\"\"\"\n\n    def __getattr__(self, name):\n\n        def method(*args, **kwargs):\n\n            raise ConnectionError(\n\n                \"The connection to the drone is not established, \"\n\n                \"try calling the connect method before retrying\"\n\n            )\n\n        return method\n\nclass Config:\n\n    def __init__(self, parent_drone: \"Drone\"):\n\n        self._parent_drone = parent_drone\n\n        self._water_density = WaterDensities.salty\n\n    @property\n\n    def water_density(self):\n\n        \"\"\"Get or set the current water density for increased pressure sensor accuracy\n\n        Setting the water density is only supported on drones with software version 1.5 or higher.\n\n        Older software versions will assume a water density of 1025 grams per liter.\n\n        The WaterDensities class contains typical densities for salty-, brackish-, and fresh water\n\n        (these are the same values that the Blueye app uses).\n\n        \"\"\"\n\n        return self._water_density\n\n    @water_density.setter\n\n    def water_density(self, density: int):\n\n        self._parent_drone._verify_required_blunux_version(\"1.5\")\n\n        self._water_density = density\n\n        self._parent_drone._tcp_client.set_water_density(density)\n\n    def set_drone_time(self, time: int):\n\n        \"\"\"Set the system for the drone\n\n        This method is used to set the system time for the drone. The argument `time` is expected to\n\n        be a Unix timestamp (ie. the number of seconds since the epoch).\n\n        \"\"\"\n\n        self._parent_drone._tcp_client.set_system_time(time)\n\nclass Drone:\n\n    \"\"\"A class providing an interface to a Blueye drone's functions\n\n    Automatically connects to the drone using the default ip and port when instantiated, this\n\n    behaviour can be disabled by setting `autoConnect=False`.\n\n    The drone only supports one client controlling it at a time, but if you pass\n\n    `slaveModeEnabled=True` you will still be able to receive data from the drone.\n\n    \"\"\"\n\n    def __init__(\n\n        self,\n\n        ip=\"192.168.1.101\",\n\n        tcpPort=2011,\n\n        autoConnect=True,\n\n        slaveModeEnabled=False,\n\n        udpTimeout=3,\n\n    ):\n\n        self._ip = ip\n\n        self._port = tcpPort\n\n        self._slave_mode_enabled = slaveModeEnabled\n\n        if slaveModeEnabled:\n\n            self._tcp_client = _SlaveTcpClient()\n\n        else:\n\n            self._tcp_client = _NoConnectionTcpClient()\n\n        self._state_watcher = _DroneStateWatcher(ip=self._ip, udp_timeout=udpTimeout)\n\n        self.camera = Camera(self)\n\n        self.motion = Motion(self)\n\n        self.logs = Logs(self)\n\n        self.config = Config(self)\n\n        if autoConnect is True:\n\n            self.connect(timeout=3)\n\n    def _verify_required_blunux_version(self, requirement: str):\n\n        \"\"\"Verify that Blunux version is higher than requirement\n\n        requirement needs to be a string that's able to be parsed by version.parse()\n\n        Raises a RuntimeError if the Blunux version of the connected drone does not match or exceed\n\n        the requirement.\n\n        \"\"\"\n\n        if not self.connection_established:\n\n            raise ConnectionError(\n\n                \"The connection to the drone is not established, try calling the connect method \"\n\n                \"before retrying\"\n\n            )\n\n        if version.parse(self.software_version_short) &lt; version.parse(requirement):\n\n            raise RuntimeError(\n\n                f\"Blunux version of connected drone is {self.software_version_short}. Version \"\n\n                f\"{requirement} or higher is required.\"\n\n            )\n\n    @property\n\n    def connection_established(self):\n\n        if isinstance(self._tcp_client, _NoConnectionTcpClient):\n\n            return False\n\n        else:\n\n            return True\n\n    def _update_drone_info(self):\n\n        \"\"\"Request and store information about the connected drone\"\"\"\n\n        try:\n\n            response = requests.get(f\"http://{self._ip}/diagnostics/drone_info\", timeout=3).json()\n\n        except (\n\n            requests.ConnectTimeout,\n\n            requests.ReadTimeout,\n\n            requests.ConnectionError,\n\n            JSONDecodeError,\n\n        ):\n\n            raise ConnectionError(\"Could not establish connection with drone\")\n\n        try:\n\n            self.features = list(filter(None, response[\"features\"].split(\",\")))\n\n        except KeyError:\n\n            # Drone versions older than 1.4.7 did not have this field.\n\n            self.features = []\n\n        self.software_version = response[\"sw_version\"]\n\n        self.software_version_short = self.software_version.split(\"-\")[0]\n\n        self.serial_number = response[\"serial_number\"]\n\n        self.uuid = response[\"hardware_id\"]\n\n    @staticmethod\n\n    def _wait_for_udp_communication(timeout: float, ip: str = \"192.168.1.101\"):\n\n        \"\"\"Simple helper for waiting for drone to come online\n\n        Raises ConnectionError if no connection is established in the specified timeout.\n\n        \"\"\"\n\n        temp_udp_client = UdpClient(drone_ip=ip)\n\n        temp_udp_client._sock.settimeout(timeout)\n\n        try:\n\n            temp_udp_client.get_data_dict()\n\n        except socket.timeout as e:\n\n            raise ConnectionError(\"Could not establish connection with drone\") from e\n\n    def _connect_to_tcp_socket(self):\n\n        try:\n\n            self._tcp_client.connect()\n\n        except NoConnectionToDrone:\n\n            raise ConnectionError(\"Could not establish connection with drone\")\n\n    def _start_watchdog(self):\n\n        \"\"\"Starts the thread for petting the watchdog\n\n        _connect_to_tcp_socket() must be called first\"\"\"\n\n        try:\n\n            self._tcp_client.start()\n\n        except RuntimeError:\n\n            # Ignore multiple starts\n\n            pass\n\n    def _clean_up_tcp_client(self):\n\n        \"\"\"Stops the watchdog thread and closes the TCP socket\"\"\"\n\n        self._tcp_client.stop()\n\n        self._tcp_client._sock.close()\n\n        self._tcp_client = _NoConnectionTcpClient()\n\n    def _start_state_watcher_thread(self):\n\n        try:\n\n            self._state_watcher.start()\n\n        except RuntimeError:\n\n            # Ignore multiple starts\n\n            pass\n\n    def _create_temporary_tcp_client(self):\n\n        temp_tcp_client = TcpClient()\n\n        temp_tcp_client.connect()\n\n        temp_tcp_client.stop()\n\n        temp_tcp_client._sock.close()\n\n    def connect(self, timeout: float = None):\n\n        \"\"\"Start receiving telemetry info from the drone, and publishing watchdog messages\n\n        When watchdog message are published the thrusters are armed, to stop the drone from moving\n\n        unexpectedly when connecting all thruster set points are set to zero when connecting.\n\n        - *timeout* (float): Seconds to wait for connection\n\n        \"\"\"\n\n        self._update_drone_info()\n\n        if version.parse(self.software_version_short) &gt;= version.parse(\"3.0\"):\n\n            # Blunux 3.0 requires a TCP message before enabling UDP communication\n\n            self._create_temporary_tcp_client()\n\n        self._wait_for_udp_communication(timeout, self._ip)\n\n        self._start_state_watcher_thread()\n\n        if self._slave_mode_enabled:\n\n            # No need to touch the TCP stuff if we're in slave mode so we return early\n\n            return\n\n        if not self.connection_established:\n\n            self._tcp_client = TcpClient(ip=self._ip, port=self._port, autoConnect=False)\n\n            self._connect_to_tcp_socket()\n\n        try:\n\n            # The drone runs from a read-only filesystem, and as such does not keep any state,\n\n            # therefore when we connect to it we should send the current time\n\n            self.config.set_drone_time(int(time.time()))\n\n            self.ping()\n\n            self.motion.send_thruster_setpoint(0, 0, 0, 0)\n\n            self._start_watchdog()\n\n        except ResponseTimeout as e:\n\n            self._clean_up_tcp_client()\n\n            raise ConnectionError(\n\n                f\"Found drone at {self._ip} but was unable to take control of it. \"\n\n                \"Is there another client connected?\"\n\n            ) from e\n\n        except MismatchedReply:\n\n            # The connection is out of sync, likely due to a previous connection being\n\n            # disconnected mid-transfer. Re-instantiating the connection should solve the issue\n\n            self._clean_up_tcp_client()\n\n            self.connect(timeout)\n\n        except BrokenPipeError:\n\n            # Have lost connection to drone, need to reestablish TCP client\n\n            self._clean_up_tcp_client()\n\n            self.connect(timeout)\n\n    def disconnect(self):\n\n        \"\"\"Disconnects the TCP connection, allowing another client to take control of the drone\"\"\"\n\n        if self.connection_established and not self._slave_mode_enabled:\n\n            self._clean_up_tcp_client()\n\n    @property\n\n    def lights(self) -&gt; int:\n\n        \"\"\"Get or set the brightness of the bottom canister lights\n\n        *Arguments*:\n\n        * brightness (int): Set the brightness of the bottom canister LED's in the range &lt;0, 255&gt;\n\n        *Returns*:\n\n        * brightness (int): The brightness of the bottom canister LED's in the range &lt;0, 255&gt;\n\n        \"\"\"\n\n        state = self._state_watcher.general_state\n\n        return state[\"lights_upper\"]\n\n    @lights.setter\n\n    def lights(self, brightness: int):\n\n        try:\n\n            self._tcp_client.set_lights(brightness, 0)\n\n        except ValueError as e:\n\n            raise ValueError(\"Error occured while trying to set lights to: \" f\"{brightness}\") from e\n\n    @property\n\n    def depth(self) -&gt; int:\n\n        \"\"\"Get the current depth in millimeters\n\n        *Returns*:\n\n        * depth (int): The depth in millimeters of water column.\n\n        \"\"\"\n\n        return self._state_watcher.general_state[\"depth\"]\n\n    @property\n\n    def pose(self) -&gt; dict:\n\n        \"\"\"Get the current orientation of the drone\n\n        *Returns*:\n\n        * pose (dict): Dictionary with roll, pitch, and yaw in degrees, from 0 to 359.\n\n        \"\"\"\n\n        pose = {\n\n            \"roll\": (self._state_watcher.general_state[\"roll\"] + 360) % 360,\n\n            \"pitch\": (self._state_watcher.general_state[\"pitch\"] + 360) % 360,\n\n            \"yaw\": (self._state_watcher.general_state[\"yaw\"] + 360) % 360,\n\n        }\n\n        return pose\n\n    @property\n\n    def battery_state_of_charge(self) -&gt; int:\n\n        \"\"\"Get the battery state of charge\n\n        *Returns*:\n\n        * state_of_charge (int): Current state of charge of the drone battery in percent, from 0 to 100\n\n        \"\"\"\n\n        return self._state_watcher.general_state[\"battery_state_of_charge_rel\"]\n\n    @property\n\n    def error_flags(self) -&gt; int:\n\n        \"\"\"Get the error flags\n\n        *Returns*:\n\n        * error_flags (int): The error flags as int\n\n        \"\"\"\n\n        return self._state_watcher.general_state[\"error_flags\"]\n\n    @property\n\n    def active_video_streams(self) -&gt; int:\n\n        \"\"\"Get the number of currently active connections to the video stream\n\n        Every client connected to the RTSP stream (does not matter if it's directly from GStreamer,\n\n        or from the Blueye app) counts as one connection.\n\n        Requires Blunux version 1.5.33 or newer.\n\n        \"\"\"\n\n        self._verify_required_blunux_version(\"1.5.33\")\n\n        SPECTATORS_MASK = 0x000000FF00000000\n\n        SPECTATORS_OFFSET = 32\n\n        debug_flags = self._state_watcher._general_state[\"debug_flags\"]\n\n        return (debug_flags &amp; SPECTATORS_MASK) &gt;&gt; SPECTATORS_OFFSET\n\n    def ping(self):\n\n        \"\"\"Ping drone, an exception is thrown by TcpClient if drone does not answer\"\"\"\n\n        self._tcp_client.ping()\n</code></pre>"},{"location":"reference/blueye/sdk/drone/#classes","title":"Classes","text":""},{"location":"reference/blueye/sdk/drone/#config","title":"Config","text":"<pre><code>class Config(\n    parent_drone: 'Drone'\n)\n</code></pre> View Source <pre><code>class Config:\n\n    def __init__(self, parent_drone: \"Drone\"):\n\n        self._parent_drone = parent_drone\n\n        self._water_density = WaterDensities.salty\n\n    @property\n\n    def water_density(self):\n\n        \"\"\"Get or set the current water density for increased pressure sensor accuracy\n\n        Setting the water density is only supported on drones with software version 1.5 or higher.\n\n        Older software versions will assume a water density of 1025 grams per liter.\n\n        The WaterDensities class contains typical densities for salty-, brackish-, and fresh water\n\n        (these are the same values that the Blueye app uses).\n\n        \"\"\"\n\n        return self._water_density\n\n    @water_density.setter\n\n    def water_density(self, density: int):\n\n        self._parent_drone._verify_required_blunux_version(\"1.5\")\n\n        self._water_density = density\n\n        self._parent_drone._tcp_client.set_water_density(density)\n\n    def set_drone_time(self, time: int):\n\n        \"\"\"Set the system for the drone\n\n        This method is used to set the system time for the drone. The argument `time` is expected to\n\n        be a Unix timestamp (ie. the number of seconds since the epoch).\n\n        \"\"\"\n\n        self._parent_drone._tcp_client.set_system_time(time)\n</code></pre>"},{"location":"reference/blueye/sdk/drone/#instance-variables","title":"Instance variables","text":"<pre><code>water_density\n</code></pre> <p>Get or set the current water density for increased pressure sensor accuracy</p> <p>Setting the water density is only supported on drones with software version 1.5 or higher. Older software versions will assume a water density of 1025 grams per liter.</p> <p>The WaterDensities class contains typical densities for salty-, brackish-, and fresh water (these are the same values that the Blueye app uses).</p>"},{"location":"reference/blueye/sdk/drone/#methods","title":"Methods","text":""},{"location":"reference/blueye/sdk/drone/#set_drone_time","title":"set_drone_time","text":"<pre><code>def set_drone_time(\n    self,\n    time: int\n)\n</code></pre> <p>Set the system for the drone</p> <p>This method is used to set the system time for the drone. The argument <code>time</code> is expected to be a Unix timestamp (ie. the number of seconds since the epoch).</p> View Source <pre><code>    def set_drone_time(self, time: int):\n\n        \"\"\"Set the system for the drone\n\n        This method is used to set the system time for the drone. The argument `time` is expected to\n\n        be a Unix timestamp (ie. the number of seconds since the epoch).\n\n        \"\"\"\n\n        self._parent_drone._tcp_client.set_system_time(time)\n</code></pre>"},{"location":"reference/blueye/sdk/drone/#drone","title":"Drone","text":"<pre><code>class Drone(\n    ip='192.168.1.101',\n    tcpPort=2011,\n    autoConnect=True,\n    slaveModeEnabled=False,\n    udpTimeout=3\n)\n</code></pre> <p>A class providing an interface to a Blueye drone's functions</p> <p>Automatically connects to the drone using the default ip and port when instantiated, this behaviour can be disabled by setting <code>autoConnect=False</code>.</p> <p>The drone only supports one client controlling it at a time, but if you pass <code>slaveModeEnabled=True</code> you will still be able to receive data from the drone.</p> View Source <pre><code>class Drone:\n\n    \"\"\"A class providing an interface to a Blueye drone's functions\n\n    Automatically connects to the drone using the default ip and port when instantiated, this\n\n    behaviour can be disabled by setting `autoConnect=False`.\n\n    The drone only supports one client controlling it at a time, but if you pass\n\n    `slaveModeEnabled=True` you will still be able to receive data from the drone.\n\n    \"\"\"\n\n    def __init__(\n\n        self,\n\n        ip=\"192.168.1.101\",\n\n        tcpPort=2011,\n\n        autoConnect=True,\n\n        slaveModeEnabled=False,\n\n        udpTimeout=3,\n\n    ):\n\n        self._ip = ip\n\n        self._port = tcpPort\n\n        self._slave_mode_enabled = slaveModeEnabled\n\n        if slaveModeEnabled:\n\n            self._tcp_client = _SlaveTcpClient()\n\n        else:\n\n            self._tcp_client = _NoConnectionTcpClient()\n\n        self._state_watcher = _DroneStateWatcher(ip=self._ip, udp_timeout=udpTimeout)\n\n        self.camera = Camera(self)\n\n        self.motion = Motion(self)\n\n        self.logs = Logs(self)\n\n        self.config = Config(self)\n\n        if autoConnect is True:\n\n            self.connect(timeout=3)\n\n    def _verify_required_blunux_version(self, requirement: str):\n\n        \"\"\"Verify that Blunux version is higher than requirement\n\n        requirement needs to be a string that's able to be parsed by version.parse()\n\n        Raises a RuntimeError if the Blunux version of the connected drone does not match or exceed\n\n        the requirement.\n\n        \"\"\"\n\n        if not self.connection_established:\n\n            raise ConnectionError(\n\n                \"The connection to the drone is not established, try calling the connect method \"\n\n                \"before retrying\"\n\n            )\n\n        if version.parse(self.software_version_short) &lt; version.parse(requirement):\n\n            raise RuntimeError(\n\n                f\"Blunux version of connected drone is {self.software_version_short}. Version \"\n\n                f\"{requirement} or higher is required.\"\n\n            )\n\n    @property\n\n    def connection_established(self):\n\n        if isinstance(self._tcp_client, _NoConnectionTcpClient):\n\n            return False\n\n        else:\n\n            return True\n\n    def _update_drone_info(self):\n\n        \"\"\"Request and store information about the connected drone\"\"\"\n\n        try:\n\n            response = requests.get(f\"http://{self._ip}/diagnostics/drone_info\", timeout=3).json()\n\n        except (\n\n            requests.ConnectTimeout,\n\n            requests.ReadTimeout,\n\n            requests.ConnectionError,\n\n            JSONDecodeError,\n\n        ):\n\n            raise ConnectionError(\"Could not establish connection with drone\")\n\n        try:\n\n            self.features = list(filter(None, response[\"features\"].split(\",\")))\n\n        except KeyError:\n\n            # Drone versions older than 1.4.7 did not have this field.\n\n            self.features = []\n\n        self.software_version = response[\"sw_version\"]\n\n        self.software_version_short = self.software_version.split(\"-\")[0]\n\n        self.serial_number = response[\"serial_number\"]\n\n        self.uuid = response[\"hardware_id\"]\n\n    @staticmethod\n\n    def _wait_for_udp_communication(timeout: float, ip: str = \"192.168.1.101\"):\n\n        \"\"\"Simple helper for waiting for drone to come online\n\n        Raises ConnectionError if no connection is established in the specified timeout.\n\n        \"\"\"\n\n        temp_udp_client = UdpClient(drone_ip=ip)\n\n        temp_udp_client._sock.settimeout(timeout)\n\n        try:\n\n            temp_udp_client.get_data_dict()\n\n        except socket.timeout as e:\n\n            raise ConnectionError(\"Could not establish connection with drone\") from e\n\n    def _connect_to_tcp_socket(self):\n\n        try:\n\n            self._tcp_client.connect()\n\n        except NoConnectionToDrone:\n\n            raise ConnectionError(\"Could not establish connection with drone\")\n\n    def _start_watchdog(self):\n\n        \"\"\"Starts the thread for petting the watchdog\n\n        _connect_to_tcp_socket() must be called first\"\"\"\n\n        try:\n\n            self._tcp_client.start()\n\n        except RuntimeError:\n\n            # Ignore multiple starts\n\n            pass\n\n    def _clean_up_tcp_client(self):\n\n        \"\"\"Stops the watchdog thread and closes the TCP socket\"\"\"\n\n        self._tcp_client.stop()\n\n        self._tcp_client._sock.close()\n\n        self._tcp_client = _NoConnectionTcpClient()\n\n    def _start_state_watcher_thread(self):\n\n        try:\n\n            self._state_watcher.start()\n\n        except RuntimeError:\n\n            # Ignore multiple starts\n\n            pass\n\n    def _create_temporary_tcp_client(self):\n\n        temp_tcp_client = TcpClient()\n\n        temp_tcp_client.connect()\n\n        temp_tcp_client.stop()\n\n        temp_tcp_client._sock.close()\n\n    def connect(self, timeout: float = None):\n\n        \"\"\"Start receiving telemetry info from the drone, and publishing watchdog messages\n\n        When watchdog message are published the thrusters are armed, to stop the drone from moving\n\n        unexpectedly when connecting all thruster set points are set to zero when connecting.\n\n        - *timeout* (float): Seconds to wait for connection\n\n        \"\"\"\n\n        self._update_drone_info()\n\n        if version.parse(self.software_version_short) &gt;= version.parse(\"3.0\"):\n\n            # Blunux 3.0 requires a TCP message before enabling UDP communication\n\n            self._create_temporary_tcp_client()\n\n        self._wait_for_udp_communication(timeout, self._ip)\n\n        self._start_state_watcher_thread()\n\n        if self._slave_mode_enabled:\n\n            # No need to touch the TCP stuff if we're in slave mode so we return early\n\n            return\n\n        if not self.connection_established:\n\n            self._tcp_client = TcpClient(ip=self._ip, port=self._port, autoConnect=False)\n\n            self._connect_to_tcp_socket()\n\n        try:\n\n            # The drone runs from a read-only filesystem, and as such does not keep any state,\n\n            # therefore when we connect to it we should send the current time\n\n            self.config.set_drone_time(int(time.time()))\n\n            self.ping()\n\n            self.motion.send_thruster_setpoint(0, 0, 0, 0)\n\n            self._start_watchdog()\n\n        except ResponseTimeout as e:\n\n            self._clean_up_tcp_client()\n\n            raise ConnectionError(\n\n                f\"Found drone at {self._ip} but was unable to take control of it. \"\n\n                \"Is there another client connected?\"\n\n            ) from e\n\n        except MismatchedReply:\n\n            # The connection is out of sync, likely due to a previous connection being\n\n            # disconnected mid-transfer. Re-instantiating the connection should solve the issue\n\n            self._clean_up_tcp_client()\n\n            self.connect(timeout)\n\n        except BrokenPipeError:\n\n            # Have lost connection to drone, need to reestablish TCP client\n\n            self._clean_up_tcp_client()\n\n            self.connect(timeout)\n\n    def disconnect(self):\n\n        \"\"\"Disconnects the TCP connection, allowing another client to take control of the drone\"\"\"\n\n        if self.connection_established and not self._slave_mode_enabled:\n\n            self._clean_up_tcp_client()\n\n    @property\n\n    def lights(self) -&gt; int:\n\n        \"\"\"Get or set the brightness of the bottom canister lights\n\n        *Arguments*:\n\n        * brightness (int): Set the brightness of the bottom canister LED's in the range &lt;0, 255&gt;\n\n        *Returns*:\n\n        * brightness (int): The brightness of the bottom canister LED's in the range &lt;0, 255&gt;\n\n        \"\"\"\n\n        state = self._state_watcher.general_state\n\n        return state[\"lights_upper\"]\n\n    @lights.setter\n\n    def lights(self, brightness: int):\n\n        try:\n\n            self._tcp_client.set_lights(brightness, 0)\n\n        except ValueError as e:\n\n            raise ValueError(\"Error occured while trying to set lights to: \" f\"{brightness}\") from e\n\n    @property\n\n    def depth(self) -&gt; int:\n\n        \"\"\"Get the current depth in millimeters\n\n        *Returns*:\n\n        * depth (int): The depth in millimeters of water column.\n\n        \"\"\"\n\n        return self._state_watcher.general_state[\"depth\"]\n\n    @property\n\n    def pose(self) -&gt; dict:\n\n        \"\"\"Get the current orientation of the drone\n\n        *Returns*:\n\n        * pose (dict): Dictionary with roll, pitch, and yaw in degrees, from 0 to 359.\n\n        \"\"\"\n\n        pose = {\n\n            \"roll\": (self._state_watcher.general_state[\"roll\"] + 360) % 360,\n\n            \"pitch\": (self._state_watcher.general_state[\"pitch\"] + 360) % 360,\n\n            \"yaw\": (self._state_watcher.general_state[\"yaw\"] + 360) % 360,\n\n        }\n\n        return pose\n\n    @property\n\n    def battery_state_of_charge(self) -&gt; int:\n\n        \"\"\"Get the battery state of charge\n\n        *Returns*:\n\n        * state_of_charge (int): Current state of charge of the drone battery in percent, from 0 to 100\n\n        \"\"\"\n\n        return self._state_watcher.general_state[\"battery_state_of_charge_rel\"]\n\n    @property\n\n    def error_flags(self) -&gt; int:\n\n        \"\"\"Get the error flags\n\n        *Returns*:\n\n        * error_flags (int): The error flags as int\n\n        \"\"\"\n\n        return self._state_watcher.general_state[\"error_flags\"]\n\n    @property\n\n    def active_video_streams(self) -&gt; int:\n\n        \"\"\"Get the number of currently active connections to the video stream\n\n        Every client connected to the RTSP stream (does not matter if it's directly from GStreamer,\n\n        or from the Blueye app) counts as one connection.\n\n        Requires Blunux version 1.5.33 or newer.\n\n        \"\"\"\n\n        self._verify_required_blunux_version(\"1.5.33\")\n\n        SPECTATORS_MASK = 0x000000FF00000000\n\n        SPECTATORS_OFFSET = 32\n\n        debug_flags = self._state_watcher._general_state[\"debug_flags\"]\n\n        return (debug_flags &amp; SPECTATORS_MASK) &gt;&gt; SPECTATORS_OFFSET\n\n    def ping(self):\n\n        \"\"\"Ping drone, an exception is thrown by TcpClient if drone does not answer\"\"\"\n\n        self._tcp_client.ping()\n</code></pre>"},{"location":"reference/blueye/sdk/drone/#instance-variables_1","title":"Instance variables","text":"<pre><code>active_video_streams\n</code></pre> <p>Get the number of currently active connections to the video stream</p> <p>Every client connected to the RTSP stream (does not matter if it's directly from GStreamer, or from the Blueye app) counts as one connection.</p> <p>Requires Blunux version 1.5.33 or newer.</p> <pre><code>battery_state_of_charge\n</code></pre> <p>Get the battery state of charge</p> <p>Returns:</p> <ul> <li>state_of_charge (int): Current state of charge of the drone battery in percent, from 0 to 100</li> </ul> <pre><code>connection_established\n</code></pre> <pre><code>depth\n</code></pre> <p>Get the current depth in millimeters</p> <p>Returns:</p> <ul> <li>depth (int): The depth in millimeters of water column.</li> </ul> <pre><code>error_flags\n</code></pre> <p>Get the error flags</p> <p>Returns:</p> <ul> <li>error_flags (int): The error flags as int</li> </ul> <pre><code>lights\n</code></pre> <p>Get or set the brightness of the bottom canister lights</p> <p>Arguments:</p> <ul> <li>brightness (int): Set the brightness of the bottom canister LED's in the range &lt;0, 255&gt;</li> </ul> <p>Returns:</p> <ul> <li>brightness (int): The brightness of the bottom canister LED's in the range &lt;0, 255&gt;</li> </ul> <pre><code>pose\n</code></pre> <p>Get the current orientation of the drone</p> <p>Returns:</p> <ul> <li>pose (dict): Dictionary with roll, pitch, and yaw in degrees, from 0 to 359.</li> </ul>"},{"location":"reference/blueye/sdk/drone/#methods_1","title":"Methods","text":""},{"location":"reference/blueye/sdk/drone/#connect","title":"connect","text":"<pre><code>def connect(\n    self,\n    timeout: float = None\n)\n</code></pre> <p>Start receiving telemetry info from the drone, and publishing watchdog messages</p> <p>When watchdog message are published the thrusters are armed, to stop the drone from moving unexpectedly when connecting all thruster set points are set to zero when connecting.</p> <ul> <li>timeout (float): Seconds to wait for connection</li> </ul> View Source <pre><code>    def connect(self, timeout: float = None):\n\n        \"\"\"Start receiving telemetry info from the drone, and publishing watchdog messages\n\n        When watchdog message are published the thrusters are armed, to stop the drone from moving\n\n        unexpectedly when connecting all thruster set points are set to zero when connecting.\n\n        - *timeout* (float): Seconds to wait for connection\n\n        \"\"\"\n\n        self._update_drone_info()\n\n        if version.parse(self.software_version_short) &gt;= version.parse(\"3.0\"):\n\n            # Blunux 3.0 requires a TCP message before enabling UDP communication\n\n            self._create_temporary_tcp_client()\n\n        self._wait_for_udp_communication(timeout, self._ip)\n\n        self._start_state_watcher_thread()\n\n        if self._slave_mode_enabled:\n\n            # No need to touch the TCP stuff if we're in slave mode so we return early\n\n            return\n\n        if not self.connection_established:\n\n            self._tcp_client = TcpClient(ip=self._ip, port=self._port, autoConnect=False)\n\n            self._connect_to_tcp_socket()\n\n        try:\n\n            # The drone runs from a read-only filesystem, and as such does not keep any state,\n\n            # therefore when we connect to it we should send the current time\n\n            self.config.set_drone_time(int(time.time()))\n\n            self.ping()\n\n            self.motion.send_thruster_setpoint(0, 0, 0, 0)\n\n            self._start_watchdog()\n\n        except ResponseTimeout as e:\n\n            self._clean_up_tcp_client()\n\n            raise ConnectionError(\n\n                f\"Found drone at {self._ip} but was unable to take control of it. \"\n\n                \"Is there another client connected?\"\n\n            ) from e\n\n        except MismatchedReply:\n\n            # The connection is out of sync, likely due to a previous connection being\n\n            # disconnected mid-transfer. Re-instantiating the connection should solve the issue\n\n            self._clean_up_tcp_client()\n\n            self.connect(timeout)\n\n        except BrokenPipeError:\n\n            # Have lost connection to drone, need to reestablish TCP client\n\n            self._clean_up_tcp_client()\n\n            self.connect(timeout)\n</code></pre>"},{"location":"reference/blueye/sdk/drone/#disconnect","title":"disconnect","text":"<pre><code>def disconnect(\n    self\n)\n</code></pre> <p>Disconnects the TCP connection, allowing another client to take control of the drone</p> View Source <pre><code>    def disconnect(self):\n\n        \"\"\"Disconnects the TCP connection, allowing another client to take control of the drone\"\"\"\n\n        if self.connection_established and not self._slave_mode_enabled:\n\n            self._clean_up_tcp_client()\n</code></pre>"},{"location":"reference/blueye/sdk/drone/#ping","title":"ping","text":"<pre><code>def ping(\n    self\n)\n</code></pre> <p>Ping drone, an exception is thrown by TcpClient if drone does not answer</p> View Source <pre><code>    def ping(self):\n\n        \"\"\"Ping drone, an exception is thrown by TcpClient if drone does not answer\"\"\"\n\n        self._tcp_client.ping()\n</code></pre>"},{"location":"reference/blueye/sdk/drone/#slavemodewarning","title":"SlaveModeWarning","text":"<pre><code>class SlaveModeWarning(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Raised when trying to perform action not possible in slave mode</p> View Source <pre><code>class SlaveModeWarning(UserWarning):\n\n    \"\"\"Raised when trying to perform action not possible in slave mode\"\"\"\n</code></pre>"},{"location":"reference/blueye/sdk/drone/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>builtins.UserWarning</li> <li>builtins.Warning</li> <li>builtins.Exception</li> <li>builtins.BaseException</li> </ul>"},{"location":"reference/blueye/sdk/drone/#class-variables","title":"Class variables","text":"<pre><code>args\n</code></pre>"},{"location":"reference/blueye/sdk/drone/#methods_2","title":"Methods","text":""},{"location":"reference/blueye/sdk/drone/#add_note","title":"add_note","text":"<pre><code>def add_note(\n    ...\n)\n</code></pre> <p>Exception.add_note(note) --</p> <p>add a note to the exception</p>"},{"location":"reference/blueye/sdk/drone/#with_traceback","title":"with_traceback","text":"<pre><code>def with_traceback(\n    ...\n)\n</code></pre> <p>Exception.with_traceback(tb) --</p> <p>set self.traceback to tb and return self.</p>"},{"location":"reference/blueye/sdk/logs/","title":"Module blueye.sdk.logs","text":"View Source <pre><code>from datetime import datetime\n\nimport dateutil.parser\n\nimport requests\n\nimport tabulate\n\nclass LogFile:\n\n    \"\"\"\n\n    This class is a container for a log file stored on the drone\n\n    The drone lists the file name, max depth, start time, and file size for each log,\n\n    and you can show this information by printing the log object, eg. on a Drone\n\n    object called `myDrone`:\n\n    ```\n\n    print(myDrone.logs[0])\n\n    ```\n\n    or, if you want to display the header you can format the object with `with_header`:\n\n    ```\n\n    print(f\"{myDrone.logs[0]:with_header}\")\n\n    ```\n\n    Calling the download() method on a log object will pull the CSV (Comma Separated\n\n    Value) file from the drone to your local filesystem.\n\n    \"\"\"\n\n    def __init__(self, maxdepth, name, timestamp, binsize, ip):\n\n        self.maxdepth = maxdepth\n\n        self.name = name\n\n        self.timestamp: datetime = dateutil.parser.isoparse(timestamp)\n\n        self.binsize = binsize\n\n        self.download_path = \"http://\" + ip + \"/logcsv/\" + name\n\n        self._formatted_values = [\n\n            self.name,\n\n            self.timestamp.strftime(\"%d. %b %Y %H:%M\"),\n\n            f\"{self.maxdepth/1000:.2f} m\",\n\n            self._human_readable_filesize(),\n\n        ]\n\n    def _human_readable_filesize(self):\n\n        suffix = \"B\"\n\n        num = self.binsize\n\n        for unit in [\"\", \"Ki\", \"Mi\"]:\n\n            if abs(num) &lt; 1024.0:\n\n                return f\"{num:3.1f} {unit}{suffix}\"\n\n            num /= 1024.0\n\n        return f\"{num:.1f} Gi{suffix}\"\n\n    def download(self, output_path=None, output_name=None, downsample_divisor=10):\n\n        \"\"\"\n\n        Download the specified log to your local file system\n\n        If you specify an output_path the log file will be downloaded to that directory\n\n        instead of the current one.\n\n        Specifying output_name will overwrite the default file name with whatever you\n\n        have specified (be sure to include the .csv extension).\n\n        The drone samples the log content at 10 Hz, and by default this function downsamples this\n\n        rate to 1 Hz.\n\n        \"\"\"\n\n        log = requests.get(self.download_path, params={\"divisor\": downsample_divisor}).content\n\n        if output_path is None:\n\n            output_path = \"./\"\n\n        if output_name is None:\n\n            output_name = self.name\n\n        with open(f\"{output_path}{output_name}\", \"wb\") as f:\n\n            f.write(log)\n\n    def __format__(self, format_specifier):\n\n        if format_specifier == \"with_header\":\n\n            return tabulate.tabulate(\n\n                [self], headers=[\"Name\", \"Time\", \"Max depth\", \"Size\"], tablefmt=\"plain\"\n\n            )\n\n        else:\n\n            return tabulate.tabulate([self], tablefmt=\"plain\")\n\n    def __str__(self):\n\n        return f\"{self}\"\n\n    def __getitem__(self, item):\n\n        return self._formatted_values[item]\n\nclass Logs:\n\n    \"\"\"This class is an index of the log files stored on the drone\n\n    To show the available logs you simply print this object, ie. if your Drone object\n\n    is called `myDrone`, you can do:\n\n    ```\n\n    print(myDrone.logs)\n\n    ```\n\n    This will print a list of all available logs, with some of their metadata, such as\n\n    name and maxdepth.\n\n    You can access logfile objects either by index or by name. Eg. if you want the first\n\n    logfile in the list you can do `myDrone.logs[0]`, or if you want some particular log you\n\n    can do `myDrone.logs[\"exampleName0001.csv\"]`. You can even give it a slice, so if you want\n\n    the last 10 logs you can do `myDrone.logs[:-10]`.\n\n    \"\"\"\n\n    def __init__(self, parent_drone, auto_download_index=False):\n\n        self.ip = parent_drone._ip\n\n        self._parent_drone = parent_drone\n\n        self.index_downloaded = False\n\n        if auto_download_index:\n\n            self.refresh_log_index()\n\n        else:\n\n            self._logs = {}\n\n    def _get_list_of_logs_from_drone(self):\n\n        list_of_dictionaries = requests.get(\"http://\" + self.ip + \"/logcsv\").json()\n\n        return list_of_dictionaries\n\n    def _build_log_files_from_dictionary(self, list_of_logs_in_dictionaries):\n\n        loglist = {}\n\n        for log in list_of_logs_in_dictionaries:\n\n            try:\n\n                loglist[log[\"name\"]] = LogFile(\n\n                    log[\"maxdepth\"], log[\"name\"], log[\"timestamp\"], log[\"binsize\"], self.ip\n\n                )\n\n            except dateutil.parser.ParserError:\n\n                # TODO: Log this instead of printing when logging is implemented\n\n                print(f\"Could not parse timestamp for log {log['name']}, skipping this log file\")\n\n        return loglist\n\n    def refresh_log_index(self):\n\n        \"\"\"Refresh the log index from the drone\n\n        This is method is run on the first log access by default, but if you would like to check\n\n        for new log files it can be called at any time.\n\n        \"\"\"\n\n        list_of_logs_in_dictionaries = self._get_list_of_logs_from_drone()\n\n        self._logs = self._build_log_files_from_dictionary(list_of_logs_in_dictionaries)\n\n        self.index_downloaded = True\n\n    def __getitem__(self, item):\n\n        if not self.index_downloaded:\n\n            self.refresh_log_index()\n\n        if type(item) == str:\n\n            try:\n\n                return self._logs[item]\n\n            except KeyError:\n\n                raise KeyError(f\"A log with the name '{item}' does not exist\")\n\n        else:\n\n            try:\n\n                return list(self._logs.values())[item]\n\n            except IndexError:\n\n                raise IndexError(\n\n                    f\"Tried to access log nr {item}, \"\n\n                    + f\"but there are only {len(self._logs.values())} logs available\"\n\n                )\n\n    def __str__(self):\n\n        return tabulate.tabulate(\n\n            self, headers=[\"Name\", \"Time\", \"Max depth\", \"Size\"], tablefmt=\"plain\"\n\n        )\n</code></pre>"},{"location":"reference/blueye/sdk/logs/#classes","title":"Classes","text":""},{"location":"reference/blueye/sdk/logs/#logfile","title":"LogFile","text":"<pre><code>class LogFile(\n    maxdepth,\n    name,\n    timestamp,\n    binsize,\n    ip\n)\n</code></pre> <p>This class is a container for a log file stored on the drone</p> <p>The drone lists the file name, max depth, start time, and file size for each log, and you can show this information by printing the log object, eg. on a Drone object called <code>myDrone</code>:</p> <pre><code>print(myDrone.logs[0])\n</code></pre> <p>or, if you want to display the header you can format the object with <code>with_header</code>:</p> <pre><code>print(f\"{myDrone.logs[0]:with_header}\")\n</code></pre> <p>Calling the download() method on a log object will pull the CSV (Comma Separated Value) file from the drone to your local filesystem.</p> View Source <pre><code>class LogFile:\n\n    \"\"\"\n\n    This class is a container for a log file stored on the drone\n\n    The drone lists the file name, max depth, start time, and file size for each log,\n\n    and you can show this information by printing the log object, eg. on a Drone\n\n    object called `myDrone`:\n\n    ```\n\n    print(myDrone.logs[0])\n\n    ```\n\n    or, if you want to display the header you can format the object with `with_header`:\n\n    ```\n\n    print(f\"{myDrone.logs[0]:with_header}\")\n\n    ```\n\n    Calling the download() method on a log object will pull the CSV (Comma Separated\n\n    Value) file from the drone to your local filesystem.\n\n    \"\"\"\n\n    def __init__(self, maxdepth, name, timestamp, binsize, ip):\n\n        self.maxdepth = maxdepth\n\n        self.name = name\n\n        self.timestamp: datetime = dateutil.parser.isoparse(timestamp)\n\n        self.binsize = binsize\n\n        self.download_path = \"http://\" + ip + \"/logcsv/\" + name\n\n        self._formatted_values = [\n\n            self.name,\n\n            self.timestamp.strftime(\"%d. %b %Y %H:%M\"),\n\n            f\"{self.maxdepth/1000:.2f} m\",\n\n            self._human_readable_filesize(),\n\n        ]\n\n    def _human_readable_filesize(self):\n\n        suffix = \"B\"\n\n        num = self.binsize\n\n        for unit in [\"\", \"Ki\", \"Mi\"]:\n\n            if abs(num) &lt; 1024.0:\n\n                return f\"{num:3.1f} {unit}{suffix}\"\n\n            num /= 1024.0\n\n        return f\"{num:.1f} Gi{suffix}\"\n\n    def download(self, output_path=None, output_name=None, downsample_divisor=10):\n\n        \"\"\"\n\n        Download the specified log to your local file system\n\n        If you specify an output_path the log file will be downloaded to that directory\n\n        instead of the current one.\n\n        Specifying output_name will overwrite the default file name with whatever you\n\n        have specified (be sure to include the .csv extension).\n\n        The drone samples the log content at 10 Hz, and by default this function downsamples this\n\n        rate to 1 Hz.\n\n        \"\"\"\n\n        log = requests.get(self.download_path, params={\"divisor\": downsample_divisor}).content\n\n        if output_path is None:\n\n            output_path = \"./\"\n\n        if output_name is None:\n\n            output_name = self.name\n\n        with open(f\"{output_path}{output_name}\", \"wb\") as f:\n\n            f.write(log)\n\n    def __format__(self, format_specifier):\n\n        if format_specifier == \"with_header\":\n\n            return tabulate.tabulate(\n\n                [self], headers=[\"Name\", \"Time\", \"Max depth\", \"Size\"], tablefmt=\"plain\"\n\n            )\n\n        else:\n\n            return tabulate.tabulate([self], tablefmt=\"plain\")\n\n    def __str__(self):\n\n        return f\"{self}\"\n\n    def __getitem__(self, item):\n\n        return self._formatted_values[item]\n</code></pre>"},{"location":"reference/blueye/sdk/logs/#methods","title":"Methods","text":""},{"location":"reference/blueye/sdk/logs/#download","title":"download","text":"<pre><code>def download(\n    self,\n    output_path=None,\n    output_name=None,\n    downsample_divisor=10\n)\n</code></pre> <p>Download the specified log to your local file system</p> <p>If you specify an output_path the log file will be downloaded to that directory instead of the current one.</p> <p>Specifying output_name will overwrite the default file name with whatever you have specified (be sure to include the .csv extension).</p> <p>The drone samples the log content at 10 Hz, and by default this function downsamples this rate to 1 Hz.</p> View Source <pre><code>    def download(self, output_path=None, output_name=None, downsample_divisor=10):\n\n        \"\"\"\n\n        Download the specified log to your local file system\n\n        If you specify an output_path the log file will be downloaded to that directory\n\n        instead of the current one.\n\n        Specifying output_name will overwrite the default file name with whatever you\n\n        have specified (be sure to include the .csv extension).\n\n        The drone samples the log content at 10 Hz, and by default this function downsamples this\n\n        rate to 1 Hz.\n\n        \"\"\"\n\n        log = requests.get(self.download_path, params={\"divisor\": downsample_divisor}).content\n\n        if output_path is None:\n\n            output_path = \"./\"\n\n        if output_name is None:\n\n            output_name = self.name\n\n        with open(f\"{output_path}{output_name}\", \"wb\") as f:\n\n            f.write(log)\n</code></pre>"},{"location":"reference/blueye/sdk/logs/#logs","title":"Logs","text":"<pre><code>class Logs(\n    parent_drone,\n    auto_download_index=False\n)\n</code></pre> <p>This class is an index of the log files stored on the drone</p> <p>To show the available logs you simply print this object, ie. if your Drone object is called <code>myDrone</code>, you can do:</p> <pre><code>print(myDrone.logs)\n</code></pre> <p>This will print a list of all available logs, with some of their metadata, such as name and maxdepth.</p> <p>You can access logfile objects either by index or by name. Eg. if you want the first logfile in the list you can do <code>myDrone.logs[0]</code>, or if you want some particular log you can do <code>myDrone.logs[\"exampleName0001.csv\"]</code>. You can even give it a slice, so if you want the last 10 logs you can do <code>myDrone.logs[:-10]</code>.</p> View Source <pre><code>class Logs:\n\n    \"\"\"This class is an index of the log files stored on the drone\n\n    To show the available logs you simply print this object, ie. if your Drone object\n\n    is called `myDrone`, you can do:\n\n    ```\n\n    print(myDrone.logs)\n\n    ```\n\n    This will print a list of all available logs, with some of their metadata, such as\n\n    name and maxdepth.\n\n    You can access logfile objects either by index or by name. Eg. if you want the first\n\n    logfile in the list you can do `myDrone.logs[0]`, or if you want some particular log you\n\n    can do `myDrone.logs[\"exampleName0001.csv\"]`. You can even give it a slice, so if you want\n\n    the last 10 logs you can do `myDrone.logs[:-10]`.\n\n    \"\"\"\n\n    def __init__(self, parent_drone, auto_download_index=False):\n\n        self.ip = parent_drone._ip\n\n        self._parent_drone = parent_drone\n\n        self.index_downloaded = False\n\n        if auto_download_index:\n\n            self.refresh_log_index()\n\n        else:\n\n            self._logs = {}\n\n    def _get_list_of_logs_from_drone(self):\n\n        list_of_dictionaries = requests.get(\"http://\" + self.ip + \"/logcsv\").json()\n\n        return list_of_dictionaries\n\n    def _build_log_files_from_dictionary(self, list_of_logs_in_dictionaries):\n\n        loglist = {}\n\n        for log in list_of_logs_in_dictionaries:\n\n            try:\n\n                loglist[log[\"name\"]] = LogFile(\n\n                    log[\"maxdepth\"], log[\"name\"], log[\"timestamp\"], log[\"binsize\"], self.ip\n\n                )\n\n            except dateutil.parser.ParserError:\n\n                # TODO: Log this instead of printing when logging is implemented\n\n                print(f\"Could not parse timestamp for log {log['name']}, skipping this log file\")\n\n        return loglist\n\n    def refresh_log_index(self):\n\n        \"\"\"Refresh the log index from the drone\n\n        This is method is run on the first log access by default, but if you would like to check\n\n        for new log files it can be called at any time.\n\n        \"\"\"\n\n        list_of_logs_in_dictionaries = self._get_list_of_logs_from_drone()\n\n        self._logs = self._build_log_files_from_dictionary(list_of_logs_in_dictionaries)\n\n        self.index_downloaded = True\n\n    def __getitem__(self, item):\n\n        if not self.index_downloaded:\n\n            self.refresh_log_index()\n\n        if type(item) == str:\n\n            try:\n\n                return self._logs[item]\n\n            except KeyError:\n\n                raise KeyError(f\"A log with the name '{item}' does not exist\")\n\n        else:\n\n            try:\n\n                return list(self._logs.values())[item]\n\n            except IndexError:\n\n                raise IndexError(\n\n                    f\"Tried to access log nr {item}, \"\n\n                    + f\"but there are only {len(self._logs.values())} logs available\"\n\n                )\n\n    def __str__(self):\n\n        return tabulate.tabulate(\n\n            self, headers=[\"Name\", \"Time\", \"Max depth\", \"Size\"], tablefmt=\"plain\"\n\n        )\n</code></pre>"},{"location":"reference/blueye/sdk/logs/#methods_1","title":"Methods","text":""},{"location":"reference/blueye/sdk/logs/#refresh_log_index","title":"refresh_log_index","text":"<pre><code>def refresh_log_index(\n    self\n)\n</code></pre> <p>Refresh the log index from the drone</p> <p>This is method is run on the first log access by default, but if you would like to check for new log files it can be called at any time.</p> View Source <pre><code>    def refresh_log_index(self):\n\n        \"\"\"Refresh the log index from the drone\n\n        This is method is run on the first log access by default, but if you would like to check\n\n        for new log files it can be called at any time.\n\n        \"\"\"\n\n        list_of_logs_in_dictionaries = self._get_list_of_logs_from_drone()\n\n        self._logs = self._build_log_files_from_dictionary(list_of_logs_in_dictionaries)\n\n        self.index_downloaded = True\n</code></pre>"},{"location":"reference/blueye/sdk/motion/","title":"Module blueye.sdk.motion","text":"View Source <pre><code>import threading\n\nclass Motion:\n\n    \"\"\"Control the motion of the drone, and set automatic control modes\n\n    Motion can be set one degree of freedom at a time by using the 4 motion properties\n\n    (surge, sway, heave and yaw) or for all 4 degrees of freedom in one go through the\n\n    `send_thruster_setpoint` method.\n\n    \"\"\"\n\n    def __init__(self, parent_drone):\n\n        self._parent_drone = parent_drone\n\n        self._state_watcher = parent_drone._state_watcher\n\n        self.thruster_lock = threading.Lock()\n\n        self._current_thruster_setpoints = {\"surge\": 0, \"sway\": 0, \"heave\": 0, \"yaw\": 0}\n\n        self._current_boost_setpoints = {\"slow\": 0, \"boost\": 0}\n\n    @property\n\n    def current_thruster_setpoints(self):\n\n        \"\"\"Returns the current setpoints for the thrusters\n\n        We maintain this state in the SDK since the drone does not report back it's current\n\n        setpoint.\n\n        For setting the setpoints you should use the dedicated properties/functions for that, trying\n\n        to set them directly with this property will raise an AttributeError.\n\n        \"\"\"\n\n        return self._current_thruster_setpoints\n\n    @current_thruster_setpoints.setter\n\n    def current_thruster_setpoints(self, *args, **kwargs):\n\n        raise AttributeError(\n\n            \"Do not set the setpoints directly, use the surge, sway, heave, yaw properties or the \"\n\n            \"send_thruster_setpoint function for that.\"\n\n        )\n\n    def _send_motion_input_message(self):\n\n        \"\"\"Small helper function for building argument list to motion_input command\"\"\"\n\n        thruster_setpoints = self.current_thruster_setpoints.values()\n\n        boost_setpoints = self._current_boost_setpoints.values()\n\n        self._parent_drone._tcp_client.motion_input(*thruster_setpoints, *boost_setpoints)\n\n    @property\n\n    def surge(self) -&gt; float:\n\n        \"\"\"Set force reference for the surge direction\n\n        Arguments:\n\n        * **surge** (float): Force set point in the surge direction in range &lt;-1, 1&gt;,\n\n                             a positive set point makes the drone move forward\n\n        \"\"\"\n\n        return self.current_thruster_setpoints[\"surge\"]\n\n    @surge.setter\n\n    def surge(self, surge_value: float):\n\n        with self.thruster_lock:\n\n            self._current_thruster_setpoints[\"surge\"] = surge_value\n\n            self._send_motion_input_message()\n\n    @property\n\n    def sway(self) -&gt; float:\n\n        \"\"\"Set force reference for the sway direction\n\n        Arguments:\n\n        * **sway** (float): Force set point in the sway direction in range &lt;-1, 1&gt;,\n\n                            a positive set point makes the drone move to the right\n\n        \"\"\"\n\n        return self.current_thruster_setpoints[\"sway\"]\n\n    @sway.setter\n\n    def sway(self, sway_value: float):\n\n        with self.thruster_lock:\n\n            self._current_thruster_setpoints[\"sway\"] = sway_value\n\n            self._send_motion_input_message()\n\n    @property\n\n    def heave(self) -&gt; float:\n\n        \"\"\"Set force reference for the heave direction\n\n        Arguments:\n\n        * **heave** (float): Force set point in the heave direction in range &lt;-1, 1&gt;,\n\n                             a positive set point makes the drone move downwards\n\n        \"\"\"\n\n        return self.current_thruster_setpoints[\"heave\"]\n\n    @heave.setter\n\n    def heave(self, heave_value: float):\n\n        with self.thruster_lock:\n\n            self._current_thruster_setpoints[\"heave\"] = heave_value\n\n            self._send_motion_input_message()\n\n    @property\n\n    def yaw(self) -&gt; float:\n\n        \"\"\"Set force reference for the yaw direction\n\n        Arguments:\n\n        * **yaw** (float): Moment set point in the sway direction in range &lt;-1, 1&gt;,\n\n                           a positive set point makes the drone rotate clockwise.\n\n        \"\"\"\n\n        return self.current_thruster_setpoints[\"yaw\"]\n\n    @yaw.setter\n\n    def yaw(self, yaw_value: float):\n\n        with self.thruster_lock:\n\n            self._current_thruster_setpoints[\"yaw\"] = yaw_value\n\n            self._send_motion_input_message()\n\n    def send_thruster_setpoint(self, surge, sway, heave, yaw):\n\n        \"\"\"Control the thrusters of the drone\n\n        Set reference values between -1 and 1 for each controllable degree of freedom on the drone.\n\n        The reference values are mapped linearly to a thruster force, a set point of -1 correspons\n\n        to maximum negative force and a set point of 1 corresponds to maximum positive force. For\n\n        the yaw direction the reference is a moment not a force, as the yaw direction is rotational\n\n        not translational.\n\n        Arguments:\n\n        * **surge** (float): Force set point in the surge direction in range &lt;-1, 1&gt;,\n\n                             a positive set point makes the drone move forward\n\n        * **sway** (float): Force set point in the sway direction in range &lt;-1, 1&gt;,\n\n                             a positive set point makes the drone move to the right\n\n        * **heave** (float): Force set point in the heave direction in range &lt;-1, 1&gt;,\n\n                             a positive set point makes the drone move down.\n\n        * **yaw** (float): Moment set point in the yaw direction in range &lt;-1, 1&gt;,\n\n                             a positive set point makes the drone rotate clockwise.\n\n        \"\"\"\n\n        with self.thruster_lock:\n\n            self._current_thruster_setpoints[\"surge\"] = surge\n\n            self._current_thruster_setpoints[\"sway\"] = sway\n\n            self._current_thruster_setpoints[\"heave\"] = heave\n\n            self._current_thruster_setpoints[\"yaw\"] = yaw\n\n            self._send_motion_input_message()\n\n    @property\n\n    def boost(self) -&gt; float:\n\n        \"\"\"Get or set the boost gain\n\n        Arguments:\n\n        * **boost_gain** (float): Range from 0 to 1.\n\n        \"\"\"\n\n        return self._current_boost_setpoints[\"boost\"]\n\n    @boost.setter\n\n    def boost(self, boost_gain: float):\n\n        with self.thruster_lock:\n\n            self._current_boost_setpoints[\"boost\"] = boost_gain\n\n            self._send_motion_input_message()\n\n    @property\n\n    def slow(self) -&gt; float:\n\n        \"\"\"Get or set the \"slow gain\" (inverse of boost)\n\n        Arguments:\n\n        * **slow_gain** (float): Range from 0 to 1.\n\n        \"\"\"\n\n        return self._current_boost_setpoints[\"slow\"]\n\n    @slow.setter\n\n    def slow(self, slow_gain: float):\n\n        with self.thruster_lock:\n\n            self._current_boost_setpoints[\"slow\"] = slow_gain\n\n            self._send_motion_input_message()\n\n    @property\n\n    def auto_depth_active(self) -&gt; bool:\n\n        \"\"\"Enable or disable the auto depth control mode\n\n        When auto depth is active, input for the heave direction to the thruster_setpoint function\n\n        specifies a speed set point instead of a force set point. A control loop on the drone will\n\n        then attempt to maintain the wanted speed in the heave direction as long as auto depth is\n\n        active.\n\n        *Arguments*:\n\n        * active (bool): Activate auto depth mode if active is true, de-activate if false\n\n        *Returns*:\n\n        * active (bool): Returns true if auto depth is active, false if it is not active\n\n        \"\"\"\n\n        AUTO_DEPTH_MODE = 3\n\n        AUTO_HEADING_AND_AUTO_DEPTH_MODE = 9\n\n        state = self._state_watcher.general_state\n\n        if (\n\n            state[\"control_mode\"] is AUTO_DEPTH_MODE\n\n            or state[\"control_mode\"] is AUTO_HEADING_AND_AUTO_DEPTH_MODE\n\n        ):\n\n            return True\n\n        else:\n\n            return False\n\n    @auto_depth_active.setter\n\n    def auto_depth_active(self, active: bool):\n\n        if active:\n\n            self._parent_drone._tcp_client.auto_depth_on()\n\n        else:\n\n            self._parent_drone._tcp_client.auto_depth_off()\n\n    @property\n\n    def auto_heading_active(self) -&gt; bool:\n\n        \"\"\"Enable or disable the auto heading control mode\n\n        When auto heading is active, input for the yaw direction to the thruster_setpoint function\n\n        specifies a angular speed set point instead of a moment set point. A control loop on the\n\n        drone will then attempt to maintain the wanted angular velocity in the yaw direction as\n\n        long as auto heading is active.\n\n        *Arguments*:\n\n        * active (bool): Activate auto heading mode if active is true, de-activate if false\n\n        *Returns*:\n\n        * active (bool): Returns true if auto heading mode is active, false if it is not active\n\n        \"\"\"\n\n        AUTO_HEADING_MODE = 7\n\n        AUTO_HEADING_AND_AUTO_DEPTH_MODE = 9\n\n        state = self._state_watcher.general_state\n\n        if (\n\n            state[\"control_mode\"] is AUTO_HEADING_MODE\n\n            or state[\"control_mode\"] is AUTO_HEADING_AND_AUTO_DEPTH_MODE\n\n        ):\n\n            return True\n\n        else:\n\n            return False\n\n    @auto_heading_active.setter\n\n    def auto_heading_active(self, active: bool):\n\n        if active:\n\n            self._parent_drone._tcp_client.auto_heading_on()\n\n        else:\n\n            self._parent_drone._tcp_client.auto_heading_off()\n</code></pre>"},{"location":"reference/blueye/sdk/motion/#classes","title":"Classes","text":""},{"location":"reference/blueye/sdk/motion/#motion","title":"Motion","text":"<pre><code>class Motion(\n    parent_drone\n)\n</code></pre> <p>Control the motion of the drone, and set automatic control modes</p> <p>Motion can be set one degree of freedom at a time by using the 4 motion properties (surge, sway, heave and yaw) or for all 4 degrees of freedom in one go through the <code>send_thruster_setpoint</code> method.</p> View Source <pre><code>class Motion:\n\n    \"\"\"Control the motion of the drone, and set automatic control modes\n\n    Motion can be set one degree of freedom at a time by using the 4 motion properties\n\n    (surge, sway, heave and yaw) or for all 4 degrees of freedom in one go through the\n\n    `send_thruster_setpoint` method.\n\n    \"\"\"\n\n    def __init__(self, parent_drone):\n\n        self._parent_drone = parent_drone\n\n        self._state_watcher = parent_drone._state_watcher\n\n        self.thruster_lock = threading.Lock()\n\n        self._current_thruster_setpoints = {\"surge\": 0, \"sway\": 0, \"heave\": 0, \"yaw\": 0}\n\n        self._current_boost_setpoints = {\"slow\": 0, \"boost\": 0}\n\n    @property\n\n    def current_thruster_setpoints(self):\n\n        \"\"\"Returns the current setpoints for the thrusters\n\n        We maintain this state in the SDK since the drone does not report back it's current\n\n        setpoint.\n\n        For setting the setpoints you should use the dedicated properties/functions for that, trying\n\n        to set them directly with this property will raise an AttributeError.\n\n        \"\"\"\n\n        return self._current_thruster_setpoints\n\n    @current_thruster_setpoints.setter\n\n    def current_thruster_setpoints(self, *args, **kwargs):\n\n        raise AttributeError(\n\n            \"Do not set the setpoints directly, use the surge, sway, heave, yaw properties or the \"\n\n            \"send_thruster_setpoint function for that.\"\n\n        )\n\n    def _send_motion_input_message(self):\n\n        \"\"\"Small helper function for building argument list to motion_input command\"\"\"\n\n        thruster_setpoints = self.current_thruster_setpoints.values()\n\n        boost_setpoints = self._current_boost_setpoints.values()\n\n        self._parent_drone._tcp_client.motion_input(*thruster_setpoints, *boost_setpoints)\n\n    @property\n\n    def surge(self) -&gt; float:\n\n        \"\"\"Set force reference for the surge direction\n\n        Arguments:\n\n        * **surge** (float): Force set point in the surge direction in range &lt;-1, 1&gt;,\n\n                             a positive set point makes the drone move forward\n\n        \"\"\"\n\n        return self.current_thruster_setpoints[\"surge\"]\n\n    @surge.setter\n\n    def surge(self, surge_value: float):\n\n        with self.thruster_lock:\n\n            self._current_thruster_setpoints[\"surge\"] = surge_value\n\n            self._send_motion_input_message()\n\n    @property\n\n    def sway(self) -&gt; float:\n\n        \"\"\"Set force reference for the sway direction\n\n        Arguments:\n\n        * **sway** (float): Force set point in the sway direction in range &lt;-1, 1&gt;,\n\n                            a positive set point makes the drone move to the right\n\n        \"\"\"\n\n        return self.current_thruster_setpoints[\"sway\"]\n\n    @sway.setter\n\n    def sway(self, sway_value: float):\n\n        with self.thruster_lock:\n\n            self._current_thruster_setpoints[\"sway\"] = sway_value\n\n            self._send_motion_input_message()\n\n    @property\n\n    def heave(self) -&gt; float:\n\n        \"\"\"Set force reference for the heave direction\n\n        Arguments:\n\n        * **heave** (float): Force set point in the heave direction in range &lt;-1, 1&gt;,\n\n                             a positive set point makes the drone move downwards\n\n        \"\"\"\n\n        return self.current_thruster_setpoints[\"heave\"]\n\n    @heave.setter\n\n    def heave(self, heave_value: float):\n\n        with self.thruster_lock:\n\n            self._current_thruster_setpoints[\"heave\"] = heave_value\n\n            self._send_motion_input_message()\n\n    @property\n\n    def yaw(self) -&gt; float:\n\n        \"\"\"Set force reference for the yaw direction\n\n        Arguments:\n\n        * **yaw** (float): Moment set point in the sway direction in range &lt;-1, 1&gt;,\n\n                           a positive set point makes the drone rotate clockwise.\n\n        \"\"\"\n\n        return self.current_thruster_setpoints[\"yaw\"]\n\n    @yaw.setter\n\n    def yaw(self, yaw_value: float):\n\n        with self.thruster_lock:\n\n            self._current_thruster_setpoints[\"yaw\"] = yaw_value\n\n            self._send_motion_input_message()\n\n    def send_thruster_setpoint(self, surge, sway, heave, yaw):\n\n        \"\"\"Control the thrusters of the drone\n\n        Set reference values between -1 and 1 for each controllable degree of freedom on the drone.\n\n        The reference values are mapped linearly to a thruster force, a set point of -1 correspons\n\n        to maximum negative force and a set point of 1 corresponds to maximum positive force. For\n\n        the yaw direction the reference is a moment not a force, as the yaw direction is rotational\n\n        not translational.\n\n        Arguments:\n\n        * **surge** (float): Force set point in the surge direction in range &lt;-1, 1&gt;,\n\n                             a positive set point makes the drone move forward\n\n        * **sway** (float): Force set point in the sway direction in range &lt;-1, 1&gt;,\n\n                             a positive set point makes the drone move to the right\n\n        * **heave** (float): Force set point in the heave direction in range &lt;-1, 1&gt;,\n\n                             a positive set point makes the drone move down.\n\n        * **yaw** (float): Moment set point in the yaw direction in range &lt;-1, 1&gt;,\n\n                             a positive set point makes the drone rotate clockwise.\n\n        \"\"\"\n\n        with self.thruster_lock:\n\n            self._current_thruster_setpoints[\"surge\"] = surge\n\n            self._current_thruster_setpoints[\"sway\"] = sway\n\n            self._current_thruster_setpoints[\"heave\"] = heave\n\n            self._current_thruster_setpoints[\"yaw\"] = yaw\n\n            self._send_motion_input_message()\n\n    @property\n\n    def boost(self) -&gt; float:\n\n        \"\"\"Get or set the boost gain\n\n        Arguments:\n\n        * **boost_gain** (float): Range from 0 to 1.\n\n        \"\"\"\n\n        return self._current_boost_setpoints[\"boost\"]\n\n    @boost.setter\n\n    def boost(self, boost_gain: float):\n\n        with self.thruster_lock:\n\n            self._current_boost_setpoints[\"boost\"] = boost_gain\n\n            self._send_motion_input_message()\n\n    @property\n\n    def slow(self) -&gt; float:\n\n        \"\"\"Get or set the \"slow gain\" (inverse of boost)\n\n        Arguments:\n\n        * **slow_gain** (float): Range from 0 to 1.\n\n        \"\"\"\n\n        return self._current_boost_setpoints[\"slow\"]\n\n    @slow.setter\n\n    def slow(self, slow_gain: float):\n\n        with self.thruster_lock:\n\n            self._current_boost_setpoints[\"slow\"] = slow_gain\n\n            self._send_motion_input_message()\n\n    @property\n\n    def auto_depth_active(self) -&gt; bool:\n\n        \"\"\"Enable or disable the auto depth control mode\n\n        When auto depth is active, input for the heave direction to the thruster_setpoint function\n\n        specifies a speed set point instead of a force set point. A control loop on the drone will\n\n        then attempt to maintain the wanted speed in the heave direction as long as auto depth is\n\n        active.\n\n        *Arguments*:\n\n        * active (bool): Activate auto depth mode if active is true, de-activate if false\n\n        *Returns*:\n\n        * active (bool): Returns true if auto depth is active, false if it is not active\n\n        \"\"\"\n\n        AUTO_DEPTH_MODE = 3\n\n        AUTO_HEADING_AND_AUTO_DEPTH_MODE = 9\n\n        state = self._state_watcher.general_state\n\n        if (\n\n            state[\"control_mode\"] is AUTO_DEPTH_MODE\n\n            or state[\"control_mode\"] is AUTO_HEADING_AND_AUTO_DEPTH_MODE\n\n        ):\n\n            return True\n\n        else:\n\n            return False\n\n    @auto_depth_active.setter\n\n    def auto_depth_active(self, active: bool):\n\n        if active:\n\n            self._parent_drone._tcp_client.auto_depth_on()\n\n        else:\n\n            self._parent_drone._tcp_client.auto_depth_off()\n\n    @property\n\n    def auto_heading_active(self) -&gt; bool:\n\n        \"\"\"Enable or disable the auto heading control mode\n\n        When auto heading is active, input for the yaw direction to the thruster_setpoint function\n\n        specifies a angular speed set point instead of a moment set point. A control loop on the\n\n        drone will then attempt to maintain the wanted angular velocity in the yaw direction as\n\n        long as auto heading is active.\n\n        *Arguments*:\n\n        * active (bool): Activate auto heading mode if active is true, de-activate if false\n\n        *Returns*:\n\n        * active (bool): Returns true if auto heading mode is active, false if it is not active\n\n        \"\"\"\n\n        AUTO_HEADING_MODE = 7\n\n        AUTO_HEADING_AND_AUTO_DEPTH_MODE = 9\n\n        state = self._state_watcher.general_state\n\n        if (\n\n            state[\"control_mode\"] is AUTO_HEADING_MODE\n\n            or state[\"control_mode\"] is AUTO_HEADING_AND_AUTO_DEPTH_MODE\n\n        ):\n\n            return True\n\n        else:\n\n            return False\n\n    @auto_heading_active.setter\n\n    def auto_heading_active(self, active: bool):\n\n        if active:\n\n            self._parent_drone._tcp_client.auto_heading_on()\n\n        else:\n\n            self._parent_drone._tcp_client.auto_heading_off()\n</code></pre>"},{"location":"reference/blueye/sdk/motion/#instance-variables","title":"Instance variables","text":"<pre><code>auto_depth_active\n</code></pre> <p>Enable or disable the auto depth control mode</p> <p>When auto depth is active, input for the heave direction to the thruster_setpoint function specifies a speed set point instead of a force set point. A control loop on the drone will then attempt to maintain the wanted speed in the heave direction as long as auto depth is active.</p> <p>Arguments:</p> <ul> <li>active (bool): Activate auto depth mode if active is true, de-activate if false</li> </ul> <p>Returns:</p> <ul> <li>active (bool): Returns true if auto depth is active, false if it is not active</li> </ul> <pre><code>auto_heading_active\n</code></pre> <p>Enable or disable the auto heading control mode</p> <p>When auto heading is active, input for the yaw direction to the thruster_setpoint function specifies a angular speed set point instead of a moment set point. A control loop on the drone will then attempt to maintain the wanted angular velocity in the yaw direction as long as auto heading is active.</p> <p>Arguments:</p> <ul> <li>active (bool): Activate auto heading mode if active is true, de-activate if false</li> </ul> <p>Returns:</p> <ul> <li>active (bool): Returns true if auto heading mode is active, false if it is not active</li> </ul> <pre><code>boost\n</code></pre> <p>Get or set the boost gain</p> <p>Arguments:</p> <ul> <li>boost_gain (float): Range from 0 to 1.</li> </ul> <pre><code>current_thruster_setpoints\n</code></pre> <p>Returns the current setpoints for the thrusters</p> <p>We maintain this state in the SDK since the drone does not report back it's current setpoint.</p> <p>For setting the setpoints you should use the dedicated properties/functions for that, trying to set them directly with this property will raise an AttributeError.</p> <pre><code>heave\n</code></pre> <p>Set force reference for the heave direction</p> <p>Arguments:</p> <ul> <li>heave (float): Force set point in the heave direction in range &lt;-1, 1&gt;,                      a positive set point makes the drone move downwards</li> </ul> <pre><code>slow\n</code></pre> <p>Get or set the \"slow gain\" (inverse of boost)</p> <p>Arguments:</p> <ul> <li>slow_gain (float): Range from 0 to 1.</li> </ul> <pre><code>surge\n</code></pre> <p>Set force reference for the surge direction</p> <p>Arguments:</p> <ul> <li>surge (float): Force set point in the surge direction in range &lt;-1, 1&gt;,                      a positive set point makes the drone move forward</li> </ul> <pre><code>sway\n</code></pre> <p>Set force reference for the sway direction</p> <p>Arguments:</p> <ul> <li>sway (float): Force set point in the sway direction in range &lt;-1, 1&gt;,                     a positive set point makes the drone move to the right</li> </ul> <pre><code>yaw\n</code></pre> <p>Set force reference for the yaw direction</p> <p>Arguments:</p> <ul> <li>yaw (float): Moment set point in the sway direction in range &lt;-1, 1&gt;,                    a positive set point makes the drone rotate clockwise.</li> </ul>"},{"location":"reference/blueye/sdk/motion/#methods","title":"Methods","text":""},{"location":"reference/blueye/sdk/motion/#send_thruster_setpoint","title":"send_thruster_setpoint","text":"<pre><code>def send_thruster_setpoint(\n    self,\n    surge,\n    sway,\n    heave,\n    yaw\n)\n</code></pre> <p>Control the thrusters of the drone</p> <p>Set reference values between -1 and 1 for each controllable degree of freedom on the drone. The reference values are mapped linearly to a thruster force, a set point of -1 correspons to maximum negative force and a set point of 1 corresponds to maximum positive force. For the yaw direction the reference is a moment not a force, as the yaw direction is rotational not translational.</p> <p>Arguments:</p> <ul> <li>surge (float): Force set point in the surge direction in range &lt;-1, 1&gt;,                      a positive set point makes the drone move forward</li> <li>sway (float): Force set point in the sway direction in range &lt;-1, 1&gt;,                      a positive set point makes the drone move to the right</li> <li>heave (float): Force set point in the heave direction in range &lt;-1, 1&gt;,                      a positive set point makes the drone move down.</li> <li>yaw (float): Moment set point in the yaw direction in range &lt;-1, 1&gt;,                      a positive set point makes the drone rotate clockwise.</li> </ul> View Source <pre><code>    def send_thruster_setpoint(self, surge, sway, heave, yaw):\n\n        \"\"\"Control the thrusters of the drone\n\n        Set reference values between -1 and 1 for each controllable degree of freedom on the drone.\n\n        The reference values are mapped linearly to a thruster force, a set point of -1 correspons\n\n        to maximum negative force and a set point of 1 corresponds to maximum positive force. For\n\n        the yaw direction the reference is a moment not a force, as the yaw direction is rotational\n\n        not translational.\n\n        Arguments:\n\n        * **surge** (float): Force set point in the surge direction in range &lt;-1, 1&gt;,\n\n                             a positive set point makes the drone move forward\n\n        * **sway** (float): Force set point in the sway direction in range &lt;-1, 1&gt;,\n\n                             a positive set point makes the drone move to the right\n\n        * **heave** (float): Force set point in the heave direction in range &lt;-1, 1&gt;,\n\n                             a positive set point makes the drone move down.\n\n        * **yaw** (float): Moment set point in the yaw direction in range &lt;-1, 1&gt;,\n\n                             a positive set point makes the drone rotate clockwise.\n\n        \"\"\"\n\n        with self.thruster_lock:\n\n            self._current_thruster_setpoints[\"surge\"] = surge\n\n            self._current_thruster_setpoints[\"sway\"] = sway\n\n            self._current_thruster_setpoints[\"heave\"] = heave\n\n            self._current_thruster_setpoints[\"yaw\"] = yaw\n\n            self._send_motion_input_message()\n</code></pre>"},{"location":"reference/blueye/sdk/utils/","title":"Module blueye.sdk.utils","text":"View Source <pre><code>import webbrowser\n\nimport os\n\nimport blueye.sdk\n\ndef open_local_documentation():\n\n    \"\"\"Open a pre-built local version of the SDK documentation\n\n    Useful when you are connected to the drone wifi, and don't have access to the online version.\n\n    \"\"\"\n\n    sdk_path = os.path.dirname(blueye.sdk.__file__)\n\n    # The documentation is located next to the top-level package so we move up a couple of levels\n\n    documentation_path = os.path.abspath(sdk_path + \"/../../blueye.sdk_docs/README.html\")\n\n    webbrowser.open(documentation_path)\n</code></pre>"},{"location":"reference/blueye/sdk/utils/#functions","title":"Functions","text":""},{"location":"reference/blueye/sdk/utils/#open_local_documentation","title":"open_local_documentation","text":"<pre><code>def open_local_documentation(\n\n)\n</code></pre> <p>Open a pre-built local version of the SDK documentation</p> <p>Useful when you are connected to the drone wifi, and don't have access to the online version.</p> View Source <pre><code>def open_local_documentation():\n\n    \"\"\"Open a pre-built local version of the SDK documentation\n\n    Useful when you are connected to the drone wifi, and don't have access to the online version.\n\n    \"\"\"\n\n    sdk_path = os.path.dirname(blueye.sdk.__file__)\n\n    # The documentation is located next to the top-level package so we move up a couple of levels\n\n    documentation_path = os.path.abspath(sdk_path + \"/../../blueye.sdk_docs/README.html\")\n\n    webbrowser.open(documentation_path)\n</code></pre>"},{"location":"video/downloading/","title":"Downloading videos and images","text":"<p>Videos and images can easiest be downloaded through the mobile app, or by using the <code>Blueye file transfer</code> desktop application for Windows, Mac OS and Linux.</p> <p>If one wants a more control over the download process, all files are listable through any client that supports WebDAV. The server is available on the drone (default ip: <code>192.168.1.101</code>) and port <code>5050</code>.</p> <p>For example using a Python WebDAV client we could do the following to list the files on drone:</p> <pre><code>import webdav3.client as wc\n\n# Define the options for connecting\noptions = {\n    'webdav_hostname': \"http://192.168.1.101:5050\"\n}\n\n# Instantiate the connection\nclient = wc.Client(options)\n\n# List the avaiable files\nclient.list()\n</code></pre>"},{"location":"video/downloading/#understanding-the-file-name-formats","title":"Understanding the file name formats","text":"<p>An example output from listing available files could be:</p> <p><pre><code>'video_BYEDP000105_2019-08-13_103035.jpg'\n'video_BYEDP000105_2019-08-13_103035.mp4'\n'picture_BYEDP000105_2019-09-27_074152.431.jpg',\n</code></pre> The format of the file names are described below.</p>"},{"location":"video/downloading/#video-files","title":"Video files","text":"<p>For each video recorded on the drone two files will be created, a <code>.mp4</code> file with the actual video, and a <code>.jpg</code> file with a thumbnail image from the video file. Other than the file extension the file names will be identical. An example of a video + thumbnail pair could be: <pre><code>'video_BYEDP000105_2019-08-13_103035.jpg'\n'video_BYEDP000105_2019-08-13_103035.mp4'\n</code></pre> The file names break down to:</p> File Type Prefix Drone Serial Number Timestamp (yyyy-MM-dd_hhmmss) File Extension video BYEDP000105 2019-08-13_103035 .mp4 video BYEDP000105 2019-08-13_103035 .jpg"},{"location":"video/downloading/#image-files","title":"Image files","text":"<p>Image files are images captured with the still image function. The file name for image files follow the same format as the video files, but the time stamp is extended with milliseconds to differentiate still images captured within the same second.</p> <p>An example still image file could be:</p> <p><pre><code>'picture_BYEDP000105_2019-09-27_074152.431.jpg',\n</code></pre> The file name breaks down to:</p> File Type Prefix Drone Serial Number Timestamp (yyyy-MM-dd_hhmmss.SSS) File Extension picture BYEDP000105 2019-09-27_074152.431 .jpg"},{"location":"video/gstreamer-for-video-streaming/","title":"GStreamer for video streaming","text":"<p>GStreamer is the lowest latency alternative for streaming video from the drone to your laptop.</p>"},{"location":"video/gstreamer-for-video-streaming/#installing-gstreamer","title":"Installing GStreamer","text":"<p>To run the streaming pipeline in the next section you will need a runtime installation of GStreamer. The instructions below show the basic steps for installing GStreamer on the most common operating systems. You can find more in depth instruction for your specific operating system in the <code>GStreamer docs</code>.</p> Windows <p>On Windows the basic installation steps are:</p> <ol> <li>Download the relevant installer for your computer from https://gstreamer.freedesktop.org/download . Using the latest stable relase should be fine, at the time of writing that is <code>1.16.1 runtime installer</code></li> <li>Run the installer. When asked to choose a setup type choose to do a complete installation. This is because some plugins that are needed for the basic pipeline later are not included if you choose to install the typical setup</li> <li>To run GStreamer commands form the terminal, GStreamer must be added to the PATH environment variable. This can be done from the advanced system settings. Add <code>%GSTREAMER_1_0_ROOT_X86_64%\\bin</code> to path. Alternatively you can choose to run gst-launch-1.0.exe from the folder it is installed in, typically <code>C:\\gstreamer\\1.0\\x86_64\\bin</code></li> </ol> Mac OS <p>On Mac OS GStreamer and its plugins can be installed using brew <pre><code>brew install gstreamer gst-plugins-base gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav\n</code></pre></p> Linux <p>On Ubuntu and Debian GStreamer and its plugins can be installed using apt. <pre><code>apt-get install libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good \\\ngstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc \\\ngstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa\n</code></pre></p> <p>You can test the installation by trying the basic pipeline from the next section when connected to a drone. Or with</p> <pre><code>gst-launch-1.0 videotestsrc ! autovideosink\n</code></pre>"},{"location":"video/gstreamer-for-video-streaming/#basic-streaming-pipeline","title":"Basic streaming pipeline","text":"<p>After installing you can run this pipeline in your terminal:</p> Windows <pre><code>gst-launch-1.0 rtspsrc location=rtsp://192.168.1.101:8554/test latency=0 ! rtph264depay ! avdec_h264 ! videoconvert ! fpsdisplaysink sync=false\n</code></pre> Linux and macOS <pre><code>gst-launch-1.0 rtspsrc location=rtsp://192.168.1.101:8554/test latency=0 \\\n! rtph264depay \\\n! avdec_h264 \\\n! videoconvert \\\n! fpsdisplaysink sync=false\n</code></pre> <p>Running the pipeline will open a window with the camera stream and information about packet loss and camera frame rate.</p>"},{"location":"video/gstreamer-for-video-streaming/#external-camera-streaming-pipeline","title":"External camera streaming pipeline","text":"<p>If you have a X3 drone with an external camera connected you can use the following pipeline:</p> Windows <pre><code>gst-launch-1.0 rtspsrc location=rtsp://192.168.1.101:8555/guestport_cam latency=0 ! rtph264depay ! avdec_h264 ! videoconvert ! autovideosink sync=false\n</code></pre> Linux and macOS <pre><code>gst-launch-1.0 rtspsrc location=rtsp://192.168.1.101:8555/guestport_cam latency=0 \\\n! rtph264depay \\\n! avdec_h264 \\\n! videoconvert \\\n! autovideosink sync=false\n</code></pre> <p>Running the pipeline will open a window with the external camera stream.</p>"}]}