{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About the Blueye Drones","text":"<p>Blueye produces and sells three models of underwater drones, the Blueye Pioneer, Blueye Pro, and Blueye X3. The Pioneer and the Pro are drones designed for inspection, while the X3 is extensible with three guest ports that allow attaching for example grippers or sonars. Visit blueyerobotics.com for more information about the Blueye products.</p>"},{"location":"#this-sdk-and-the-blueye-drones","title":"This SDK and the Blueye drones","text":"<p>A Blueye drone is normally controlled via a mobile device through the Blueye App (iOS/Android). The mobile device is connected via Wi-Fi to a surface unit, and the drone is connected to the surface unit via a tether cable.</p> <p>This python SDK exposes the functionality of the Blueye app through a Python object. The SDK enables remote control of a Blueye drone as well as reading telemetry data and viewing video streams. It is not meant for executing code on the drone itself.</p> <p>To control the drone you connect your laptop to the surface unit Wi-Fi and run code that interfaces with the through the Python object.</p> <p>Check out the <code>Quick Start Guide</code> to get started with using the SDK.</p>"},{"location":"configuration/","title":"Configure drone parameters","text":"<p>There are settings on the drone that are remotely configurable from the Blueye mobile app. These can also be set directly from the SDK.</p>"},{"location":"configuration/#configure-time-and-date","title":"Configure time and date","text":"<p>The drone does not keep track of time internally. The SDK sets the time on the drone automatically when you connect initially. But you can also configure time and date manually like this</p> <pre><code>import time\nfrom blueye.sdk import Drone\n\nmyDrone = Drone()\n\ntime_to_set_on_drone = int(time.time()) # Unix Timestamp\nmyDrone.config.set_drone_time(time_to_set_on_drone)\n</code></pre> <p>or if we for example want to offset the drone time 5 hours relative to our current system time we can do something like this:</p> <pre><code>from blueye.sdk import Drone\nfrom datetime import timezone, timedelta, datetime\n\nmyDrone = Drone()\n\noffset_in_hours = timedelta(hours=5)\nequivalent_timezone = timezone(offset_in_hours)\nunix_timestamp = datetime.now(tz=equivalent_timezone).timestamp()\n\nmyDrone.config.set_drone_time(int(unix_timestamp))\n</code></pre>"},{"location":"configuration/#calibrate-pressure-sensor-for-water-density","title":"Calibrate pressure sensor for water density","text":"<p>The water density on the drone default to a reasonable density for salt water: 1025 grams per liter. For more accurate depth readings, the water density can be configured manually to suit your local conditions</p> <pre><code>from blueye.sdk import Drone, WaterDensities\n\nmyDrone = Drone()\n\n# Salt water\nmyDrone.config.water_density = WaterDensities.salty  # 1025 g/L\n\n# Brackish water\nmyDrone.config.water_density = WaterDensities.brackish  # 1011 g/L\n\n# Fresh water\nmyDrone.config.water_density = WaterDensities.fresh  # 997 g/L\n\n# Can also be set to arbitrary values\nmyDrone.config.water_density = 1234\n</code></pre>"},{"location":"configuration/#configure-camera-parameters","title":"Configure camera parameters","text":"<p>There are 6 different camera parameters that can be set. For a full list of camera parameters and their possible values see the <code>camera reference</code> section. For example you could set the bit rate like this</p> <pre><code>from blueye.sdk import Drone\n\nmyDrone = Drone()\n\nmyDrone.camera.bitrate = 8_000_000 # 8 Mbit bitrate\n</code></pre> <p>Due to a bug in the camera streaming on the drone a camera stream has to have been opened at least once before camera parameters can be set on the drone, see issue #67. For instructions on how to start a video stream see, the <code>Quick Start Guide</code>.</p>"},{"location":"foxglove-bridge/","title":"Visualize live sensor data from the drone with Foxglove","text":"<p>With some simple steps you can visualize live sensor data from the drone in Foxglove.</p> <ol> <li>Download foxglove here and create an account.</li> <li>Power on the drone and connect your computer to the Blueye wifi.</li> <li>Run <code>pip install \"blueye.sdk[examples]\"</code> to get the necessary dependencies, if you have not done so already.</li> <li>Clone the blueye.sdk repository to get the examples, or copy the script below into a file. In the examples folder you simply run <code>python foxglove_bridge_ws.py</code> to start the bridge.</li> <li>Open foxglove and open a new <code>Foxglove WebSocket</code> connection and leave it on default (<code>ws://localhost:8765</code>).</li> <li>Add panel, Raw message, or Plot and select the topic you want to display.</li> </ol>"},{"location":"foxglove-bridge/#alternative-with-docker","title":"Alternative with Docker","text":"<p>We have also provided a docker container that you can use to automatically starts the blueye-foxglove server.</p> <ol> <li>Pull the image: <code>docker pull blueyerobotics/foxglove-bridge</code>.</li> <li>Run the image in a container with port 8765 open: <code>docker run --rm -p 8765:8765 blueyerobotics/foxglove-bridge</code>.</li> <li>Connect as above in step 5.</li> </ol>"},{"location":"foxglove-bridge/#how-it-works","title":"How it works","text":"<p>The script below uses the Blueye SDK to subscribe to the drone telemetry messages with <code>ZeroMQ</code>. Then the foxglove websocket server is forwarding the protobuf messages so they can be subscribed to in the <code>Foxglove GUI</code>.</p>"},{"location":"foxglove-bridge/#example-of-a-websocket-bridge","title":"Example of a websocket bridge","text":"<pre><code>#!/usr/bin/env python3\nimport time\nimport logging\n\nfrom blueye.sdk import Drone\n\nimport asyncio\nimport time\nimport base64\nfrom foxglove_websocket import run_cancellable\nfrom foxglove_websocket.server import FoxgloveServer\nimport sys\nimport inspect\nfrom google.protobuf import descriptor_pb2\nimport blueye.protocol\n\n# Declare the global variable\nchannel_ids = {}\nglobal_server = None\n\nlogger = logging.getLogger(\"FoxgloveBridge\")\nlogger.setLevel(logging.DEBUG)\nhandler = logging.StreamHandler()\nhandler.setFormatter(logging.Formatter(\"%(asctime)s: [%(levelname)s] &lt;%(name)s&gt; %(message)s\"))\nlogger.addHandler(handler)\nlogger.info(\"Starting Foxglove bridge\")\n\nlogger_sdk = logging.getLogger(blueye.sdk.__name__)\nlogger_sdk.setLevel(logging.DEBUG)\nlogger_sdk.addHandler(handler)\n\n\ndef parse_message(payload_msg_name, data):\n    global global_server\n    global channel_ids\n\n    if payload_msg_name in channel_ids:\n        try:\n            asyncio.run(\n                global_server.send_message(channel_ids[payload_msg_name], time.time_ns(), data)\n            )\n        except TypeError as e:\n            logger.info(f\"Error sending message for {payload_msg_name}: {e}\")\n    else:\n        logger.info(f\"Warning: Channel ID not found for message type: {payload_msg_name}\")\n\n\ndef add_file_descriptor_and_dependencies(file_descriptor, file_descriptor_set):\n    \"\"\"Recursively add descriptors and their dependencies to the FileDescriptorSet\"\"\"\n    # Check if the descriptor is already in the FileDescriptorSet\n    if file_descriptor.name not in [fd.name for fd in file_descriptor_set.file]:\n        # Add the descriptor to the FileDescriptorSet\n        file_descriptor.CopyToProto(file_descriptor_set.file.add())\n\n        # Recursively add dependencies\n        for file_descriptor_dep in file_descriptor.dependencies:\n            add_file_descriptor_and_dependencies(file_descriptor_dep, file_descriptor_set)\n\n\ndef get_protobuf_descriptors(namespace):\n    descriptors = {}\n\n    # Get the module corresponding to the namespace\n    module = sys.modules[namespace]\n\n    # Iterate through all the attributes of the module\n    for name, obj in inspect.getmembers(module):\n        # Check if the object is a class, ends with 'Tel', and has a _meta attribute with pb\n        if (\n            inspect.isclass(obj)\n            and name.endswith(\"Tel\")\n            and hasattr(obj, \"_meta\")\n            and hasattr(obj._meta, \"pb\")\n        ):\n            try:\n                # Access the DESCRIPTOR\n                descriptor = obj._meta.pb.DESCRIPTOR\n\n                # Create a FileDescriptorSet\n                file_descriptor_set = descriptor_pb2.FileDescriptorSet()\n\n                # Add the descriptor and its dependencies\n                add_file_descriptor_and_dependencies(descriptor.file, file_descriptor_set)\n\n                # Serialize the FileDescriptorSet to binary\n                serialized_data = file_descriptor_set.SerializeToString()\n\n                # Base64 encode the serialized data\n                schema_base64 = base64.b64encode(serialized_data).decode(\"utf-8\")\n\n                # Store the serialized data in the dictionary\n                descriptors[name] = schema_base64\n            except AttributeError as e:\n                logger.info(f\"Skipping message: {name}: {e}\")\n                # Skip non-message types\n                raise e\n\n    return descriptors\n\n\nasync def main():\n    # Initialize the drone\n    myDrone = Drone(connect_as_observer=True)\n    myDrone.telemetry.add_msg_callback([], parse_message, raw=True)\n\n    # Specify the server's host, port, and a human-readable name\n    async with FoxgloveServer(\"0.0.0.0\", 8765, \"Blueye SDK bridge\") as server:\n        global global_server\n        global_server = server\n\n        # Get Protobuf descriptors for all relevant message types\n        namespace = \"blueye.protocol\"\n        descriptors = get_protobuf_descriptors(namespace)\n\n        # Register each message type as a channel\n        for message_name, schema_base64 in descriptors.items():\n            chan_id = await global_server.add_channel(\n                {\n                    \"topic\": f\"blueye.protocol.{message_name}\",  # Using the message name as the topic\n                    \"encoding\": \"protobuf\",\n                    \"schemaName\": f\"blueye.protocol.{message_name}\",\n                    \"schema\": schema_base64,\n                }\n            )\n            # Store the chan_id in the map\n            channel_ids[message_name] = chan_id\n\n        for name, chan_id in channel_ids.items():\n            logger.info(f\"Registered topic: blueye.protocol.{name}\")\n\n        # Keep the server running\n        while True:\n            await asyncio.sleep(1)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"migrating-to-v2/","title":"Upgrading to v2","text":"<p>Version 2 of the Blueye SDK (unfortunately) introduces a few breaking changes. The following guide outlines what has changed, and what you need to change to be compatible with the new version.</p>"},{"location":"migrating-to-v2/#change-of-underlying-communication-protocol","title":"Change of underlying communication protocol","text":"<p>The underlying communications protocol has been changed from UDP/TCP to protobuf messages sent over ZeroMQ sockets. This means that the drone now supports multiple simultaneous clients, and as such, the 'slave-mode' functionality is no longer necessary and has been removed.</p> <p>Another added benefit is the ability to list and disconnect other clients connected to the drone.</p>"},{"location":"migrating-to-v2/#requirement-on-blunux-v32-or-newer","title":"Requirement on Blunux v3.2 or newer","text":"<p>The SDK now requires v3.2 or newer of the Blunux operating system to be installed on the drone to able to connect to it.</p>"},{"location":"migrating-to-v2/#dropped-support-python-37","title":"Dropped support Python 3.7","text":"<p>One or several of our subdependencies has dropped support for 3.7, and in an effort to reduce the maintenance burden we decided to drop support for 3.7 when adding support for 3.11.</p>"},{"location":"migrating-to-v2/#new-range-for-lights-control","title":"New range for lights control","text":"<p>Previously the valid range for the <code>lights</code> property was an <code>int</code> between 0 and 255, it has now been updated to a <code>float</code> in the range 0 to 1.</p> <pre><code># Previously\nmy_drone.lights = 64\n\n# Updated\nmy_drone.lights = 0.25\n</code></pre>"},{"location":"migrating-to-v2/#error-flags-are-a-dictionary-of-bools","title":"Error flags are a dictionary of bools","text":"<p>Error flags are now represented as a dictionary of bools instead of bitflags in an <code>int</code>. See the ErrorFlags message for an overview of the possible error states.</p> <pre><code># Previously\ndepth_read_error: bool = my_drone.error_flags &amp; (1 &lt;&lt; 2)\n\n# Updated\ndepth_read_error: bool = my_drone.error_flags[\"depth_read\"]\n</code></pre>"},{"location":"migrating-to-v2/#changed-return-type-in-active_video_streams-property","title":"Changed return type in <code>active_video_streams</code> property","text":"<p>The <code>active_video_streams</code> property has been modified to return a dictionary containing <code>\"main\"</code> and <code>\"guestport\"</code> as keys. This change provides the option to be able to read the number of active video streams for both the main camera and (optinally) a guestport camera. <pre><code># Previously\nstreams_on_main_camera = my_drone.active_video_streams\n\n# Updated\nstreams_on_main_camera = my_drone.active_video_streams[\"main\"]\n</code></pre></p>"},{"location":"migrating-to-v2/#water-density-unit-changed-from-gl-to-kgl","title":"Water Density Unit changed from g/L to kg/L","text":"<p>The unit for water density has been updated from grams per liter (g/L) to kilograms per liter (kg/L). Make sure to adjust your calculations or conversions accordingly.</p> <pre><code># Previously\ndensity: int = my_drone.config.water_density\nprint(density) # Will print 1025\n\n# Updated\ndensity: float = my_drone.config.water_density\nprint(density) # Will print 1.025\n</code></pre>"},{"location":"migrating-to-v2/#camera-stabilization-uses-onoff-instead-of-toggle","title":"Camera Stabilization uses on/off instead of toggle","text":"<p>The camera stabilization functionality now uses separate methods for enabling and disabling instead of a single toggle method. Update your code to use the appropriate methods based on the desired behavior.</p> <pre><code># Previously\nmy_drone.camera.toggle_stabilization()\nprint(my_drone.camera.stabilization_enabled)\n\n# Updated\nmy_drone.camera.stabilization_enabled = True\nprint(my_drone.camera.stabilization_enabled)\n</code></pre>"},{"location":"migrating-to-v2/#tilt_speed-has-been-renamed-to-tilt_velocity","title":"<code>tilt_speed</code> has been renamed to <code>tilt_velocity</code>","text":"<p>The function tilt_speed has been renamed to tilt_velocity to better reflect its purpose and usage. Update your code to use the new function name. <pre><code># Previously\nmy_drone.camera.tilt.set_speed(1)\n\n# Updated\nmy_drone.camera.tilt.set_velocity(1)\n</code></pre></p>"},{"location":"migrating-to-v2/#new-subclass-for-battery-data","title":"New subclass for battery data","text":"<p>The <code>battery_state_of_charge</code> property has been moved to a subclass on the <code>Drone</code>-object. In addition the state of charge range for the battery has been adjusted to a scale of 0 to 1, instead of the previous 0 to 100 range.</p> <pre><code># Previously\nstate_of_charge: int = my_drone.battery_state_of_charge\n\n# Updated\nstate_of_charge: float = my_drone.battery.state_of_charge\n</code></pre>"},{"location":"migrating-to-v2/#custom-overlay-classes-replaced-with-enums","title":"Custom Overlay Classes Replaced with Enums","text":"<p>Custom overlay classes have been replaced with enums defined in the <code>blueye.protocol</code> package. Make sure to update your code to use the new enums for overlay functionality.</p> <pre><code># Previously\nfrom blueye.sdk import DepthUnitOverlay, FontSizeOverlay, LogoOverlay, TemperatureUnitOverlay\n\nmy_drone.camera.overlay.depth_unit = DepthUnitOverlay.METERS\nmy_drone.camera.overlay.font_size = FontSizeOverlay.PX15\nmy_drone.camera.overlay.logo = LogoOverlay.BLUEYE\nmy_drone.camera.overlay.temperature_unit = TemperatureUnitOverlay.CELSIUS\n\n# Updated\nimport blueye.protocol as bp\n\nmy_drone.camera.overlay.depth_unit = bp.DepthUnit.DEPTH_UNIT_METERS\nmy_drone.camera.overlay.font_size = bp.FontSize.FONT_SIZE_PX15\nmy_drone.camera.overlay.logo = bp.LogoType.LOGO_TYPE_DEFAULT\nmy_drone.camera.overlay.temperature_unit = bp.TemperatureUnit.TEMPERATURE_UNIT_CELSIUS\n</code></pre>"},{"location":"migrating-to-v2/#telemetry-properties-will-now-return-none-if-no-data-exists","title":"Telemetry properties will now return <code>None</code> if no data exists","text":"<p>Properties that read telemetry data, such as <code>lights</code>, <code>tilt_angle</code>, <code>depth</code>, <code>pose</code>, <code>battery_state_of_charge</code>, <code>error_flags</code>, <code>active_video_streams</code>, <code>auto_depth_active</code>, and <code>auto_heading_active</code>, will now return <code>None</code> if no telemetry message has been received from the drone. Previously if a UDP message had not arrived, a <code>KeyError</code> exception would have been raised.</p> <pre><code># Previously\nprint(my_drone.pose) # If no state message has been received yet this could throw a KeyError\n\n# Updated\nprint(my_drone.pose) # This will now print \"None\" if no AttitudeTel-message has been received.\n</code></pre>"},{"location":"migrating-to-v2/#new-initialization-parameters-to-the-drone-object","title":"New initialization parameters to the <code>Drone</code> object","text":"<p>The <code>AutoConnect</code> parameter has been renamed to <code>auto_connect</code> for consistency and clarity. <pre><code># Previously\nmy_drone = Drone(AutoConnect = False)\n\n# Updated\nmy_drone = Drone(auto_connect = False)\n</code></pre></p> <p>The <code>udpTimeout</code> parameter has been renamed to <code>timeout</code> for consistency and clarity. <pre><code># Previously\nmy_drone = Drone(udpTimeout = 5)\n\n# Updated\nmy_drone = Drone(timeout = 5)\n</code></pre></p>"},{"location":"nmea-publisher/","title":"NMEA Position Publisher","text":"<p>This example shows how one can use the blueye.sdk to forward position messages from the drone as NMEA 0183 messages, eg. to use in a chart plotter on a boat, etc.</p> <p>The script performs the following steps:</p> <ol> <li>UDP Configuration: Sets up the UDP IP and port for sending NMEA messages. If your receiver expects to receive data on a different port you need to change it here</li> <li>Drone Connection: Establishes a connection to the Blueye drone.</li> <li>Callback Registration: Registers a callback function to handle position estimate telemetry messages.</li> <li>Main Loop: Keeps the script running to continuously receive and send messages.</li> </ol> <pre><code>import datetime\nimport socket\nimport time\nimport blueye.protocol as bp\nfrom blueye.sdk import Drone\n\n\ndef nmea_sentence(lat: float, lon: float, valid: bool) -&gt; str:\n    \"\"\"Generate an NMEA 0183 sentence for the given latitude and longitude.\"\"\"\n    lat_deg = int(lat)\n    lat_min = (lat - lat_deg) * 60\n    lon_deg = int(lon)\n    lon_min = (lon - lon_deg) * 60\n\n    lat_hemisphere = \"N\" if lat &gt;= 0 else \"S\"\n    lon_hemisphere = \"E\" if lon &gt;= 0 else \"W\"\n    is_valid = \"A\" if valid else \"V\"\n\n    # Get current UTC time with fractional seconds\n    now = datetime.datetime.now(datetime.timezone.utc)\n    utc_time = now.strftime(\"%H%M%S\") + f\".{now.microsecond // 10000:02d}\"\n\n    return (\n        f\"GPGLL,{lat_deg:02d}{lat_min:07.4f},{lat_hemisphere},\"\n        f\"{lon_deg:03d}{lon_min:07.4f},{lon_hemisphere},\"\n        f\"{utc_time},{is_valid}\"\n    )\n\n\ndef callback_position_estimate(\n    msg_type: str, msg: bp.PositionEstimateTel, udp_socket: socket.socket\n):\n    \"\"\"Callback for the PositionEstimateTel message.\"\"\"\n    position_estimate = msg.position_estimate\n    lat = position_estimate.global_position.latitude\n    lon = position_estimate.global_position.longitude\n    is_valid = position_estimate.is_valid\n    nmea_msg = nmea_sentence(lat, lon, is_valid)\n    udp_socket.sendto(nmea_msg.encode(\"utf-8\"), (UDP_IP, UDP_PORT))\n    print(f\"Sent NMEA message: {nmea_msg}\")\n\n\nif __name__ == \"__main__\":\n    # UDP configuration\n    # This IP will broadcast to all devices in the 192.168.1 subnet\n    UDP_IP = \"192.168.1.255\"\n    # 10110 is the most commonly used port for NMEA, but the drone expects to receive its own\n    # position on this port, so if we reuse it the position will be sent in a loop.\n    UDP_PORT = 10111\n\n    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)  # Enable broadcasting\n\n    # Instantiate a drone object\n    my_drone = Drone(connect_as_observer=True)\n\n    # Add a callback for the PositionEstimateTel message\n    callback_id = my_drone.telemetry.add_msg_callback(\n        [bp.PositionEstimateTel], callback_position_estimate, udp_socket=udp_socket\n    )\n\n    # Keep the script running to receive and send messages\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        print(\"Exiting...\")\n    finally:\n        # Cleanup\n        my_drone.disconnect()\n        udp_socket.close()\n</code></pre>"},{"location":"peripherals/","title":"Peripherals","text":"<p>The <code>Drone</code> class maintains a list of peripherals that are attached to the drone. These peripherals can include cameras, grippers, and other devices that can be controlled using the drone's API.</p> <p>To list the peripherals that are currently attached to the drone, you can check the <code>peripherals</code> attribute of the <code>Drone</code> class. This attribute is a list of <code>Peripheral</code> objects.</p> <p>The SDK will also create attributes for supported peripherals to simplify access.</p>"},{"location":"peripherals/#external-camera","title":"External camera","text":"<p>If the drone has a camera attached, the <code>Drone</code> class will have an <code>external_camera</code> attribute that is a <code>GuestPortCamera</code> object. This object can be used to control the camera.</p> <pre><code># Capture an image from the external camera\ndrone.external_camera.take_picture()\n\n# Set bitrate for external camera to 2 Mbps\ndrone.external_camera.bitrate = 2_000_000\n\n# Start recording video from the external camera\ndrone.external_camera.is_recording = True\n</code></pre>"},{"location":"peripherals/#external-light","title":"External light","text":"<p>If the drone has an external light attached, the <code>Drone</code> class will have an <code>external_light</code> attribute that is a <code>GuestPortLight</code> object. This object can be used to control the light.</p> <pre><code># Get the current intensity of the external light\nintensity: float = drone.external_light.get_intensity()\n\n# Set the intensity of the external light to 0.5\ndrone.external_light.set_intensity(0.5)\n</code></pre>"},{"location":"peripherals/#scaling-laser","title":"Scaling laser","text":"<p>If the drone has a scaling laser attached, the <code>Drone</code> class will have a <code>laser</code> attribute that is a <code>Laser</code> object. This object can be used to control the scaling laser.</p> <pre><code># Get the current intensity of the scaling laser\nintensity: float = drone.laser.get_intensity()\n\n# Set the intensity of the scaling laser to 0.5\ndrone.laser.set_intensity(0.5)\n</code></pre>"},{"location":"peripherals/#gripper","title":"Gripper","text":"<p>If the drone has a gripper attached, the <code>Drone</code> class will have a <code>gripper</code> attribute that is a <code>Gripper</code> object. This object can be used to control the grip and rotation of the gripper.</p> <p>If the connected gripper does not support rotation, the <code>rotation_velocity</code> property will be ignored.</p> <pre><code># Open the gripper\ndrone.gripper.grip_velocity = 1.0\n\n# Close the gripper\ndrone.gripper.grip_velocity = -1.0\n\n# Rotate the gripper clockwise\ndrone.gripper.rotation_velocity = 1.0\n\n# Rotate the gripper counterclockwise\ndrone.gripper.rotation_velocity = -1.0\n</code></pre>"},{"location":"protobuf-protocol/","title":"Protocol Documentation","text":""},{"location":"protobuf-protocol/#aquatrollproto","title":"aquatroll.proto","text":"<p>Aquatroll</p> <p>These messages are emitted by the In-Situ AquaTroll 500 probe.</p> <p></p>"},{"location":"protobuf-protocol/#aquatrollparameterblock","title":"AquaTrollParameterBlock","text":"<p>In-Situ Parameter Block</p> <p>Up to NUMBER_OF_SENSOR_PARAMETERS blocks may be part of a sensor</p> Field Type Label Description measured_value float parameter_id AquaTrollParameter units_id AquaTrollUnit data_quality_ids AquaTrollQuality repeated off_line_sentinel_value float available_units AquaTrollUnit repeated <p></p>"},{"location":"protobuf-protocol/#aquatrollprobemetadata","title":"AquaTrollProbeMetadata","text":"Field Type Label Description timestamp google.protobuf.Timestamp status bool register_map_template_version uint32 device_id AquaTrollDevice device_serial_number uint32 manufacture_date google.protobuf.Timestamp firmware_version uint32 boot_code_version uint32 hardware_version uint32 max_data_logs uint32 total_data_log_memory uint32 total_battery_ticks uint32 last_battery_change google.protobuf.Timestamp device_name string site_name string latitude_coordinate double longitude_coordinate double altitude_coordinate double current_time_utc google.protobuf.Timestamp device_status_flags AquaTrollDeviceStatus repeated used_battery_ticks uint32 used_data_log_memory uint32 sensors AquaTrollSensor repeated"},{"location":"protobuf-protocol/#aquatrollsensormetadata","title":"AquaTrollSensorMetadata","text":"<p>In-Situ AquaTroll 500 sensor metadata</p> <p>(Mostly) static information about a connected sensor.</p> <p>Refer to Section 7 Sensor Common Registers in the In-Situ Modbus Communication Protocol</p> Field Type Label Description timestamp google.protobuf.Timestamp sensor_id AquaTrollSensor sensor_serial_number uint32 sensor_status_flags AquaTrollSensorStatus repeated last_factory_calibration google.protobuf.Timestamp next_factory_calibration google.protobuf.Timestamp last_user_calibration google.protobuf.Timestamp next_user_calibration google.protobuf.Timestamp warm_up_time_in_milliseconds uint32 fast_sample_rate_in_milliseconds uint32 number_of_sensor_parameters uint32 alarm_and_warning_parameter_number uint32 alarm_and_warning_enable_bits uint32 high_alarm_set_value float high_alarm_clear_value float high_warning_set_value float high_warning_clear_value float low_warning_clear_value float low_warning_set_value float low_alarm_clear_value float low_alarm_set_value float parameter_blocks AquaTrollParameterBlock repeated <p></p>"},{"location":"protobuf-protocol/#aquatrollsensormetadataarray","title":"AquaTrollSensorMetadataArray","text":"Field Type Label Description timestamp google.protobuf.Timestamp sensors AquaTrollSensorMetadata repeated"},{"location":"protobuf-protocol/#aquatrollsensorparameters","title":"AquaTrollSensorParameters","text":"Field Type Label Description sensor_id AquaTrollSensor parameter_blocks AquaTrollParameterBlock repeated"},{"location":"protobuf-protocol/#aquatrollsensorparametersarray","title":"AquaTrollSensorParametersArray","text":"Field Type Label Description timestamp google.protobuf.Timestamp sensors AquaTrollSensorParameters repeated"},{"location":"protobuf-protocol/#setaquatrollconnectionstatus","title":"SetAquaTrollConnectionStatus","text":"<p>Request to change the In-Situ Aqua Troll connection status</p> Field Type Label Description connected bool True to connect, false to disconnect <p></p>"},{"location":"protobuf-protocol/#setaquatrollparameterunit","title":"SetAquaTrollParameterUnit","text":"<p>Request to set an In-Situ Aqua Troll parameter unit</p> Field Type Label Description sensor_id AquaTrollSensor Sensor id, f. ex. \"SENSOR_CONDUCTIVITY_SENSOR\" parameter_id AquaTrollParameter Parameter name, f. ex. \"PARAMETER_TEMPERATURE\" unit_id AquaTrollUnit Unit, f. ex. \"UNIT_TEMP_CELSIUS\" <p></p>"},{"location":"protobuf-protocol/#aquatrolldevice","title":"AquaTrollDevice","text":"<p>Aqua Troll Device IDs</p> Name Number Description AQUA_TROLL_DEVICE_UNSPECIFIED 0 AQUA_TROLL_DEVICE_LEVEL_TROLL_500 1 AQUA_TROLL_DEVICE_LEVEL_TROLL_700 2 AQUA_TROLL_DEVICE_BAROTROLL_500 3 AQUA_TROLL_DEVICE_LEVEL_TROLL_300 4 AQUA_TROLL_DEVICE_AQUA_TROLL_200 5 AQUA_TROLL_DEVICE_AQUA_TROLL_600 7 AQUA_TROLL_DEVICE_AQUA_TROLL_100 10 AQUA_TROLL_DEVICE_FLOW_TROLL_500 11 AQUA_TROLL_DEVICE_RDO_PRO 12 AQUA_TROLL_DEVICE_RUGGED_TROLL_200 16 AQUA_TROLL_DEVICE_RUGGED_BAROTROLL 17 AQUA_TROLL_DEVICE_AQUA_TROLL_400 18 AQUA_TROLL_DEVICE_RDO_TITAN 19 AQUA_TROLL_DEVICE_SMARTROLL 21 AQUA_TROLL_DEVICE_AQUA_TROLL_600_VENTED 26 AQUA_TROLL_DEVICE_LEVEL_TROLL_400 30 AQUA_TROLL_DEVICE_RDO_PRO_X 31 AQUA_TROLL_DEVICE_AQUA_TROLL_500 33 AQUA_TROLL_DEVICE_AQUA_TROLL_500_VENTED 34 <p></p>"},{"location":"protobuf-protocol/#aquatrolldevicestatus","title":"AquaTrollDeviceStatus","text":"<p>Aqua Troll Device Status IDs</p> Name Number Description AQUA_TROLL_DEVICE_STATUS_SENSOR_HIGH_ALARM 0 protolint:disable:this ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH AQUA_TROLL_DEVICE_STATUS_SENSOR_HIGH_WARNING 1 AQUA_TROLL_DEVICE_STATUS_SENSOR_LOW_WARNING 2 AQUA_TROLL_DEVICE_STATUS_SENSOR_LOW_ALARM 3 AQUA_TROLL_DEVICE_STATUS_SENSOR_CALIBRATION_WARNING 4 AQUA_TROLL_DEVICE_STATUS_SENSOR_MALFUNCTION 5 AQUA_TROLL_DEVICE_STATUS_POWER_MANAGEMENT_DISABLED 8 AQUA_TROLL_DEVICE_STATUS_DEVICE_OFF_LINE 9 AQUA_TROLL_DEVICE_STATUS_DEVICE_HARDWARE_RESET_OCCURRED 10 AQUA_TROLL_DEVICE_STATUS_DEVICE_MALFUNCTION 11 AQUA_TROLL_DEVICE_STATUS_NO_EXTERNAL_POWER 12 AQUA_TROLL_DEVICE_STATUS_LOW_BATTERY 13 AQUA_TROLL_DEVICE_STATUS_LOW_MEMORY 14 <p></p>"},{"location":"protobuf-protocol/#aquatrollparameter","title":"AquaTrollParameter","text":"<p>Aqua Troll Parameter IDs</p> Name Number Description AQUA_TROLL_PARAMETER_UNSPECIFIED 0 AQUA_TROLL_PARAMETER_TEMPERATURE 1 AQUA_TROLL_PARAMETER_PRESSURE 2 AQUA_TROLL_PARAMETER_DEPTH 3 AQUA_TROLL_PARAMETER_LEVEL_DEPTH_TO_WATER 4 AQUA_TROLL_PARAMETER_LEVEL_SURFACE_ELEVATION 5 AQUA_TROLL_PARAMETER_LATITUDE 6 AQUA_TROLL_PARAMETER_LONGITUDE 7 AQUA_TROLL_PARAMETER_ELEVATION 8 AQUA_TROLL_PARAMETER_ACTUAL_CONDUCTIVITY 9 AQUA_TROLL_PARAMETER_SPECIFIC_CONDUCTIVITY 10 AQUA_TROLL_PARAMETER_RESISTIVITY 11 AQUA_TROLL_PARAMETER_SALINITY 12 AQUA_TROLL_PARAMETER_TOTAL_DISSOLVED_SOLIDS 13 AQUA_TROLL_PARAMETER_DENSITY_OF_WATER 14 AQUA_TROLL_PARAMETER_SPECIFIC_GRAVITY 15 AQUA_TROLL_PARAMETER_BAROMETRIC_PRESSURE 16 AQUA_TROLL_PARAMETER_PH 17 AQUA_TROLL_PARAMETER_PH_MV 18 AQUA_TROLL_PARAMETER_ORP 19 AQUA_TROLL_PARAMETER_DISSOLVED_OXYGEN_CONCENTRATION 20 AQUA_TROLL_PARAMETER_DISSOLVED_OXYGEN_SATURATION 21 AQUA_TROLL_PARAMETER_NITRATE 22 AQUA_TROLL_PARAMETER_AMMONIUM 23 AQUA_TROLL_PARAMETER_CHLORIDE 24 AQUA_TROLL_PARAMETER_TURBIDITY 25 AQUA_TROLL_PARAMETER_BATTERY_VOLTAGE 26 AQUA_TROLL_PARAMETER_HEAD 27 AQUA_TROLL_PARAMETER_FLOW 28 AQUA_TROLL_PARAMETER_TOTAL_FLOW 29 AQUA_TROLL_PARAMETER_OXYGEN_PARTIAL_PRESSURE 30 AQUA_TROLL_PARAMETER_TOTAL_SUSPENDED_SOLIDS 31 AQUA_TROLL_PARAMETER_EXTERNAL_VOLTAGE 32 AQUA_TROLL_PARAMETER_BATTERY_CAPACITY_REMAINING 33 AQUA_TROLL_PARAMETER_RHODAMINE_WT_CONCENTRATION 34 AQUA_TROLL_PARAMETER_RHODAMINE_WT_FLUORESCENCE_INTENSITY 35 AQUA_TROLL_PARAMETER_CHLORIDE_CL_MV 36 AQUA_TROLL_PARAMETER_NITRATE_AS_NITROGEN_NO3_N_CONCENTRATION 37 AQUA_TROLL_PARAMETER_NITRATE_NO3_MV 38 AQUA_TROLL_PARAMETER_AMMONIUM_AS_NITROGEN_NH4_PLUS_N_CONCENTRATION 39 AQUA_TROLL_PARAMETER_AMMONIUM_NH4_MV 40 AQUA_TROLL_PARAMETER_AMMONIA_AS_NITROGEN_NH3_N_CONCENTRATION 41 AQUA_TROLL_PARAMETER_TOTAL_AMMONIA_AS_NITROGEN_NH3_N_CONCENTRATION 42 AQUA_TROLL_PARAMETER_EH 48 AQUA_TROLL_PARAMETER_VELOCITY 49 AQUA_TROLL_PARAMETER_CHLOROPHYLL_A_CONCENTRATION 50 AQUA_TROLL_PARAMETER_CHLOROPHYLL_A_FLUORESCENCE_INTENSITY 51 AQUA_TROLL_PARAMETER_BLUE_GREEN_ALGAE_PHYCOCYANIN_CONCENTRATION 54 AQUA_TROLL_PARAMETER_BLUE_GREEN_ALGAE_PHYCOCYANIN_FLUORESCENCE_INTENSITY 55 AQUA_TROLL_PARAMETER_BLUE_GREEN_ALGAE_PHYCOERYTHRIN_CONCENTRATION 58 AQUA_TROLL_PARAMETER_BLUE_GREEN_ALGAE_PHYCOERYTHRIN_FLUORESCENCE_INTENSITY 59 AQUA_TROLL_PARAMETER_FLUORESCEIN_WT_CONCENTRATION 67 AQUA_TROLL_PARAMETER_FLUORESCEIN_WT_FLUORESCENCE_INTENSITY 68 AQUA_TROLL_PARAMETER_FLUORESCENT_DISSOLVED_ORGANIC_MATTER_CONCENTRATION 69 AQUA_TROLL_PARAMETER_FLUORESCENT_DISSOLVED_ORGANIC_MATTER_FLUORESCENCE_INTENSITY 70 AQUA_TROLL_PARAMETER_CRUDE_OIL_CONCENTRATION 80 AQUA_TROLL_PARAMETER_CRUDE_OIL_FLUORESCENCE_INTENSITY 81 AQUA_TROLL_PARAMETER_COLORED_DISSOLVED_ORGANIC_MATTER_CONCENTRATION 87 <p></p>"},{"location":"protobuf-protocol/#aquatrollquality","title":"AquaTrollQuality","text":"<p>Aqua Troll Quality IDs</p> Name Number Description AQUA_TROLL_QUALITY_NORMAL 0 protolint:disable:this ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH AQUA_TROLL_QUALITY_USER_CAL_EXPIRED 1 AQUA_TROLL_QUALITY_FACTORY_CAL_EXPIRED 2 AQUA_TROLL_QUALITY_ERROR 3 AQUA_TROLL_QUALITY_WARM_UP 4 AQUA_TROLL_QUALITY_SENSOR_WARNING 5 AQUA_TROLL_QUALITY_CALIBRATING 6 AQUA_TROLL_QUALITY_OFF_LINE 7 <p></p>"},{"location":"protobuf-protocol/#aquatrollsensor","title":"AquaTrollSensor","text":"<p>Aqua Troll Sensor IDs</p> Name Number Description AQUA_TROLL_SENSOR_UNSPECIFIED 0 AQUA_TROLL_SENSOR_TEMPERATURE 1 AQUA_TROLL_SENSOR_S5_PSI_FULL_SCALE_GAUGE_PRESSURE_WITH_LEVEL_AND_TEMPERATURE 2 AQUA_TROLL_SENSOR_S15_PSI_FULL_SCALE_GAUGE_PRESSURE_WITH_LEVEL_AND_TEMPERATURE 3 AQUA_TROLL_SENSOR_S30_PSI_FULL_SCALE_GAUGE_PRESSURE_WITH_LEVEL_AND_TEMPERATURE 4 AQUA_TROLL_SENSOR_S100_PSI_FULL_SCALE_GAUGE_PRESSURE_WITH_LEVEL_AND_TEMPERATURE 5 AQUA_TROLL_SENSOR_S300_PSI_FULL_SCALE_GAUGE_PRESSURE_WITH_LEVEL_AND_TEMPERATURE 6 AQUA_TROLL_SENSOR_S500_PSI_FULL_SCALE_GAUGE_PRESSURE_WITH_LEVEL_AND_TEMPERATURE 7 AQUA_TROLL_SENSOR_S1000_PSI_FULL_SCALE_ABSOLUTE_PRESSURE_WITH_LEVEL_AND_TEMPERATURE 8 AQUA_TROLL_SENSOR_S30_PSI_FULL_SCALE_ABSOLUTE_PRESSURE_WITH_LEVEL_AND_TEMPERATURE 9 AQUA_TROLL_SENSOR_S100_PSI_FULL_SCALE_ABSOLUTE_PRESSURE_WITH_LEVEL_AND_TEMPERATURE 10 AQUA_TROLL_SENSOR_S300_PSI_FULL_SCALE_ABSOLUTE_PRESSURE_WITH_LEVEL_AND_TEMPERATURE 11 AQUA_TROLL_SENSOR_S500_PSI_FULL_SCALE_ABSOLUTE_PRESSURE_WITH_LEVEL_AND_TEMPERATURE 12 AQUA_TROLL_SENSOR_S30_PSI_FULL_SCALE_ABSOLUTE_PRESSURE_WITH_TEMPERATURE 13 AQUA_TROLL_SENSOR_S5_PSI_FULL_SCALE_GAUGE_PRESSURE_WITH_LEVEL_TEMPERATURE_AND_CONDUCTIVITY 14 AQUA_TROLL_SENSOR_S15_PSI_FULL_SCALE_GAUGE_PRESSURE_WITH_LEVEL_TEMPERATURE_AND_CONDUCTIVITY 15 AQUA_TROLL_SENSOR_S30_PSI_FULL_SCALE_GAUGE_PRESSURE_WITH_LEVEL_TEMPERATURE_AND_CONDUCTIVITY 16 AQUA_TROLL_SENSOR_S100_PSI_FULL_SCALE_GAUGE_PRESSURE_WITH_LEVEL_TEMPERATURE_AND_CONDUCTIVITY 17 AQUA_TROLL_SENSOR_S300_PSI_FULL_SCALE_GAUGE_PRESSURE_WITH_LEVEL_TEMPERATURE_AND_CONDUCTIVITY 18 AQUA_TROLL_SENSOR_S500_PSI_FULL_SCALE_GAUGE_PRESSURE_WITH_LEVEL_TEMPERATURE_AND_CONDUCTIVITY 19 AQUA_TROLL_SENSOR_NOT_USED 20 AQUA_TROLL_SENSOR_S30_PSI_FULL_SCALE_ABSOLUTE_PRESSURE_WITH_LEVEL_TEMPERATURE_AND_CONDUCTIVITY 21 AQUA_TROLL_SENSOR_S100_PSI_FULL_SCALE_ABSOLUTE_PRESSURE_WITH_LEVEL_TEMPERATURE_AND_CONDUCTIVITY 22 AQUA_TROLL_SENSOR_S300_PSI_FULL_SCALE_ABSOLUTE_PRESSURE_WITH_LEVEL_TEMPERATURE_AND_CONDUCTIVITY 23 AQUA_TROLL_SENSOR_S500_PSI_FULL_SCALE_ABSOLUTE_PRESSURE_WITH_LEVEL_TEMPERATURE_AND_CONDUCTIVITY 24 AQUA_TROLL_SENSOR_S165_PSI_FULL_SCALE_ABSOLUTE_PRESSURE 25 AQUA_TROLL_SENSOR_PH_ANALOG_SENSOR 26 AQUA_TROLL_SENSOR_PH_ORP_ANALOG_SENSOR 27 AQUA_TROLL_SENSOR_DISSOLVED_OXYGEN_CLARK_CELL_ANALOG_SENSOR 28 AQUA_TROLL_SENSOR_NITRATE_ANALOG_SENSOR 29 AQUA_TROLL_SENSOR_AMMONIUM_ANALOG_SENSOR 30 AQUA_TROLL_SENSOR_CHLORIDE_ANALOG_SENSOR 31 AQUA_TROLL_SENSOR_S100_FOOT_FULL_SCALE_LEVEL_WITH_ABSOLUTE_PRESSURE_AND_TEMPERATURE 32 AQUA_TROLL_SENSOR_S250_FOOT_FULL_SCALE_LEVEL_WITH_ABSOLUTE_PRESSURE_AND_TEMPERATURE 33 AQUA_TROLL_SENSOR_S30_FOOT_FULL_SCALE_LEVEL_WITH_ABSOLUTE_PRESSURE_AND_TEMPERATURE 34 AQUA_TROLL_SENSOR_CONDUCTIVITY_AND_TEMPERATURE 35 AQUA_TROLL_SENSOR_S5_PSI_FULL_SCALE_GAUGE_PRESSURE_WITH_TEMPERATURE_HEAD_AND_FLOW 36 AQUA_TROLL_SENSOR_S15_PSI_FULL_SCALE_GAUGE_PRESSURE_WITH_TEMPERATURE_HEAD_AND_FLOW 37 AQUA_TROLL_SENSOR_S30_PSI_FULL_SCALE_GAUGE_PRESSURE_WITH_TEMPERATURE_HEAD_AND_FLOW 38 AQUA_TROLL_SENSOR_S100_PSI_FULL_SCALE_GAUGE_PRESSURE_WITH_TEMPERATURE_HEAD_AND_FLOW 39 AQUA_TROLL_SENSOR_S300_PSI_FULL_SCALE_GAUGE_PRESSURE_WITH_TEMPERATURE_HEAD_AND_FLOW 40 AQUA_TROLL_SENSOR_S500_PSI_FULL_SCALE_GAUGE_PRESSURE_WITH_TEMPERATURE_HEAD_AND_FLOW 41 AQUA_TROLL_SENSOR_OPTICAL_DISSOLVED_OXYGEN_WITH_TEMPERATURE 42 AQUA_TROLL_SENSOR_S1_BAR 43 AQUA_TROLL_SENSOR_S2_BAR 44 AQUA_TROLL_SENSOR_S5_BAR 45 AQUA_TROLL_SENSOR_TURBIDITY_SENSOR 50 AQUA_TROLL_SENSOR_TEMPERATURE_SENSOR 55 AQUA_TROLL_SENSOR_CONDUCTIVITY_SENSOR 56 AQUA_TROLL_SENSOR_RDO_SENSOR 57 AQUA_TROLL_SENSOR_PH_ORP_SENSOR 58 AQUA_TROLL_SENSOR_RHODAMINE_WT_SENSOR 60 AQUA_TROLL_SENSOR_CHLOROPHYLL_A_SENSOR 62 AQUA_TROLL_SENSOR_BLUE_GREEN_ALGAE_PHYCOCYANIN_SENSOR 64 AQUA_TROLL_SENSOR_BLUE_GREEN_ALGAE_PHYCOERYTHRIN_SENSOR 65 AQUA_TROLL_SENSOR_NITRATE_ISE_SENSOR 70 AQUA_TROLL_SENSOR_AMMONIUM_ISE_SENSOR 71 AQUA_TROLL_SENSOR_CHLORIDE_ISE_SENSOR 72 AQUA_TROLL_SENSOR_PROBE_PARAMETERS 79 <p></p>"},{"location":"protobuf-protocol/#aquatrollsensorstatus","title":"AquaTrollSensorStatus","text":"<p>Aqua Troll Sensor Status IDs</p> Name Number Description AQUA_TROLL_SENSOR_STATUS_SENSOR_HIGH_ALARM 0 protolint:disable:this ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH AQUA_TROLL_SENSOR_STATUS_SENSOR_HIGH_WARNING 1 AQUA_TROLL_SENSOR_STATUS_SENSOR_LOW_WARNING 2 AQUA_TROLL_SENSOR_STATUS_SENSOR_LOW_ALARM 3 AQUA_TROLL_SENSOR_STATUS_SENSOR_CALIBRATION_WARNING 4 AQUA_TROLL_SENSOR_STATUS_SENSOR_MALFUNCTION 5 AQUA_TROLL_SENSOR_STATUS_SENSOR_MODE_BIT_1 8 AQUA_TROLL_SENSOR_STATUS_SENSOR_MODE_BIT_2 9 <p></p>"},{"location":"protobuf-protocol/#aquatrollunit","title":"AquaTrollUnit","text":"<p>Aqua Troll Unit IDs</p> Name Number Description AQUA_TROLL_UNIT_UNSPECIFIED 0 AQUA_TROLL_UNIT_TEMP_CELSIUS 1 AQUA_TROLL_UNIT_TEMP_FARENHEIT 2 AQUA_TROLL_UNIT_TEMP_KELVIN 3 AQUA_TROLL_UNIT_POUNDS_PER_SQUARE_INCH 17 AQUA_TROLL_UNIT_PASCALS 18 AQUA_TROLL_UNIT_KILOPASCALS 19 AQUA_TROLL_UNIT_BARS 20 AQUA_TROLL_UNIT_MILLIBARS 21 AQUA_TROLL_UNIT_MILLIMETERS_OF_MERCURY 22 AQUA_TROLL_UNIT_INCHES_OF_MERCURY 23 AQUA_TROLL_UNIT_CENTIMETERS_OF_WATER 24 AQUA_TROLL_UNIT_INCHES_OF_WATER 25 AQUA_TROLL_UNIT_TORR 26 AQUA_TROLL_UNIT_STANDARD_ATMOSPHERE 27 AQUA_TROLL_UNIT_MILLIMETERS 33 AQUA_TROLL_UNIT_CENTIMETERS 34 AQUA_TROLL_UNIT_METERS 35 AQUA_TROLL_UNIT_KILOMETER 36 AQUA_TROLL_UNIT_INCHES 37 AQUA_TROLL_UNIT_FEET 38 AQUA_TROLL_UNIT_DEGREES 49 AQUA_TROLL_UNIT_MINUTES 50 AQUA_TROLL_UNIT_SECONDS 51 AQUA_TROLL_UNIT_MICROSIEMENS_PER_CENTIMETER 65 AQUA_TROLL_UNIT_MILLISIEMENS_PER_CENTIMETER 66 AQUA_TROLL_UNIT_OHM_CENTIMETERS 81 AQUA_TROLL_UNIT_PRACTICAL_SALINITY_UNITS 97 AQUA_TROLL_UNIT_PARTS_PER_THOUSAND_SALINITY 98 AQUA_TROLL_UNIT_PARTS_PER_MILLION 113 AQUA_TROLL_UNIT_PARTS_PER_THOUSAND 114 AQUA_TROLL_UNIT_PARTS_PER_MILLION_NITROGEN 115 AQUA_TROLL_UNIT_PARTS_PER_MILLION_CHLORIDE 116 AQUA_TROLL_UNIT_MILLIGRAMS_PER_LITER 117 AQUA_TROLL_UNIT_MICROGRAMS_PER_LITER 118 AQUA_TROLL_UNIT_MICROMOLES_PER_LITER_DEPRECATED 119 AQUA_TROLL_UNIT_GRAMS_PER_LITER 120 AQUA_TROLL_UNIT_PARTS_PER_BILLION 121 AQUA_TROLL_UNIT_GRAMS_PER_CUBIC_CENTIMETER 129 AQUA_TROLL_UNIT_PH 145 AQUA_TROLL_UNIT_MICRO_VOLTS 161 AQUA_TROLL_UNIT_MILLI_VOLTS 162 AQUA_TROLL_UNIT_VOLTS 163 AQUA_TROLL_UNIT_PERCENT_SATURATION 177 AQUA_TROLL_UNIT_FORMAZIN_NEPHELOMETRIC_UNITS 193 AQUA_TROLL_UNIT_NEPHELOMETRIC_TURBIDITY_UNITS 194 AQUA_TROLL_UNIT_FORMAZIN_TURBIDITY_UNITS 195 AQUA_TROLL_UNIT_CUBIC_FEET_PER_SECOND 209 AQUA_TROLL_UNIT_CUBIC_FEET_PER_MINUTE 210 AQUA_TROLL_UNIT_CUBIC_FEET_PER_HOUR 211 AQUA_TROLL_UNIT_CUBIC_FEET_PER_DAY 212 AQUA_TROLL_UNIT_GALLONS_PER_SECOND 213 AQUA_TROLL_UNIT_GALLONS_PER_MINUTE 214 AQUA_TROLL_UNIT_GALLONS_PER_HOUR 215 AQUA_TROLL_UNIT_MILLIONS_OF_GALLONS_PER_DAY 216 AQUA_TROLL_UNIT_CUBIC_METERS_PER_SECOND 217 AQUA_TROLL_UNIT_CUBIC_METERS_PER_MINUTE 218 AQUA_TROLL_UNIT_CUBIC_METERS_PER_HOUR 219 AQUA_TROLL_UNIT_CUBIC_METERS_PER_DAY 220 AQUA_TROLL_UNIT_LITERS_PER_SECOND 221 AQUA_TROLL_UNIT_MILLIONS_OF_LITERS_PER_DAY 222 AQUA_TROLL_UNIT_MILLILITERS_PER_MINUTE 223 AQUA_TROLL_UNIT_THOUSANDS_OF_LITERS_PER_DAY 224 AQUA_TROLL_UNIT_CUBIC_FEET 225 AQUA_TROLL_UNIT_GALLONS 226 AQUA_TROLL_UNIT_MILLIONS_OF_GALLONS 227 AQUA_TROLL_UNIT_CUBIC_METERS 228 AQUA_TROLL_UNIT_LITERS 229 AQUA_TROLL_UNIT_ACRE_FEET 230 AQUA_TROLL_UNIT_MILLILITERS 231 AQUA_TROLL_UNIT_MILLIONS_OF_LITERS 232 AQUA_TROLL_UNIT_THOUSANDS_OF_LITERS 233 AQUA_TROLL_UNIT_ACRE_INCHES 234 AQUA_TROLL_UNIT_PERCENT 241 AQUA_TROLL_UNIT_RELATIVE_FLUORESCENCE_UNITS 257 AQUA_TROLL_UNIT_MILLILITERS_PER_SECOND 273 AQUA_TROLL_UNIT_MILLILITERS_PER_HOUR 274 AQUA_TROLL_UNIT_LITERS_PER_MINUTE 275 AQUA_TROLL_UNIT_LITERS_PER_HOUR 276 AQUA_TROLL_UNIT_MICROAMPS 289 AQUA_TROLL_UNIT_MILLIAMPS 290 AQUA_TROLL_UNIT_AMPS 291 AQUA_TROLL_UNIT_FEET_PER_SECOND 305 AQUA_TROLL_UNIT_METERS_PER_SECOND 306 <p></p>"},{"location":"protobuf-protocol/#type","title":"Type","text":"<p>Type IDs</p> Name Number Description TYPE_UNSPECIFIED 0 TYPE_SHORT 1 TYPE_UNSIGNED_SHORT 2 TYPE_LONG 3 TYPE_UNSIGNED_LONG 4 TYPE_FLOAT 5 TYPE_DOUBLE 6 TYPE_CHARACTER 7 TYPE_STRING 8 TYPE_TIME 9 <p></p> <p>Top</p>"},{"location":"protobuf-protocol/#controlproto","title":"control.proto","text":"<p>Control</p> <p>These messages define control messages accepted by the Blueye drone.</p> <p></p>"},{"location":"protobuf-protocol/#activateguestportsctrl","title":"ActivateGuestPortsCtrl","text":"<p>Activated the guest port power</p> <p></p>"},{"location":"protobuf-protocol/#autoaltitudectrl","title":"AutoAltitudeCtrl","text":"<p>Issue a command to set auto altitude to a desired state.</p> Field Type Label Description state AutoAltitudeState State of the altitude controller <p></p>"},{"location":"protobuf-protocol/#autodepthctrl","title":"AutoDepthCtrl","text":"<p>Issue a command to set auto depth to a desired state.</p> Field Type Label Description state AutoDepthState State of the depth controller <p></p>"},{"location":"protobuf-protocol/#autoheadingctrl","title":"AutoHeadingCtrl","text":"<p>Issue a command to set auto heading to a desired state.</p> Field Type Label Description state AutoHeadingState State of the heading controller <p></p>"},{"location":"protobuf-protocol/#autopilotheavectrl","title":"AutoPilotHeaveCtrl","text":"<p>Issue a command to set Auto Pilot for vertiacl movement to a desired state.</p> Field Type Label Description state AutoPilotHeaveState State of the auto pilot heave controller <p></p>"},{"location":"protobuf-protocol/#autopilotsurgeyawctrl","title":"AutoPilotSurgeYawCtrl","text":"<p>Issue a command to set Auto Pilot for cruising and turning to a desired state.</p> Field Type Label Description state AutoPilotSurgeYawState State of the auto pilot surge yaw controller <p></p>"},{"location":"protobuf-protocol/#calibratedvlgyroctrl","title":"CalibrateDvlGyroCtrl","text":"<p>Issue a command to calibrate the DVL gyro.</p> <p></p>"},{"location":"protobuf-protocol/#cancelcalibrationctrl","title":"CancelCalibrationCtrl","text":"<p>Issue a command to cancel compass calibration.</p> <p></p>"},{"location":"protobuf-protocol/#clearmissionctrl","title":"ClearMissionCtrl","text":"<p>Clear the loaded mission.</p> <p></p>"},{"location":"protobuf-protocol/#deactivateguestportsctrl","title":"DeactivateGuestPortsCtrl","text":"<p>Deactivate the guest port power</p> <p></p>"},{"location":"protobuf-protocol/#finishcalibrationctrl","title":"FinishCalibrationCtrl","text":"<p>Issue a command to finish compass calibration.</p> <p></p>"},{"location":"protobuf-protocol/#genericservoctrl","title":"GenericServoCtrl","text":"<p>Issue a command to set a generic servo value.</p> Field Type Label Description servo GenericServo Message with the desired servo value. <p></p>"},{"location":"protobuf-protocol/#gripperctrl","title":"GripperCtrl","text":"<p>Issue a command to control the gripper.</p> Field Type Label Description gripper_velocities GripperVelocities The desired gripping and rotation velocity. <p></p>"},{"location":"protobuf-protocol/#guestportlightsctrl","title":"GuestportLightsCtrl","text":"<p>Issue a command to set the guest port light intensity.</p> Field Type Label Description lights Lights Message with the desired light intensity. <p></p>"},{"location":"protobuf-protocol/#laserctrl","title":"LaserCtrl","text":"<p>Issue a command to set the laser intensity.</p> Field Type Label Description laser Laser Message with the desired laser intensity. <p></p>"},{"location":"protobuf-protocol/#lightsctrl","title":"LightsCtrl","text":"<p>Issue a command to set the main light intensity.</p> Field Type Label Description lights Lights Message with the desired light intensity. <p></p>"},{"location":"protobuf-protocol/#motioninputctrl","title":"MotionInputCtrl","text":"<p>Issue a command to move the drone in the surge, sway, heave, or yaw direction.</p> Field Type Label Description motion_input MotionInput Message with the desired movement in each direction. <p></p>"},{"location":"protobuf-protocol/#multibeamservoctrl","title":"MultibeamServoCtrl","text":"<p>Issue a command to set multibeam servo angle.</p> Field Type Label Description servo MultibeamServo Message with the desired servo angle. <p></p>"},{"location":"protobuf-protocol/#pausemissionctrl","title":"PauseMissionCtrl","text":"<p>Issue a command to pause the loaded mission.</p> <p></p>"},{"location":"protobuf-protocol/#pilotgpspositionctrl","title":"PilotGPSPositionCtrl","text":"<p>Issue a command with the GPS position of the pilot.</p> Field Type Label Description position LatLongPosition The GPS position of the pilot. <p></p>"},{"location":"protobuf-protocol/#pingerconfigurationctrl","title":"PingerConfigurationCtrl","text":"<p>Issue a command to set the pinger configuration.</p> Field Type Label Description configuration PingerConfiguration Message with the pinger configuration to set. <p></p>"},{"location":"protobuf-protocol/#recordctrl","title":"RecordCtrl","text":"<p>Issue a command to start video recording.</p> Field Type Label Description record_on RecordOn Message specifying which cameras to record. <p></p>"},{"location":"protobuf-protocol/#resetodometerctrl","title":"ResetOdometerCtrl","text":"<p>Issue a command to reset the odometer.</p> <p></p>"},{"location":"protobuf-protocol/#resetpositionctrl","title":"ResetPositionCtrl","text":"<p>Issue a command to reset the position estimate.</p> Field Type Label Description settings ResetPositionSettings Reset settings. <p></p>"},{"location":"protobuf-protocol/#restartguestportsctrl","title":"RestartGuestPortsCtrl","text":"<p>Restart the guest ports by turning power on and off</p> Field Type Label Description restart_info GuestPortRestartInfo Message with information about how long to keep the guest ports off. <p></p>"},{"location":"protobuf-protocol/#runmissionctrl","title":"RunMissionCtrl","text":"<p>Issue a command to start and pause the loaded mission.</p> <p></p>"},{"location":"protobuf-protocol/#setaquatrollconnectionstatusctrl","title":"SetAquaTrollConnectionStatusCtrl","text":"<p>Request to change the In-Situ Aqua Troll connection status</p> Field Type Label Description connection_status SetAquaTrollConnectionStatus Message with information about which parameter to set and the unit to set it to. <p></p>"},{"location":"protobuf-protocol/#setaquatrollparameterunitctrl","title":"SetAquaTrollParameterUnitCtrl","text":"<p>Request to set an In-Situ Aqua Troll parameter unit</p> Field Type Label Description parameter_info SetAquaTrollParameterUnit Message with information about which parameter to set and the unit to set it to. <p></p>"},{"location":"protobuf-protocol/#startcalibrationctrl","title":"StartCalibrationCtrl","text":"<p>Issue a command to start compass calibration.</p> <p></p>"},{"location":"protobuf-protocol/#stationkeepingctrl","title":"StationKeepingCtrl","text":"<p>Issue a command to set station keeping to a desired state.</p> Field Type Label Description state StationKeepingState State of the station keeping controller <p></p>"},{"location":"protobuf-protocol/#systemtimectrl","title":"SystemTimeCtrl","text":"<p>Issue a command to set the system time on the drone.</p> Field Type Label Description system_time SystemTime Message with the system time to set. <p></p>"},{"location":"protobuf-protocol/#takepicturectrl","title":"TakePictureCtrl","text":"<p>Issue a command to take a picture.</p> <p></p>"},{"location":"protobuf-protocol/#tiltstabilizationctrl","title":"TiltStabilizationCtrl","text":"<p>Issue a command to enable or disable tilt stabilization.</p> Field Type Label Description state TiltStabilizationState Message with the tilt stabilization state to set. <p></p>"},{"location":"protobuf-protocol/#tiltvelocityctrl","title":"TiltVelocityCtrl","text":"<p>Issue a command to tilt the drone camera.</p> Field Type Label Description velocity TiltVelocity Message with the desired tilt velocity (direction and speed). <p></p>"},{"location":"protobuf-protocol/#watchdogctrl","title":"WatchdogCtrl","text":"<p>Issue a watchdog message to indicate that the remote client is connected and working as expected.</p> <p>If a watchdog message is not received every second, the drone will turn off lights and other auto functions to indicate that connection with the client has been lost.</p> Field Type Label Description connection_duration ConnectionDuration Message with the number of seconds the client has been connected. client_id uint32 The ID of the client, received in the ConnectClientRep response. <p></p>"},{"location":"protobuf-protocol/#waterdensityctrl","title":"WaterDensityCtrl","text":"<p>Issue a command to set the water density.</p> Field Type Label Description density WaterDensity Message with the water density to set. <p></p>"},{"location":"protobuf-protocol/#weathervaningctrl","title":"WeatherVaningCtrl","text":"<p>Issue a command to set station keeping with weather vaning to a desired state.</p> Field Type Label Description state WeatherVaningState State of the weather vaning controller <p></p> <p>Top</p>"},{"location":"protobuf-protocol/#message_formatsproto","title":"message_formats.proto","text":"<p>Common messages</p> <p>These are used for logging as well as building requests and responses.</p> <p></p>"},{"location":"protobuf-protocol/#altitude","title":"Altitude","text":"<p>Drone altitude over seabed, typically obtained from a DVL.</p> Field Type Label Description value float Drone altitude over seabed (m) is_valid bool If altitude is valid or not <p></p>"},{"location":"protobuf-protocol/#attitude","title":"Attitude","text":"<p>The attitude of the drone.</p> Field Type Label Description roll float Roll angle (-180\u00b0..180\u00b0) pitch float Pitch angle (-180\u00b0..180\u00b0) yaw float Yaw angle (-180\u00b0..180\u00b0) <p></p>"},{"location":"protobuf-protocol/#autoaltitudestate","title":"AutoAltitudeState","text":"<p>Auto altitude state.</p> Field Type Label Description enabled bool If auto altitude is enabled <p></p>"},{"location":"protobuf-protocol/#autodepthstate","title":"AutoDepthState","text":"<p>Auto depth state.</p> Field Type Label Description enabled bool If auto depth is enabled <p></p>"},{"location":"protobuf-protocol/#autoheadingstate","title":"AutoHeadingState","text":"<p>Auto heading state.</p> Field Type Label Description enabled bool If auto heading is enabled <p></p>"},{"location":"protobuf-protocol/#autopilotheavestate","title":"AutoPilotHeaveState","text":"<p>Auto pilot heave state.</p> Field Type Label Description enabled bool If auto pilot heave is enabled <p></p>"},{"location":"protobuf-protocol/#autopilotsurgeyawstate","title":"AutoPilotSurgeYawState","text":"<p>Auto pilot surge yaw state.</p> Field Type Label Description enabled bool If auto pilot surge yaw is enabled <p></p>"},{"location":"protobuf-protocol/#battery","title":"Battery","text":"<p>Essential battery information.</p> Field Type Label Description voltage float Battery voltage (V) level float Battery level (0..1) temperature float Battery temperature (\u00b0C) <p></p>"},{"location":"protobuf-protocol/#batterybq40z50","title":"BatteryBQ40Z50","text":"<p>Battery information message.</p> <p>Detailed information about all aspects of the connected Blueye Smart Battery, using the BQ40Z50 BMS.</p> Field Type Label Description voltage BatteryBQ40Z50.Voltage Voltage of the battery cells temperature BatteryBQ40Z50.Temperature Temperature of the battery cells status BatteryBQ40Z50.BatteryStatus Battery status flags current float Measured current from the coulomb counter (A) average_current float Average current (A) relative_state_of_charge float Predicted remaining battery capacity as a factor of full_charge_capacity (0..1) absolute_state_of_charge float Predicted remaining battery capacity (0..1) calculated_state_of_charge float Calculated state of charge (0..1) remaining_capacity float Predicted remaining battery capacity (Ah) full_charge_capacity float Predicted battery capacity when fully charged (Ah) runtime_to_empty uint32 Predicted remaining battery capacity based on the present rate of discharge (s) average_time_to_empty uint32 Predicted remaining battery capacity based on average_current (s) average_time_to_full uint32 Predicted time-to-full charge based on average_current (s) charging_current float Desired charging current (A) charging_voltage float Desired charging voltage (V) cycle_count uint32 Number of charging cycles design_capacity float Design capacity (Ah) manufacture_date google.protobuf.Timestamp Manufacture date serial_number uint32 Serial number manufacturer_name string Manufacturer name device_name string Device name device_chemistry string Battery chemistry lifetimes BatteryBQ40Z50.BatteryLifetimes Battery lifetimes safety_events BatteryBQ40Z50.BatterySafetyEvents Battery safety events charging_events BatteryBQ40Z50.BatteryChargingEvents Battery charging events <p></p>"},{"location":"protobuf-protocol/#batterybq40z50batterychargingevents","title":"BatteryBQ40Z50.BatteryChargingEvents","text":"Field Type Label Description charge_termination_events_count uint32 Total number of valid charge termination events (events) charge_termination_last_event uint32 Last valid charge termination in cycle count cycles (cycles)"},{"location":"protobuf-protocol/#batterybq40z50batterylifetimes","title":"BatteryBQ40Z50.BatteryLifetimes","text":"Field Type Label Description max_cell_voltages BatteryBQ40Z50.BatteryLifetimes.CellVoltages Maximum reported cell voltages min_cell_voltages BatteryBQ40Z50.BatteryLifetimes.CellVoltages Minimum reported cell voltages max_delta_cell_voltage float Max delta between cells (V) max_charge_current float Max reported current in the charge direction (A) max_discharge_current float Max reported current in the discharge direction (A) max_avg_discharge_current float Max reported average current in the discharge direction (A) max_avg_discharge_power float Max reported power in discharge direction (W) max_cell_temperature float Max reported cell temperature (\u00b0C) min_cell_temperature float Min reported cell temperature (\u00b0C) max_delta_cell_temperature float Max reported temperature delta for TSx inputs configured as cell temperature (\u00b0C) max_temperature_internal_sensor float Max reported internal temperature sensor temperature (\u00b0C) min_temperature_internal_sensor float Min reported internal temperature sensor temperature (\u00b0C) max_temperature_fet float Max reported FET temperature (\u00b0C)"},{"location":"protobuf-protocol/#batterybq40z50batterylifetimescellvoltages","title":"BatteryBQ40Z50.BatteryLifetimes.CellVoltages","text":"Field Type Label Description cell_1 float Voltage for cell number 1 (V) cell_2 float Voltage for cell number 2 (V) cell_3 float Voltage for cell number 3 (V) cell_4 float Voltage for cell number 4 (V)"},{"location":"protobuf-protocol/#batterybq40z50batterysafetyevents","title":"BatteryBQ40Z50.BatterySafetyEvents","text":"Field Type Label Description cov_events_count uint32 Number of cell overvoltage (COV) events (events) cov_last_event uint32 Last COV event in cycle count cycles (cycles) cuv_events_count uint32 Number of cell undervoltage (CUV) events (events) cuv_last_event uint32 Last CUV event in cycle count cycles (cycles) ocd1_events_count uint32 Number of Overcurrent in Discharge 1 (OCD1) events (events) ocd1_last_event uint32 Last OCD1 event in cycle count cycles (cycles) ocd2_events_count uint32 Number of Overcurrent in Discharge 2 (OCD2) events (events) ocd2_last_event uint32 Last OCD2 event in cycle count cycles (cycles) occ1_events_count uint32 Number of Overcurrent in Charge 1 (OCC1) events (events) occ1_last_event uint32 Last OCC1 event in cycle count cycles (cycles) occ2_events_count uint32 Number of Overcurrent in Charge 2 (OCC2) events (events) occ2_last_event uint32 Last OCC2 event in cycle count cycles (cycles) aold_events_count uint32 Number of Overload in discharge (AOLD) events (events) aold_last_event uint32 Last AOLD event in cycle count cycles (cycles) ascd_events_count uint32 Number of Short Circuit in Discharge (ASCD) events (events) ascd_last_event uint32 Last ASCD event in cycle count cycles (cycles) ascc_events_count uint32 Number of Short Circuit in Charge (ASCC) events (events) ascc_last_event uint32 Last ASCC event in cycle count cycles (cycles) otc_events_count uint32 Number of Overtemperature in Charge (OTC) events (events) otc_last_event uint32 Last OTC event in cycle count cycles (cycles) otd_events_count uint32 Number of Overtemperature in Discharge (OTD) events (events) otd_last_event uint32 Last OTD event in cycle count cycles (cycles) otf_events_count uint32 Number of Overtemperature in FET (OTF) events (events) otf_last_event uint32 Last OTF event in cycle count cycles (cycles)"},{"location":"protobuf-protocol/#batterybq40z50batterystatus","title":"BatteryBQ40Z50.BatteryStatus","text":"<p>Battery status from BQ40Z50 ref data sheet 0x16.</p> Field Type Label Description overcharged_alarm bool terminate_charge_alarm bool over_temperature_alarm bool terminate_discharge_alarm bool remaining_capacity_alarm bool remaining_time_alarm bool initialization bool discharging_or_relax bool fully_charged bool fully_discharged bool error BatteryBQ40Z50.BatteryStatus.BatteryError Battery error codes <p></p>"},{"location":"protobuf-protocol/#batterybq40z50temperature","title":"BatteryBQ40Z50.Temperature","text":"<p>Battery temperature.</p> Field Type Label Description average float Average temperature accross cells (\u00b0C) cell_1 float Cell 1 temperature (\u00b0C) cell_2 float Cell 2 temperature (\u00b0C) cell_3 float Cell 3 temperature (\u00b0C) cell_4 float Cell 4 temperature (\u00b0C) <p></p>"},{"location":"protobuf-protocol/#batterybq40z50voltage","title":"BatteryBQ40Z50.Voltage","text":"<p>Battery voltage levels.</p> Field Type Label Description total float Battery pack voltage level (V) cell_1 float Cell 1 voltage level (V) cell_2 float Vell 2 voltage level (V) cell_3 float Cell 3 voltage level (V) cell_4 float Cell 4 voltage level (V) <p></p>"},{"location":"protobuf-protocol/#binlogrecord","title":"BinlogRecord","text":"<p>Wrapper message for each entry in the drone telemetry logfile.</p> <p>Each entry contains the unix timestamp in UTC, the monotonic timestamp (time since boot), and an Any message wrapping the custom Blueye message.</p> <p>See separate documentation for the logfile format for more details.</p> Field Type Label Description payload google.protobuf.Any The log entry payload. unix_timestamp google.protobuf.Timestamp Unix timestamp in UTC. clock_monotonic google.protobuf.Timestamp Posix CLOCK_MONOTONIC timestamp. <p></p>"},{"location":"protobuf-protocol/#cputemperature","title":"CPUTemperature","text":"<p>CPU temperature.</p> Field Type Label Description value float CPU temperature (\u00b0C) <p></p>"},{"location":"protobuf-protocol/#calibrationstate","title":"CalibrationState","text":"<p>Compass calibration state.</p> Field Type Label Description status CalibrationState.Status Current calibration status progress_x_positive float Progress for the positive X axis (0..1) progress_x_negative float Progress for the negative X axis (0..1) progress_y_positive float Progress for the positive Y axis (0..1) progress_y_negative float Progress for the negative X axis (0..1) progress_z_positive float Progress for the positive Z axis (0..1) progress_z_negative float Progress for the negative Z axis (0..1) progress_thruster float Progress for the thruster calibration (0..1) <p></p>"},{"location":"protobuf-protocol/#cameraparameters","title":"CameraParameters","text":"<p>Camera parameters.</p> Field Type Label Description h264_bitrate int32 Bitrate of the h264 stream (bit/sec) mjpg_bitrate int32 Bitrate of the MJPG stream used for still pictures (bit/sec) exposure int32 Shutter speed (1/10000 * s), -1 for automatic exposure white_balance int32 White balance temperature (2800..9300), -1 for automatic white balance hue int32 Hue (-40..40), 0 as default gain float Iso gain (0..1) resolution Resolution Stream, recording and image resolution framerate Framerate Stream and recording framerate camera Camera Which camera the parameters belong to. <p></p>"},{"location":"protobuf-protocol/#canisterhumidity","title":"CanisterHumidity","text":"<p>Canister humidity.</p> <p>Humidity measured in the top or bottom canister of the drone.</p> Field Type Label Description humidity float Air humidity (%) <p></p>"},{"location":"protobuf-protocol/#canistertemperature","title":"CanisterTemperature","text":"<p>Canister temperature.</p> <p>Temperature measured in the top or bottom canister of the drone.</p> Field Type Label Description temperature float Temperature (\u00b0C) <p></p>"},{"location":"protobuf-protocol/#clientinfo","title":"ClientInfo","text":"<p>Information about a remote client.</p> Field Type Label Description type string The type of client (such as Blueye App, Observer App, SDK, etc) version string Client software version string device_type string Device type, such as mobile, tablet, or computer platform string Platform, such as iOS, Android, Linux, etc platform_version string Platform software version string name string Name of the client is_observer bool If the client should be connected as an observer or not <p></p>"},{"location":"protobuf-protocol/#connectedclient","title":"ConnectedClient","text":"<p>Information about a connected client with an id assigned by the drone.</p> Field Type Label Description client_id uint32 The assigned client id client_info ClientInfo Client information. <p></p>"},{"location":"protobuf-protocol/#connectionduration","title":"ConnectionDuration","text":"<p>Connection duration of a remote client.</p> Field Type Label Description value int32 time since connected to drone (s) <p></p>"},{"location":"protobuf-protocol/#controlforce","title":"ControlForce","text":"<p>Control Force is used for showing the requested control force in each direction in Newtons.</p> Field Type Label Description surge float Force in surge (N) sway float Force in sway (N) heave float Force in heave (N) yaw float Moment in yaw (Nm) <p></p>"},{"location":"protobuf-protocol/#controlmode","title":"ControlMode","text":"<p>Control mode from drone supervisor</p> Field Type Label Description auto_depth bool If auto depth is enabled auto_heading bool If auto heading is enabled auto_altitude bool If auto altitude is enabled station_keeping bool If station keeping is enabled weather_vaning bool If weather vaning is enabled auto_pilot_surge_yaw bool If auto pilot surge yaw is enabled auto_pilot_heave bool If auto pilot heave is enabled <p></p>"},{"location":"protobuf-protocol/#controllerhealth","title":"ControllerHealth","text":"<p>Controller health is used for showing the state of the controller with an relative error and load from 0 to 1.</p> Field Type Label Description depth_error float Depth error in meters (m) depth_health float Depth controller load (0..1) heading_error float Heading error in degrees (\u00b0) heading_health float Heading controller load (0..1) <p></p>"},{"location":"protobuf-protocol/#cpprobe","title":"CpProbe","text":"<p>Reading from a Cathodic Protection Potential probe.</p> Field Type Label Description measurement float Potential measurement (V) is_measurement_valid bool Indicating if the measurement is valid <p></p>"},{"location":"protobuf-protocol/#depth","title":"Depth","text":"<p>Water depth of the drone.</p> Field Type Label Description value float Drone depth below surface (m) <p></p>"},{"location":"protobuf-protocol/#divetime","title":"DiveTime","text":"<p>Amount of time the drone has been submerged.</p> <p>The drone starts incrementing this value when the depth is above 250 mm.</p> Field Type Label Description value int32 Number of seconds the drone has been submerged <p></p>"},{"location":"protobuf-protocol/#droneinfo","title":"DroneInfo","text":"<p>Information about the drone.</p> <p>This message contains serial numbers and version information for internal components in the drone. Primarily used for diagnostics, or to determine the origin of a logfile.</p> Field Type Label Description blunux_version string Blunux version string serial_number bytes Drone serial number hardware_id bytes Main computer unique identifier model Model Drone model mb_serial bytes Motherboard serial number bb_serial bytes Backbone serial number ds_serial bytes Drone stack serial number mb_uid bytes Motherboard unique identifier bb_uid bytes Backbone unique identifier gp GuestPortInfo GuestPortInfo depth_sensor PressureSensorType Type of depth sensor that is connected to the drone <p></p>"},{"location":"protobuf-protocol/#errorflags","title":"ErrorFlags","text":"<p>Known error states for the drone.</p> Field Type Label Description pmu_comm_ack bool Acknowledge message not received for a message published to internal micro controller pmu_comm_stream bool Error in communication with internal micro controller depth_read bool Error reading depth sensor value depth_spike bool Sudden spike in value read from depth sensor inner_pressure_read bool Error reading inner pressure of the drone inner_pressure_spike bool Sudden spike in inner preassure compass_calibration bool Compass needs calibration tilt_calibration bool Error during calibration of tilt endpoints gp1_read bool Guest port 1 read error gp2_read bool Guest port 2 read error gp3_read bool Guest port 3 read error gp1_not_flashed bool Guest port 1 not flashed gp2_not_flashed bool Guest port 2 not flashed gp3_not_flashed bool Guest port 3 not flashed gp1_unknown_device bool Unknown device on guest port 1 gp2_unknown_device bool Unknown device on guest port 2 gp3_unknown_device bool Unknown device on guest port 3 gp1_device_connection bool Guest port 1 connection error gp2_device_connection bool Guest port 2 connection error gp3_device_connection bool Guest port 3 connection error gp1_device bool Guest port 1 device error gp2_device bool Guest port 2 device error gp3_device bool Guest port 3 device error drone_serial_not_set bool Drone serial number not set drone_serial bool Drone serial number error mb_eeprom_read bool MB eeprom read error bb_eeprom_read bool BB eeprom read error mb_eeprom_not_flashed bool MB eeprom not flashed bb_eeprom_not_flashed bool BB eeprom not flashed main_camera_connection bool We don't get buffers from the main camera main_camera_firmware bool The main camera firmware is wrong guestport_camera_connection bool We don't get buffers from the guestport camera guestport_camera_firmware bool The guestport camera firmware is wrong mb_serial bool MB serial number error bb_serial bool BB serial number error ds_serial bool DS serial number error gp_current_read bool Error reading GP current gp_current bool Max GP current exceeded gp1_bat_current bool Max battery current exceeded on GP1 gp2_bat_current bool Max battery current exceeded on GP2 gp3_bat_current bool Max battery current exceeded on GP3 gp_20v_current bool Max 20V current exceeded on GP <p></p>"},{"location":"protobuf-protocol/#forwarddistance","title":"ForwardDistance","text":"<p>Distance to an object infront of the drone</p> <p>Typically obtained from a 1D pinger.</p> Field Type Label Description value float Distance in front of drone (m) is_valid bool If distance reading is valid or not <p></p>"},{"location":"protobuf-protocol/#genericservo","title":"GenericServo","text":"<p>Servo message used to represent the angle of the servo.</p> Field Type Label Description value float Servo value (0..1) guest_port_number GuestPortNumber Guest port the servo is on <p></p>"},{"location":"protobuf-protocol/#grippervelocities","title":"GripperVelocities","text":"<p>Gripper velocity values.</p> Field Type Label Description grip_velocity float The gripping velocity (-1.0..1.0) rotate_velocity float The rotating velocity (-1.0..1.0) <p></p>"},{"location":"protobuf-protocol/#guestportconnectorinfo","title":"GuestPortConnectorInfo","text":"<p>GuestPort connector information.</p> Field Type Label Description device_list GuestPortDeviceList List of devices on this connector error GuestPortError Guest port connector error guest_port_number GuestPortNumber Guest port the connector is connected to <p></p>"},{"location":"protobuf-protocol/#guestportcurrent","title":"GuestPortCurrent","text":"<p>GuestPort current readings.</p> Field Type Label Description gp1_bat double Current on GP1 battery voltage (A) gp2_bat double Current on GP2 battery voltage (A) gp3_bat double Current on GP3 battery voltage (A) gp_20v double Current on common 20V supply (A) <p></p>"},{"location":"protobuf-protocol/#guestportdevice","title":"GuestPortDevice","text":"<p>GuestPort device.</p> Field Type Label Description device_id GuestPortDeviceID Blueye device identifier manufacturer string Manufacturer name name string Device name serial_number string Serial number depth_rating float Depth rating (m) required_blunux_version string Required Blunux version (x.y.z) detach_status GuestPortDetachStatus Detach status based on detection pin <p></p>"},{"location":"protobuf-protocol/#guestportdevicelist","title":"GuestPortDeviceList","text":"<p>List of guest port devices.</p> Field Type Label Description devices GuestPortDevice repeated List of guest port devices <p></p>"},{"location":"protobuf-protocol/#guestportinfo","title":"GuestPortInfo","text":"<p>GuestPort information.</p> Field Type Label Description gp1 GuestPortConnectorInfo GuestPortConnectorInfo 1 gp2 GuestPortConnectorInfo GuestPortConnectorInfo 2 gp3 GuestPortConnectorInfo GuestPortConnectorInfo 3 <p></p>"},{"location":"protobuf-protocol/#guestportrestartinfo","title":"GuestPortRestartInfo","text":"<p>GuestPort restart information.</p> Field Type Label Description power_off_duration double Duration to keep the guest ports off (s) <p></p>"},{"location":"protobuf-protocol/#imu","title":"Imu","text":"<p>Imu data in drone body frame</p> <p>x - forward y - right z - down</p> Field Type Label Description accelerometer Vector3 Acceleration (g) gyroscope Vector3 Angular velocity (rad/s) magnetometer Vector3 Magnetic field (\u03bcT) temperature float Temperature (\u00b0C) <p></p>"},{"location":"protobuf-protocol/#iperfstatus","title":"IperfStatus","text":"<p>Connection speed between drone and Surface Unit.</p> Field Type Label Description sent float Transfer rate from drone to Surface Unit (Mbit/s) received float Transfer rate from Surface Unit to drone (Mbit/s) <p></p>"},{"location":"protobuf-protocol/#laser","title":"Laser","text":"<p>Laser message used to represent the intensity of connected laser.</p> <p>If the laser does not support dimming but only on and off, a value of 0 turns the laser off, and any value above 0 turns the laser on.</p> Field Type Label Description value float Laser intensity, any value above 0 turns the laser on (0..1) <p></p>"},{"location":"protobuf-protocol/#latlongposition","title":"LatLongPosition","text":"<p>Latitude and longitude position in WGS 84 decimal degrees format.</p> Field Type Label Description latitude double Latitude (\u00b0) longitude double Longitude (\u00b0) <p></p>"},{"location":"protobuf-protocol/#lights","title":"Lights","text":"<p>Lights message used to represent the intensity of the main light or external lights.</p> Field Type Label Description value float Light intensity (0..1) <p></p>"},{"location":"protobuf-protocol/#medusaspectrometerdata","title":"MedusaSpectrometerData","text":"<p>Medusa gamma ray sensor spectrometer data</p> Field Type Label Description drone_time google.protobuf.Timestamp Time stamp when the data is received sensor_time google.protobuf.Timestamp Time stamp the sensor reports realtime float Time the sensor actually measured (s) livetime float Time the measurement took (s) total uint32 Total counts inside the spectrum countrate uint32 Counts per second inside the spectrum (rounded) cosmics uint32 Detected counts above the last channel <p></p>"},{"location":"protobuf-protocol/#motioninput","title":"MotionInput","text":"<p>Motion input from client.</p> <p>Used to indicate the desired motion in each direction. Typically these values map to the left and right joystick for motion, and the left and right trigger for the slow and boost modifiers.</p> Field Type Label Description surge float Forward (positive) and backwards (negative) movement. (-1..1) sway float Right (positive) and left (negative) lateral movement (-1..1) heave float Descend (positive) and ascend (negative) movement (-1..1) roll float Roll left (negative) or right (positive). (-1..1) pitch float Pitch down (negative) or up (positive). (-1..1) yaw float Left (positive) and right (negative) movement (-1..1) slow float Multiplier used to reduce the speed of the motion (0..1) boost float Multiplier used to increase the speed of the motion (0..1) <p></p>"},{"location":"protobuf-protocol/#multibeamservo","title":"MultibeamServo","text":"<p>Servo message used to represent the angle of the servo.</p> Field Type Label Description angle float Servo degrees (-30..30) <p></p>"},{"location":"protobuf-protocol/#nstreamers","title":"NStreamers","text":"<p>Number of spectators connected to video stream.</p> Field Type Label Description main int32 The number of clients to the main camera stream guestport int32 The number of clients to the guestport camera stream <p></p>"},{"location":"protobuf-protocol/#navigationsensorstatus","title":"NavigationSensorStatus","text":"<p>Navigation sensor used in the position observer with validity state</p> Field Type Label Description sensor_id NavigationSensorID Sensor id is_valid bool Sensor validity <p></p>"},{"location":"protobuf-protocol/#notification","title":"Notification","text":"<p>Notification is used for displaying info, warnings, and errors to the user.</p> Field Type Label Description type NotificationType Notification to be displayed to the user level NotificationLevel Level of the notification, info, warning or error value google.protobuf.Any Optional value to be displayed in the message timestamp google.protobuf.Timestamp Timestamp of the notification <p></p>"},{"location":"protobuf-protocol/#overlayparameters","title":"OverlayParameters","text":"<p>Overlay parameters.</p> <p>All available parameters that can be used to configure telemetry overlay on video recordings.</p> Field Type Label Description temperature_enabled bool If temperature should be included depth_enabled bool If depth should be included heading_enabled bool If heading should be included tilt_enabled bool If camera tilt angle should be included thickness_enabled bool If camera tilt angle should be included date_enabled bool If date should be included distance_enabled bool If distance should be included altitude_enabled bool If altitude should be included cp_probe_enabled bool If cp-probe should be included medusa_enabled bool If medusa measurement should be included drone_location_enabled bool If the drone location coordinates should be included logo_type LogoType Which logo should be used depth_unit DepthUnit Which unit should be used for depth: Meter, Feet or None temperature_unit TemperatureUnit Which unit should be used for temperature: Celcius or Fahrenheit thickness_unit ThicknessUnit Which unit should be used for thickness: Millimeters or Inches timezone_offset int32 Timezone offset from UTC (min) margin_width int32 Horizontal margins of text elements (px) margin_height int32 Vertical margins of text elements (px) font_size FontSize Font size of text elements title string Optional title subtitle string Optional subtitle date_format string Posix strftime format string for time stamp shading float Pixel intensity to subtract from text background (0..1), 0: transparent, 1: black <p></p>"},{"location":"protobuf-protocol/#pingerconfiguration","title":"PingerConfiguration","text":"<p>Pinger configuration.</p> <p>Used to specify the configuration the BR 1D-Pinger.</p> Field Type Label Description mounting_direction PingerConfiguration.MountingDirection Mounting direction of the pinger <p></p>"},{"location":"protobuf-protocol/#positionestimate","title":"PositionEstimate","text":"<p>Position estimate from the Extended Kalman filter based observer if a DVL is connected.</p> Field Type Label Description northing float Position from reset point (m) easting float Position from reset point (m) heading float Gyro based heading estimate (continous radians) surge_rate float Velocity in surge (m/s) sway_rate float Velocity in sway (m/s) yaw_rate float Rotaion rate in yaw (rad/s) ocean_current float Estimated ocean current (m/s) odometer float Travelled distance since reset (m) is_valid bool If the estimate can be trusted global_position LatLongPosition Best estimate of the global position in decimal degrees navigation_sensors NavigationSensorStatus repeated List of available sensors with status <p></p>"},{"location":"protobuf-protocol/#recordon","title":"RecordOn","text":"<p>Which cameras are supposed to be recording</p> Field Type Label Description main bool Record the main camera guestport bool Record external camera <p></p>"},{"location":"protobuf-protocol/#recordstate","title":"RecordState","text":"<p>Camera recording state.</p> Field Type Label Description main_is_recording bool If the main camera is recording main_seconds int32 Main record time (s) guestport_is_recording bool If the guestport camera is recording guestport_seconds int32 Guestport record time (s) <p></p>"},{"location":"protobuf-protocol/#reference","title":"Reference","text":"<p>Reference for the control system. Note that the internal heading reference is not relative to North, use (ControlHealth.heading_error + pose.yaw) instead.</p> Field Type Label Description surge float Reference from joystick surge input (0..1) sway float Reference from joystick sway input (0..1) heave float Reference from joystick heave input (0..1) yaw float Reference from joystick yaw input (0..1) depth float Reference drone depth below surface (m) heading float Reference used in auto heading mode, gyro based (\u00b0) altitude float Reference used in auto altitude mode (m) <p></p>"},{"location":"protobuf-protocol/#resetpositionsettings","title":"ResetPositionSettings","text":"<p>ResetPositionSettings used during reset of the position estimate.</p> Field Type Label Description heading_source_during_reset HeadingSource Option to use the drone compass or due North as heading during reset manual_heading float Heading in degrees (0-359) reset_coordinate_source ResetCoordinateSource Option to use the device GPS or a manual coordinate. reset_coordinate LatLongPosition Reset coordinate in decimal degrees <p></p>"},{"location":"protobuf-protocol/#stationkeepingstate","title":"StationKeepingState","text":"<p>Station keeping state.</p> Field Type Label Description enabled bool If station keeping is enabled <p></p>"},{"location":"protobuf-protocol/#storagespace","title":"StorageSpace","text":"<p>Storage space.</p> Field Type Label Description total_space int64 Total bytes of storage space (B) free_space int64 Available bytes of storage space (B) <p></p>"},{"location":"protobuf-protocol/#systemtime","title":"SystemTime","text":"<p>System time.</p> Field Type Label Description unix_timestamp google.protobuf.Timestamp Unix timestamp <p></p>"},{"location":"protobuf-protocol/#thicknessgauge","title":"ThicknessGauge","text":"<p>Thickness measurement data from a Cygnus Thickness Gauge.</p> Field Type Label Description thickness_measurement float Thickness measurement of a steel plate echo_count uint32 Indicating the quality of the reading when invalid (0-3) sound_velocity uint32 Speed of sound in the steel member (m/s) is_measurement_valid bool Indicating if the measurement is valid <p></p>"},{"location":"protobuf-protocol/#tiltangle","title":"TiltAngle","text":"<p>Angle of tilt camera in degrees.</p> Field Type Label Description value float Tilt angle (\u00b0) <p></p>"},{"location":"protobuf-protocol/#tiltstabilizationstate","title":"TiltStabilizationState","text":"<p>Tilt stabilization state.</p> <p>Blueye drones with mechanical tilt has the ability to enable camera stabilization.</p> Field Type Label Description enabled bool If tilt stabilization is enabled <p></p>"},{"location":"protobuf-protocol/#tiltvelocity","title":"TiltVelocity","text":"<p>Relative velocity of tilt</p> Field Type Label Description value float Relative angular velocity of tilt (-1..1), negative means down and positive means up <p></p>"},{"location":"protobuf-protocol/#timelapsestate","title":"TimeLapseState","text":"<p>Time-lapse state published if time-lapse mission is running.</p> Field Type Label Description interval float Interval between photos photos_taken int32 Number of photos taken interval_type IntervalType Interval type for photos, distance or time <p></p>"},{"location":"protobuf-protocol/#vector3","title":"Vector3","text":"<p>Vector with 3 elements</p> Field Type Label Description x double x-component y double y-component z double z-component <p></p>"},{"location":"protobuf-protocol/#waterdensity","title":"WaterDensity","text":"<p>Water density.</p> <p>Used to specify the water density the drone is operating in, to achieve more accurate depth measurements, f. ex. influenced by salinity.</p> Field Type Label Description value float Water density (g/l) <p></p>"},{"location":"protobuf-protocol/#watertemperature","title":"WaterTemperature","text":"<p>Water temperature measured by the drone's combined depth and temperature sensor.</p> Field Type Label Description value float Water temperature (\u00b0C) <p></p>"},{"location":"protobuf-protocol/#weathervaningstate","title":"WeatherVaningState","text":"<p>Weather vaning state.</p> Field Type Label Description enabled bool If weather vaning is enabled <p></p>"},{"location":"protobuf-protocol/#batterybq40z50batterystatusbatteryerror","title":"BatteryBQ40Z50.BatteryStatus.BatteryError","text":"<p>Battery errror code from BQ40Z50 BMS data sheet.</p> Name Number Description BATTERY_ERROR_UNSPECIFIED 0 BATTERY_ERROR_OK 1 BATTERY_ERROR_BUSY 2 BATTERY_ERROR_RESERVED_COMMAND 3 BATTERY_ERROR_UNSUPPORTED_COMMAND 4 BATTERY_ERROR_ACCESS_DENIED 5 BATTERY_ERROR_OVERFLOW_UNDERFLOW 6 BATTERY_ERROR_BAD_SIZE 7 BATTERY_ERROR_UNKNOWN_ERROR 8 <p></p>"},{"location":"protobuf-protocol/#calibrationstatestatus","title":"CalibrationState.Status","text":"<p>Status of the compass calibration procedure.</p> <p>When calibration is started, the status will indicate the active (upfacing) axis.</p> Name Number Description STATUS_UNSPECIFIED 0 Unspecified status STATUS_NOT_CALIBRATING 1 Compass is not currently calibrating STATUS_CALIBRATING_NO_AXIS 2 Compass is calibrating but active calibration axis cannot be determined STATUS_CALIBRATING_X_POSITIVE 3 Compass is calibrating and the positive X axis is active STATUS_CALIBRATING_X_NEGATIVE 4 Compass is calibrating and the negative X axis is active STATUS_CALIBRATING_Y_POSITIVE 5 Compass is calibrating and the positive Y axis is active STATUS_CALIBRATING_Y_NEGATIVE 6 Compass is calibrating and the negative Y axis is active STATUS_CALIBRATING_Z_POSITIVE 7 Compass is calibrating and the positive Z axis is active STATUS_CALIBRATING_Z_NEGATIVE 8 Compass is calibrating and the negative Z axis is active STATUS_CALIBRATING_THRUSTER 9 Compass is calibrating for thruster interferance <p></p>"},{"location":"protobuf-protocol/#camera","title":"Camera","text":"<p>Which camera to control.</p> Name Number Description CAMERA_UNSPECIFIED 0 Camera not specified CAMERA_MAIN 1 Main camera CAMERA_GUESTPORT 2 Guestport camera <p></p>"},{"location":"protobuf-protocol/#depthunit","title":"DepthUnit","text":"<p>Available depth units.</p> Name Number Description DEPTH_UNIT_UNSPECIFIED 0 Depth unit not specified DEPTH_UNIT_METERS 1 Depth should be displayed as meters DEPTH_UNIT_FEET 2 Depth should be displayed as feet <p></p>"},{"location":"protobuf-protocol/#fontsize","title":"FontSize","text":"<p>Available font sizes for overlay text elements.</p> Name Number Description FONT_SIZE_UNSPECIFIED 0 Font size not specified FONT_SIZE_PX15 1 15 px FONT_SIZE_PX20 2 20 px FONT_SIZE_PX25 3 25 px FONT_SIZE_PX30 4 30 px FONT_SIZE_PX35 5 35 px FONT_SIZE_PX40 6 40 px <p></p>"},{"location":"protobuf-protocol/#framerate","title":"Framerate","text":"<p>Available camera framerates.</p> Name Number Description FRAMERATE_UNSPECIFIED 0 Framerate not specified FRAMERATE_FPS_30 1 30 frames per second FRAMERATE_FPS_25 2 25 frames per second <p></p>"},{"location":"protobuf-protocol/#guestportdetachstatus","title":"GuestPortDetachStatus","text":"<p>GuestPort detach status.</p> Name Number Description GUEST_PORT_DETACH_STATUS_UNSPECIFIED 0 Unspecified (Default for non-detachable devices) GUEST_PORT_DETACH_STATUS_ATTACHED 1 Detachable device attached GUEST_PORT_DETACH_STATUS_DETACHED 2 Detachable device detached <p></p>"},{"location":"protobuf-protocol/#guestportdeviceid","title":"GuestPortDeviceID","text":"<p>GuestPort device ID.</p> Name Number Description GUEST_PORT_DEVICE_ID_UNSPECIFIED 0 Unspecified GUEST_PORT_DEVICE_ID_BLIND_PLUG 1 Blueye blind plug GUEST_PORT_DEVICE_ID_TEST_STATION 2 Blueye test station GUEST_PORT_DEVICE_ID_DEBUG_SERIAL 3 Blueye debug serial GUEST_PORT_DEVICE_ID_BLUEYE_LIGHT 4 Blueye Light GUEST_PORT_DEVICE_ID_BLUEYE_CAM 5 Blueye Cam GUEST_PORT_DEVICE_ID_BLUE_ROBOTICS_LUMEN 6 Blue Robotics Lumen GUEST_PORT_DEVICE_ID_BLUE_ROBOTICS_NEWTON 7 Blue Robotics Newton GUEST_PORT_DEVICE_ID_BLUE_ROBOTICS_PING_SONAR 8 Blue Robotics Ping Sonar GUEST_PORT_DEVICE_ID_BLUEPRINT_LAB_REACH_ALPHA 9 Blueprint Lab Reach Alpha GUEST_PORT_DEVICE_ID_WATERLINKED_DVL_A50 10 Waterlinked DVL A50 GUEST_PORT_DEVICE_ID_IMPACT_SUBSEA_ISS360 11 Impact Subsea ISS360 Sonar GUEST_PORT_DEVICE_ID_BLUEPRINT_SUBSEA_SEATRAC_X010 12 Blueprint Subsea Seatrac X110 GUEST_PORT_DEVICE_ID_BLUEPRINT_SUBSEA_OCULUS_M750D 13 Blueprint Subsea Oculus M750d GUEST_PORT_DEVICE_ID_CYGNUS_MINI_ROV_THICKNESS_GAUGE 14 Cygnus Mini ROV Thickness Gauge GUEST_PORT_DEVICE_ID_BLUE_ROBOTICS_PING360_SONAR 15 Blue Robotics Ping360 Scanning Imaging Sonar GUEST_PORT_DEVICE_ID_TRITECH_GEMINI_720IM 16 Tritech Gemini 720im Multibeam Sonar GUEST_PORT_DEVICE_ID_BLUEYE_LIGHT_PAIR 17 Blueye Light Pair GUEST_PORT_DEVICE_ID_TRITECH_GEMINI_MICRON 18 Tritech Micron Gemini GUEST_PORT_DEVICE_ID_OCEAN_TOOLS_DIGICP 19 Ocean Tools DigiCP GUEST_PORT_DEVICE_ID_TRITECH_GEMINI_720IK 20 Tritech Gemini 720ik Multibeam Sonar GUEST_PORT_DEVICE_ID_NORTEK_NUCLEUS_1000 21 Nortek Nucleus 1000 DVL GUEST_PORT_DEVICE_ID_BLUEYE_GENERIC_SERVO 22 Blueye Generic Servo GUEST_PORT_DEVICE_ID_BLUEYE_MULTIBEAM_SERVO 23 Blueye Multibeam Skid Servo GUEST_PORT_DEVICE_ID_BLUE_ROBOTICS_DETACHABLE_NEWTON 24 Detachable Blue Robotics Newton GUEST_PORT_DEVICE_ID_INSITU_AQUA_TROLL_500 25 In-Situ Aqua TROLL 500 GUEST_PORT_DEVICE_ID_MEDUSA_RADIOMETRICS_MS100 26 Medusa Radiometrics Gamma Ray Sensor GUEST_PORT_DEVICE_ID_LASER_TOOLS_SEA_BEAM 27 Laser Tools Sea Beam Underwater Laser GUEST_PORT_DEVICE_ID_SPOT_X_LASER_SCALERS 28 Spot X Laser Scalers GUEST_PORT_DEVICE_ID_BLUEPRINT_SUBSEA_OCULUS_M1200D 29 Blueprint Subsea Oculus M1200d GUEST_PORT_DEVICE_ID_BLUEPRINT_SUBSEA_OCULUS_M3000D 30 Blueprint Subsea Oculus M3000d GUEST_PORT_DEVICE_ID_INSITU_AQUA_TROLL_100 31 In-Situ Aqua TROLL 100 GUEST_PORT_DEVICE_ID_INSITU_RDO_PRO_X 32 In-Situ RDO PRO-X GUEST_PORT_DEVICE_ID_INSITU_RDO_BLUE 33 In-Situ RDO Blue GUEST_PORT_DEVICE_ID_BLUEYE_CAMERA_SERVO 34 Blueye Camera Servo GUEST_PORT_DEVICE_ID_BLUEYE_MULTIBEAM_HEAD_SERVO 35 Blueye Multibeam Head Servo GUEST_PORT_DEVICE_ID_CERULEAN_OMNISCAN_450FS 36 Cerulean Omniscan 450 FS GUEST_PORT_DEVICE_ID_CERULEAN_OMNISCAN_450SS 37 Cerulean Omniscan 450 SS <p></p>"},{"location":"protobuf-protocol/#guestporterror","title":"GuestPortError","text":"<p>GuestPort error. Only indicated errors on the guest port connector itself.</p> Name Number Description GUEST_PORT_ERROR_UNSPECIFIED 0 Unspecified value GUEST_PORT_ERROR_NOT_CONNECTED 1 Device not connected GUEST_PORT_ERROR_READ_ERROR 2 EEPROM read error GUEST_PORT_ERROR_NOT_FLASHED 3 Connector not flashed GUEST_PORT_ERROR_CRC_ERROR 4 Wrong CRC for protobuf message GUEST_PORT_ERROR_PARSE_ERROR 5 Protobuf message cannot be parsed <p></p>"},{"location":"protobuf-protocol/#guestportnumber","title":"GuestPortNumber","text":"<p>GuestPort number.</p> Name Number Description GUEST_PORT_NUMBER_UNSPECIFIED 0 Unspecified GUEST_PORT_NUMBER_PORT_1 1 Guest port 1 GUEST_PORT_NUMBER_PORT_2 2 Guest port 2 GUEST_PORT_NUMBER_PORT_3 3 Guest port 3 <p></p>"},{"location":"protobuf-protocol/#headingsource","title":"HeadingSource","text":"<p>Heading source used during reset of the position estimate.</p> Name Number Description HEADING_SOURCE_UNSPECIFIED 0 Unspecified HEADING_SOURCE_DRONE_COMPASS 1 Uses the drone compass to set the heading HEADING_SOURCE_MANUAL_INPUT 2 Used when the user sets the heading manually <p></p>"},{"location":"protobuf-protocol/#intervaltype","title":"IntervalType","text":"<p>Interval type for time-lapse photos.</p> Name Number Description INTERVAL_TYPE_UNSPECIFIED 0 Unspecified INTERVAL_TYPE_TIME 1 Time interval INTERVAL_TYPE_DISTANCE 2 Distance interval <p></p>"},{"location":"protobuf-protocol/#logotype","title":"LogoType","text":"<p>Available logo types.</p> Name Number Description LOGO_TYPE_UNSPECIFIED 0 Logo type not specified LOGO_TYPE_NONE 1 Do not add any logo LOGO_TYPE_DEFAULT 2 Add default logo LOGO_TYPE_CUSTOM 3 Add user defined logo <p></p>"},{"location":"protobuf-protocol/#model","title":"Model","text":"<p>Drone models produced by Blueye</p> Name Number Description MODEL_UNSPECIFIED 0 ModelName not specified MODEL_PIONEER 1 Blueye Pioneer, the first model MODEL_PRO 2 Blueye Pro, features camera tilt MODEL_X1 4 Blueye X1, features camera tilt and one guest port MODEL_X3 3 Blueye X3, features support for peripherals MODEL_X3_ULTRA 6 Blueye X3 Ultra MODEL_NEXT 5 Blueye ? <p></p>"},{"location":"protobuf-protocol/#navigationsensorid","title":"NavigationSensorID","text":"<p>List of navigation sensors that can be used by the position observer</p> Name Number Description NAVIGATION_SENSOR_ID_UNSPECIFIED 0 Unspecified NAVIGATION_SENSOR_ID_WATERLINKED_DVL_A50 1 Water Linked DVL A50 NAVIGATION_SENSOR_ID_WATERLINKED_UGPS_G2 2 Water Linked UGPS G2 NAVIGATION_SENSOR_ID_NMEA 3 NMEA stream from external positioning system <p></p>"},{"location":"protobuf-protocol/#notificationlevel","title":"NotificationLevel","text":"<p>List of available notification levels.</p> Name Number Description NOTIFICATION_LEVEL_UNSPECIFIED 0 Unspecified NOTIFICATION_LEVEL_INFO 1 Info NOTIFICATION_LEVEL_WARNING 2 Warning NOTIFICATION_LEVEL_ERROR 3 Error <p></p>"},{"location":"protobuf-protocol/#notificationtype","title":"NotificationType","text":"<p>Notification is used for displaying info, warnings, and errors to the user.</p> Name Number Description NOTIFICATION_TYPE_UNSPECIFIED 0 Unspecified NOTIFICATION_TYPE_POSITION_ESTIMATE_IS_INACCURATE 1 Position estimate is inaccurate NOTIFICATION_TYPE_DRONE_POSITION_IS_UNKNOWN 2 Drone position is unknown NOTIFICATION_TYPE_USER_POSITION_IS_UNKNOWN 3 User position is unknown NOTIFICATION_TYPE_NO_MISSION_LOADED 4 No mission is loaded NOTIFICATION_TYPE_MISSION_LOADED 5 Mission is loaded NOTIFICATION_TYPE_FAILED_TO_LOAD_MISSION 6 Failed to load mission NOTIFICATION_TYPE_MISSION_COMPLETE 7 Mission is complete NOTIFICATION_TYPE_INSTRUCTION_COMPLETE 8 Instruction is complete NOTIFICATION_TYPE_WAYPOINT_REACHED 9 Waypoint reached NOTIFICATION_TYPE_DEPTH_TARGET_REACHED 10 Depth set point is reached NOTIFICATION_TYPE_ALTITUDE_TARGET_REACHED 11 Altitude set point is reached NOTIFICATION_TYPE_WAYPOINT_IS_TOO_FAR_AWAY 12 The waypoint is too far away NOTIFICATION_TYPE_DEPTH_SET_POINT_IS_TOO_FAR_AWAY 13 The depth set point is too far away NOTIFICATION_TYPE_TIME_TO_COMPLETE_IS_TOO_LONG 14 The time to complete the mission is too long NOTIFICATION_TYPE_RETURNING_TO_HOME 15 Returning to home NOTIFICATION_TYPE_GO_TO_SURFACE 16 Go to surface NOTIFICATION_TYPE_GO_TO_SEABED 17 Go to seabed with an altimeter NOTIFICATION_TYPE_GO_TO_WAYPOINT 18 Go to waypoint NOTIFICATION_TYPE_GO_TO_DEPTH_SET_POINT 19 Go to depth set point NOTIFICATION_TYPE_GO_TO_WAYPOINT_WITH_DEPTH_SET_POINT 20 Go to waypoint with depth set point NOTIFICATION_TYPE_MISSION_STARTED 21 Mission is started NOTIFICATION_TYPE_MISSION_PAUSED 22 Mission is paused NOTIFICATION_TYPE_MISSION_RESUMED 23 Mission is resumed NOTIFICATION_TYPE_MISSION_ABORTED 24 Mission is aborted NOTIFICATION_TYPE_DRONE_IS_STUCK 25 Drone is stuck during a mission NOTIFICATION_TYPE_WAIT_FOR 26 Wait for instruction running NOTIFICATION_TYPE_CAMERA_ACTION 27 Camera action initiated NOTIFICATION_TYPE_SET_TILT_MAIN_CAMERA 28 Set tilt for main camera NOTIFICATION_TYPE_SET_TILT_MULTIBEAM 29 Set tilt for multibeam NOTIFICATION_TYPE_INSTRUCTION_SKIPPED 30 When an instruction is not available in the ROV <p></p>"},{"location":"protobuf-protocol/#pingerconfigurationmountingdirection","title":"PingerConfiguration.MountingDirection","text":"Name Number Description MOUNTING_DIRECTION_UNSPECIFIED 0 Mounting direction is unspecified MOUNTING_DIRECTION_FORWARDS 1 Pointing forwards from the drones perspective MOUNTING_DIRECTION_DOWNWARDS 2 Pointing downwards from the drones perspective"},{"location":"protobuf-protocol/#pressuresensortype","title":"PressureSensorType","text":"<p>Depth sensors used by the drone.</p> Name Number Description PRESSURE_SENSOR_TYPE_UNSPECIFIED 0 Depth sensor type not specified PRESSURE_SENSOR_TYPE_NOT_CONNECTED 1 No se PRESSURE_SENSOR_TYPE_MS5837_30BA26 2 Thh MS5837 30BA26 pressure sensor PRESSURE_SENSOR_TYPE_KELLER_PA7LD 3 The extended depth sensor using the Keller PA7LD pressure sensor PRESSURE_SENSOR_TYPE_MS5637_02BA03 4 The internal pressure sensor using the MS5637 02BA03 pressure sensor <p></p>"},{"location":"protobuf-protocol/#resetcoordinatesource","title":"ResetCoordinateSource","text":"Name Number Description RESET_COORDINATE_SOURCE_UNSPECIFIED 0 Unspecified, fallback to device GPS RESET_COORDINATE_SOURCE_DEVICE_GPS 1 Uses the device GPS to set the reset point RESET_COORDINATE_SOURCE_MANUAL 2 Uses a coordinate in decimal degrees to set the reset point"},{"location":"protobuf-protocol/#resolution","title":"Resolution","text":"<p>Available camera resolutions.</p> Name Number Description RESOLUTION_UNSPECIFIED 0 Resolution not specified RESOLUTION_FULLHD_1080P 1 1080p Full HD resolution RESOLUTION_HD_720P 2 720p HD resolution <p></p>"},{"location":"protobuf-protocol/#temperatureunit","title":"TemperatureUnit","text":"<p>Available temperature units.</p> Name Number Description TEMPERATURE_UNIT_UNSPECIFIED 0 Temperature unit not specfied TEMPERATURE_UNIT_CELSIUS 1 Temperature should be displayed as Celcius TEMPERATURE_UNIT_FAHRENHEIT 2 Temperature should be displayed as Fahrenheit <p></p>"},{"location":"protobuf-protocol/#thicknessunit","title":"ThicknessUnit","text":"<p>Available thickness units.</p> Name Number Description THICKNESS_UNIT_UNSPECIFIED 0 Thickness unit not specified THICKNESS_UNIT_MILLIMETERS 1 Thickness should be displayed as millimeters THICKNESS_UNIT_INCHES 2 Thickness should be displayed as inches <p></p> <p>Top</p>"},{"location":"protobuf-protocol/#mission_planningproto","title":"mission_planning.proto","text":"<p>Mission Planning Protocol</p> <p>These messages are used to start a mission and to monitor the status of the mission.</p> <p></p>"},{"location":"protobuf-protocol/#cameracommand","title":"CameraCommand","text":"<p>CameraCommands are used to control the camera from a mission.</p> Field Type Label Description camera_action CameraAction Camera command action_param float Used for taking photos based on a time or distance interval <p></p>"},{"location":"protobuf-protocol/#controlmodecommand","title":"ControlModeCommand","text":"<p>A ControlModeCommand is used to set vertical and horizontal control mode during a mission.</p> Field Type Label Description control_mode_vertical ControlModeVertical Desired control mode in heave control_mode_horizontal ControlModeHorizontal Desired control mode in surge and yaw <p></p>"},{"location":"protobuf-protocol/#depthsetpoint","title":"DepthSetPoint","text":"<p>Depth set point is used to describe a depth setpoint relative to the surface or the seabed.</p> Field Type Label Description depth float Desired depth at the wp (m) speed_to_depth float Desired speed to desired depth set point (m/s) depth_zero_reference DepthZeroReference Used to destinguish desired altitude or depth <p></p>"},{"location":"protobuf-protocol/#depthsetpointcommand","title":"DepthSetPointCommand","text":"<p>A DepthSetPointCommand is used to go to a desired depth or altitude.</p> Field Type Label Description depth_set_point DepthSetPoint Depth set point to go to <p></p>"},{"location":"protobuf-protocol/#gotohomecommand","title":"GoToHomeCommand","text":"<p>GoToHomeCommand is used to go to the home position.</p> Field Type Label Description desired_speed float Desired speed to home (m/s) <p></p>"},{"location":"protobuf-protocol/#gotoseabedcommand","title":"GoToSeabedCommand","text":"<p>GoToSeabedCommand is used to go to the seabed.</p> Field Type Label Description desired_speed float Desired speed to seabed (m/s) <p></p>"},{"location":"protobuf-protocol/#gotosurfacecommand","title":"GoToSurfaceCommand","text":"<p>GoToSurfaceCommand is used to go to the surface.</p> Field Type Label Description desired_speed float Desired speed to surface (m/s) <p></p>"},{"location":"protobuf-protocol/#instruction","title":"Instruction","text":"<p>A mission consitst of one or multiple instructions. One instruction can be of different types.</p> Field Type Label Description id uint32 group_id uint32 Group id used for polygoons auto_continue bool False will pause the mission after this instruction waypoint_command WaypointCommand Go to waypoint depth_set_point_command DepthSetPointCommand Go to depth camera_command CameraCommand Camera commands control_mode_command ControlModeCommand Set control modes tilt_main_camera_command TiltMainCameraCommand Set camera to angle x tilt_multibeam_command TiltMultibeamCommand Set multibeam tilt angle wait_for_command WaitForCommand Wait for x seconds go_to_surface_command GoToSurfaceCommand Go to surface go_to_seabed_command GoToSeabedCommand Go to seabed go_to_home_command GoToHomeCommand Go to home position <p></p>"},{"location":"protobuf-protocol/#mission","title":"Mission","text":"<p>A list of waypoints describes a mission that the auto pilot can execute.</p> Field Type Label Description id uint32 Mission id name string Mission name provided from the app instructions Instruction repeated List of instructions in the mission path_segments PathSegment repeated Calculated path segments from the reference generator (optinal) total_distance uint32 Total distance of the mission (m) (optinal) total_duration_time uint32 Total duration time of the mission (s) (optinal) default_surge_speed float Default cruise speed of the mission (m/s) (optinal) default_heave_speed float Default heave speed of the mission (m/s) (optinal) default_circle_of_acceptance float Default circle of acceptance for waypoints (m) (optinal) <p></p>"},{"location":"protobuf-protocol/#missionstatus","title":"MissionStatus","text":"<p>Mission Status is used for showing the status of the mission.</p> Field Type Label Description state MissionState State of the mission supervisor time_elapsed uint32 Time elapsed since mission started (s) estimated_time_to_complete uint32 Estimated time to complete the mission (s) distance_to_complete uint32 Distance left of the mission (m) completed_instruction_ids uint32 repeated Ids of the completed instructions total_number_of_instructions uint32 Total number of instructions in the mission completed_path_segment_ids uint32 repeated Ids of the completed path segments total_number_of_path_segments uint32 Total number of path segments in the mission id uint32 Mission id of the active mission <p></p>"},{"location":"protobuf-protocol/#pathsegment","title":"PathSegment","text":"<p>Path segment used to describe segments of a mission as a line between to waypoints.</p> Field Type Label Description id uint32 Path segment id starting at 0, -1 for inactive speed_to_target float Desired speed over ground in (m/s) course_to_target float Course to target relative to north (rad) [-pi, pi] depth_speed float Desired speed in heave (m/s) horizontal_length float Horizontal length of the path segment (m) vertical_length float Vertical legth of the path segment (m) from_wp_id uint32 Id of the starting waypoint to_wp_id uint32 Id of the ending waypoint duration_time float Estmated time it takes to complete given legth and desired speed (s) <p></p>"},{"location":"protobuf-protocol/#referenceautopilot","title":"ReferenceAutoPilot","text":"<p>Reference for the auto pilot when a mission is active.</p> Field Type Label Description instruction_type InstructionType Instruction type active_instruction_id uint32 Id of the active instruction active_path_segment_id uint32 Id of the active path segment course_to_target float Course to the next waypoint from north (rad) [-pi, pi] speed_over_ground float Desired speed over ground (m/s) horizontal_distance_to_target float Horizontal distance to the next waypoint (m) circle_of_acceptance float Circle of acceptance to mark waypoint as visited (m) depth_set_point float Desired depth set point (m) heave_velocity float Desired heave velocity (m/s) vertical_distance_to_target float Vertical distance to the next waypoint (m) depth_zero_reference DepthZeroReference Indicates if depth is measured from the surface or seabed time_to_complete float Estimated time to complete the instruction (s) <p></p>"},{"location":"protobuf-protocol/#tiltmaincameracommand","title":"TiltMainCameraCommand","text":"<p>The TiltMainCameraCommand can set the desired camera tilt angle.</p> Field Type Label Description tilt_angle TiltAngle Tilt angle of the camera (-30..30) <p></p>"},{"location":"protobuf-protocol/#tiltmultibeamcommand","title":"TiltMultibeamCommand","text":"<p>The TiltMultibeamCommand is used to set the tilt angle of the servo.</p> Field Type Label Description multibeam_servo MultibeamServo Tilt angle for the multibeam servo <p></p>"},{"location":"protobuf-protocol/#waitforcommand","title":"WaitForCommand","text":"<p>WaitForCommand is used to wait duringing a mission.</p> Field Type Label Description wait_for_seconds float Wait for x seconds <p></p>"},{"location":"protobuf-protocol/#waypoint","title":"Waypoint","text":"<p>Waypoints used to describe a path for the auto pilot.</p> Field Type Label Description id uint32 Waypoint id name string Waypoint name provided from the app global_position LatLongPosition Position if the waypoint (decimal degrees) circle_of_acceptance float Radius of the accepance circle around the waypoint (m) speed_to_target float Desired speed over ground to waypoint (m/s) depth_set_point DepthSetPoint Depth set point (optional) <p></p>"},{"location":"protobuf-protocol/#waypointcommand","title":"WaypointCommand","text":"<p>A WaypointCommand will request the drone to drive to a point automatically.</p> Field Type Label Description waypoint Waypoint Waypoint to go to <p></p>"},{"location":"protobuf-protocol/#cameraaction","title":"CameraAction","text":"<p>List of available camera actions.</p> Name Number Description CAMERA_ACTION_UNSPECIFIED 0 Unspecified command CAMERA_ACTION_TAKE_PHOTO 1 Take one photo CAMERA_ACTION_TAKE_PHOTOS_TIME 2 Take a photo every x second CAMERA_ACTION_TAKE_PHOTOS_DISTANCE 3 Take a photo every x meter CAMERA_ACTION_STOP_TAKING_PHOTOS 4 Stop taking photos CAMERA_ACTION_START_RECORDING 5 Start recording CAMERA_ACTION_STOP_RECORDING 6 Stop recording <p></p>"},{"location":"protobuf-protocol/#controlmodehorizontal","title":"ControlModeHorizontal","text":"Name Number Description CONTROL_MODE_HORIZONTAL_UNSPECIFIED 0 Unspecified CONTROL_MODE_HORIZONTAL_MANUAL 1 Manual control mode CONTROL_MODE_HORIZONTAL_AUTO_HEADING 2 Auto heading control mode CONTROL_MODE_HORIZONTAL_STATION_KEEPING 3 Station keeping control mode"},{"location":"protobuf-protocol/#controlmodevertical","title":"ControlModeVertical","text":"Name Number Description CONTROL_MODE_VERTICAL_UNSPECIFIED 0 Unspecified CONTROL_MODE_VERTICAL_MANUAL 1 Manual control mode CONTROL_MODE_VERTICAL_AUTO_DEPTH 2 Auto depth control mode CONTROL_MODE_VERTICAL_AUTO_ALTITUDE 3 Auto altitude control mode"},{"location":"protobuf-protocol/#depthzeroreference","title":"DepthZeroReference","text":"<p>Depth zero reference from surface for depth, and seabed for altitude.</p> Name Number Description DEPTH_ZERO_REFERENCE_UNSPECIFIED 0 DEPTH_ZERO_REFERENCE_SURFACE 1 DEPTH_ZERO_REFERENCE_SEABED 2 <p></p>"},{"location":"protobuf-protocol/#instructiontype","title":"InstructionType","text":"<p>List of available instruction types.</p> Name Number Description INSTRUCTION_TYPE_UNSPECIFIED 0 Unspecified INSTRUCTION_TYPE_NONE 1 None INSTRUCTION_TYPE_GO_TO_WAYPOINT 2 Go to waypoint INSTRUCTION_TYPE_GO_TO_WAYPOINT_WITH_DEPTH_SET_POINT 3 Go to waypoint with depth set point INSTRUCTION_TYPE_GO_TO_DEPTH_SET_POINT 4 Go to depth set point INSTRUCTION_TYPE_SET_CAMERA_ACTION 5 Command used to take photo repeatedly or start, stop recording INSTRUCTION_TYPE_SET_CONTROL_MODE 6 Sets a new control mode INSTRUCTION_TYPE_SET_TILT_MAIN_CAMERA 7 Sets a new angle for the tilt servo INSTRUCTION_TYPE_SET_TILT_SERVO 8 Sets a new angle for the tilt servo INSTRUCTION_TYPE_WAIT_FOR_SEC 9 Waiting for requested time in seconds INSTRUCTION_TYPE_GO_TO_SURFACE 10 Go to the surface INSTRUCTION_TYPE_GO_TO_SEABED 11 Go to the seabed INSTRUCTION_TYPE_GO_TO_HOME 12 Returning to home <p></p>"},{"location":"protobuf-protocol/#missionstate","title":"MissionState","text":"<p>List of mission supervisor states.</p> Name Number Description MISSION_STATE_UNSPECIFIED 0 Unspecified MISSION_STATE_INACTIVE 1 Mission supervisor is inactive MISSION_STATE_READY 2 Ready to start mission MISSION_STATE_RUNNING 3 Mission is running MISSION_STATE_PAUSED 4 Mission is paused MISSION_STATE_COMPLETED 5 Mission is completed MISSION_STATE_ABORTED 6 Mission is aborted by the mission supervisor MISSION_STATE_FAILED_TO_LOAD_MISSION 7 Mission has failed to load MISSION_STATE_FAILED_TO_START_MISSION 8 Mission has failed to start <p></p> <p>Top</p>"},{"location":"protobuf-protocol/#req_repproto","title":"req_rep.proto","text":"<p>Request reply</p> <p>These messages define request / reply messages for the Blueye drone.</p> <p></p>"},{"location":"protobuf-protocol/#connectclientrep","title":"ConnectClientRep","text":"<p>Response after connecting a client to the drone.</p> <p>Contains information about which client is in control, and a list of all connected clients.</p> Field Type Label Description client_id uint32 The assigned ID of this client. client_id_in_control uint32 The ID of the client in control of the drone. connected_clients ConnectedClient repeated List of connected clients. <p></p>"},{"location":"protobuf-protocol/#connectclientreq","title":"ConnectClientReq","text":"<p>Connect a new client to the drone.</p> Field Type Label Description client_info ClientInfo Information about the client connecting to the drone. <p></p>"},{"location":"protobuf-protocol/#disconnectclientrep","title":"DisconnectClientRep","text":"<p>Response after disconnecting a client from the drone.</p> <p>Contains information about which clients are connected and in control.</p> Field Type Label Description client_id_in_control uint32 The ID of the client in control of the drone. connected_clients ConnectedClient repeated List of connected clients. <p></p>"},{"location":"protobuf-protocol/#disconnectclientreq","title":"DisconnectClientReq","text":"<p>Disconnect a client from the drone.</p> <p>This request will remove the client from the list of connected clients. It allows clients to disconnect instantly, without waiting for a watchdog to clear the client in control, or promote a new client to be in control.</p> Field Type Label Description client_id uint32 The assigned ID of the client to disconnect. <p></p>"},{"location":"protobuf-protocol/#getbatteryrep","title":"GetBatteryRep","text":"<p>Response with essential battery information.</p> Field Type Label Description battery Battery Essential battery information. <p></p>"},{"location":"protobuf-protocol/#getbatteryreq","title":"GetBatteryReq","text":"<p>Request essential battery information.</p> <p>Can be used to instantly get battery information, instead of having to wait for the BatteryTel message to be received.</p> <p></p>"},{"location":"protobuf-protocol/#getcameraparametersrep","title":"GetCameraParametersRep","text":"<p>Response with the currently set camera parameters.</p> Field Type Label Description camera_parameters CameraParameters The currently set camera parameters. <p></p>"},{"location":"protobuf-protocol/#getcameraparametersreq","title":"GetCameraParametersReq","text":"<p>Request to get the currently set camera parameters.</p> Field Type Label Description camera Camera Which camera to read camera parameters from. <p></p>"},{"location":"protobuf-protocol/#getmissionrep","title":"GetMissionRep","text":"<p>Get active mission response.</p> Field Type Label Description mission Mission active mission with waypoints <p></p>"},{"location":"protobuf-protocol/#getmissionreq","title":"GetMissionReq","text":"<p>Service request to the reference_generator to get the active mission.</p> <p></p>"},{"location":"protobuf-protocol/#getoverlayparametersrep","title":"GetOverlayParametersRep","text":"<p>Response with the currently set video overlay parameters.</p> Field Type Label Description overlay_parameters OverlayParameters The currently set overlay parameters. <p></p>"},{"location":"protobuf-protocol/#getoverlayparametersreq","title":"GetOverlayParametersReq","text":"<p>Request to get currently set video overlay parameters.</p> <p></p>"},{"location":"protobuf-protocol/#gettelemetryrep","title":"GetTelemetryRep","text":"<p>Response with latest telemetry</p> Field Type Label Description payload google.protobuf.Any The latest telemetry data, empty if no data available. <p></p>"},{"location":"protobuf-protocol/#gettelemetryreq","title":"GetTelemetryReq","text":"<p>Request to get latest telemetry data</p> Field Type Label Description message_type string Message name, f. ex. \"AttitudeTel\" <p></p>"},{"location":"protobuf-protocol/#pingrep","title":"PingRep","text":"<p>Response message from a PingReq request.</p> <p></p>"},{"location":"protobuf-protocol/#pingreq","title":"PingReq","text":"<p>The simplest message to use to test request/reply communication with the drone.</p> <p>The drone replies with a PingRep message immediately after receiving the PingReq.</p> <p></p>"},{"location":"protobuf-protocol/#setcameraparametersrep","title":"SetCameraParametersRep","text":"<p>Response after setting the camera parameters.</p> <p></p>"},{"location":"protobuf-protocol/#setcameraparametersreq","title":"SetCameraParametersReq","text":"<p>Request to set camera parameters.</p> Field Type Label Description camera_parameters CameraParameters The camera parameters to apply. <p></p>"},{"location":"protobuf-protocol/#setinstructionupdaterep","title":"SetInstructionUpdateRep","text":"<p>Response after updating an instruction in the current mission.</p> <p></p>"},{"location":"protobuf-protocol/#setinstructionupdatereq","title":"SetInstructionUpdateReq","text":"<p>Updates an instruction in current mission with a new instruction payload.</p> Field Type Label Description instruction Instruction instruction that will replace the desired instruction <p></p>"},{"location":"protobuf-protocol/#setmissionrep","title":"SetMissionRep","text":"<p>Response after setting a new mission.</p> <p></p>"},{"location":"protobuf-protocol/#setmissionreq","title":"SetMissionReq","text":"<p>Issue a desired mission to the reference_generator.</p> Field Type Label Description mission Mission requested mission isseued to the reference generator <p></p>"},{"location":"protobuf-protocol/#setoverlayparametersrep","title":"SetOverlayParametersRep","text":"<p>Response after setting video overlay parameters.</p> <p></p>"},{"location":"protobuf-protocol/#setoverlayparametersreq","title":"SetOverlayParametersReq","text":"<p>Request to set video overlay parameters.</p> Field Type Label Description overlay_parameters OverlayParameters The video overlay parameters to apply. <p></p>"},{"location":"protobuf-protocol/#setpubfrequencyrep","title":"SetPubFrequencyRep","text":"<p>Response after updating publish frequency</p> Field Type Label Description success bool True if message name valid and frequency successfully updated. <p></p>"},{"location":"protobuf-protocol/#setpubfrequencyreq","title":"SetPubFrequencyReq","text":"<p>Request to update the publish frequency</p> Field Type Label Description message_type string Message name, f. ex. \"AttitudeTel\" frequency float Publish frequency (max 100 Hz). <p></p>"},{"location":"protobuf-protocol/#setthicknessgaugeparametersrep","title":"SetThicknessGaugeParametersRep","text":"<p>Response after setting thicknes gauge parameters.</p> <p></p>"},{"location":"protobuf-protocol/#setthicknessgaugeparametersreq","title":"SetThicknessGaugeParametersReq","text":"<p>Request to set parameters for ultrasonic thickness gauge.</p> <p>The sound velocity is used to calculate the thickness of the material being measured.</p> Field Type Label Description sound_velocity uint32 Sound velocity in m/s <p></p>"},{"location":"protobuf-protocol/#synctimerep","title":"SyncTimeRep","text":"<p>Response after setting the system time on the drone.</p> Field Type Label Description success bool If the time was set successfully. <p></p>"},{"location":"protobuf-protocol/#synctimereq","title":"SyncTimeReq","text":"<p>Request to set the system time on the drone.</p> Field Type Label Description time SystemTime The time to set on the drone. <p></p> <p>Top</p>"},{"location":"protobuf-protocol/#telemetryproto","title":"telemetry.proto","text":"<p>Telemetry</p> <p>These messages define telemetry messages from the Blueye drone.</p> <p></p>"},{"location":"protobuf-protocol/#altitudetel","title":"AltitudeTel","text":"<p>Receive the current altitude of the drone.</p> Field Type Label Description altitude Altitude The altitude of the drone. <p></p>"},{"location":"protobuf-protocol/#aquatrollprobemetadatatel","title":"AquaTrollProbeMetadataTel","text":"<p>Metadata from the In-Situ Aqua Troll probe's common registers</p> Field Type Label Description probe AquaTrollProbeMetadata AquaTroll message containing sensor array. <p></p>"},{"location":"protobuf-protocol/#aquatrollsensormetadatatel","title":"AquaTrollSensorMetadataTel","text":"<p>Metadata from a single sensor from In-Situ Aqua Troll probe</p> Field Type Label Description sensors AquaTrollSensorMetadataArray AquaTroll message containing sensor array. <p></p>"},{"location":"protobuf-protocol/#aquatrollsensorparameterstel","title":"AquaTrollSensorParametersTel","text":"<p>Single sensor from In-Situ Aqua Troll probe</p> Field Type Label Description sensors AquaTrollSensorParametersArray AquaTroll message containing parameter array. <p></p>"},{"location":"protobuf-protocol/#attitudetel","title":"AttitudeTel","text":"<p>Receive the current attitude of the drone.</p> Field Type Label Description attitude Attitude The attitude of the drone. <p></p>"},{"location":"protobuf-protocol/#batterybq40z50tel","title":"BatteryBQ40Z50Tel","text":"<p>Receive detailed information about a battery using the BQ40Z50 battery management system.</p> Field Type Label Description battery BatteryBQ40Z50 Detailed battery information. <p></p>"},{"location":"protobuf-protocol/#batterytel","title":"BatteryTel","text":"<p>Receive essential information about the battery status.</p> Field Type Label Description battery Battery Essential battery information. <p></p>"},{"location":"protobuf-protocol/#cputemperaturetel","title":"CPUTemperatureTel","text":"<p>Drone CPU temperature</p> Field Type Label Description temperature CPUTemperature <p></p>"},{"location":"protobuf-protocol/#calibratedimutel","title":"CalibratedImuTel","text":"<p>Calibrated IMU data</p> Field Type Label Description imu Imu <p></p>"},{"location":"protobuf-protocol/#calibrationstatetel","title":"CalibrationStateTel","text":"<p>Calibration state used for calibration rotine.</p> Field Type Label Description calibration_state CalibrationState <p></p>"},{"location":"protobuf-protocol/#canisterbottomhumiditytel","title":"CanisterBottomHumidityTel","text":"<p>Receive humidity information from the bottom canister.</p> Field Type Label Description humidity CanisterHumidity Humidity information <p></p>"},{"location":"protobuf-protocol/#canisterbottomtemperaturetel","title":"CanisterBottomTemperatureTel","text":"<p>Receive temperature information from the bottom canister.</p> Field Type Label Description temperature CanisterTemperature Temperature information. <p></p>"},{"location":"protobuf-protocol/#canistertophumiditytel","title":"CanisterTopHumidityTel","text":"<p>Receive humidity information from the top canister.</p> Field Type Label Description humidity CanisterHumidity Humidity information <p></p>"},{"location":"protobuf-protocol/#canistertoptemperaturetel","title":"CanisterTopTemperatureTel","text":"<p>Receive temperature information from the top canister.</p> Field Type Label Description temperature CanisterTemperature Temperature information. <p></p>"},{"location":"protobuf-protocol/#connectedclientstel","title":"ConnectedClientsTel","text":"<p>List of connected clients telemetry message.</p> Field Type Label Description client_id_in_control uint32 The client id of the client in control. connected_clients ConnectedClient repeated List of connected clients. <p></p>"},{"location":"protobuf-protocol/#controlforcetel","title":"ControlForceTel","text":"<p>Control force in all directions.</p> Field Type Label Description control_force ControlForce <p></p>"},{"location":"protobuf-protocol/#controlmodetel","title":"ControlModeTel","text":"<p>Receive the current state of the control system.</p> Field Type Label Description state ControlMode State of the control system. <p></p>"},{"location":"protobuf-protocol/#controllerhealthtel","title":"ControllerHealthTel","text":"<p>Controller health indicating the load of the controller, used to set a color in the heading and depth bar.</p> Field Type Label Description controller_health ControllerHealth <p></p>"},{"location":"protobuf-protocol/#cpprobetel","title":"CpProbeTel","text":"<p>Cathodic Protection Potential probe telemetry message</p> Field Type Label Description cp_probe CpProbe Reading from cp probe. <p></p>"},{"location":"protobuf-protocol/#datastoragespacetel","title":"DataStorageSpaceTel","text":"<p>Data storage info.</p> Field Type Label Description storage_space StorageSpace <p></p>"},{"location":"protobuf-protocol/#depthtel","title":"DepthTel","text":"<p>Measurement of the drones position relative to the sea surface.</p> Field Type Label Description depth Depth <p></p>"},{"location":"protobuf-protocol/#divetimetel","title":"DiveTimeTel","text":"<p>Receive the dive time of the drone.</p> Field Type Label Description dive_time DiveTime The current dive time of the drone. <p></p>"},{"location":"protobuf-protocol/#droneinfotel","title":"DroneInfoTel","text":"<p>Receive metadata and information about the connected drone.</p> Field Type Label Description drone_info DroneInfo Various metadata such as software versions and serial number. <p></p>"},{"location":"protobuf-protocol/#dronetimetel","title":"DroneTimeTel","text":"<p>Receive time information from the drone.</p> Field Type Label Description real_time_clock SystemTime The real-time clock of the drone. monotonic_clock SystemTime The monotonic clock of the drone (time since power on). <p></p>"},{"location":"protobuf-protocol/#errorflagstel","title":"ErrorFlagsTel","text":"<p>Receive currently set error flags.</p> Field Type Label Description error_flags ErrorFlags Currently set error flags on the drone. <p></p>"},{"location":"protobuf-protocol/#forwarddistancetel","title":"ForwardDistanceTel","text":"<p>Distance to an object in front of the drone when a 1D pinger is mounted forwards.</p> Field Type Label Description forward_distance ForwardDistance <p></p>"},{"location":"protobuf-protocol/#genericservotel","title":"GenericServoTel","text":"<p>State of a generic servo</p> Field Type Label Description servo GenericServo Servo state <p></p>"},{"location":"protobuf-protocol/#guestportcurrenttel","title":"GuestPortCurrentTel","text":"<p>GuestPort current readings</p> Field Type Label Description current GuestPortCurrent <p></p>"},{"location":"protobuf-protocol/#guestportlightstel","title":"GuestPortLightsTel","text":"<p>Receive the status of any guest port lights connected to the drone.</p> Field Type Label Description lights Lights <p></p>"},{"location":"protobuf-protocol/#imu1tel","title":"Imu1Tel","text":"<p>Raw IMU data from IMU 1</p> Field Type Label Description imu Imu <p></p>"},{"location":"protobuf-protocol/#imu2tel","title":"Imu2Tel","text":"<p>Raw IMU data from IMU 2</p> Field Type Label Description imu Imu <p></p>"},{"location":"protobuf-protocol/#iperftel","title":"IperfTel","text":"<p>Iperf indicates the available bandwidth on the tether from drone to surface unit.</p> Field Type Label Description status IperfStatus <p></p>"},{"location":"protobuf-protocol/#lasertel","title":"LaserTel","text":"<p>Receive the status of any lasers connected to the drone.</p> Field Type Label Description laser Laser <p></p>"},{"location":"protobuf-protocol/#lightstel","title":"LightsTel","text":"<p>Receive the status of the main lights of the drone.</p> Field Type Label Description lights Lights <p></p>"},{"location":"protobuf-protocol/#medusaspectrometerdatatel","title":"MedusaSpectrometerDataTel","text":"<p>Medusa gamma ray sensor spectrometer data</p> Field Type Label Description data MedusaSpectrometerData <p></p>"},{"location":"protobuf-protocol/#missionstatustel","title":"MissionStatusTel","text":"<p>Mission status from the mission supervisor.</p> Field Type Label Description mission_status MissionStatus <p></p>"},{"location":"protobuf-protocol/#multibeamservotel","title":"MultibeamServoTel","text":"<p>State of the servo installed in the multibeam</p> Field Type Label Description servo MultibeamServo Multibeam servo state <p></p>"},{"location":"protobuf-protocol/#nstreamerstel","title":"NStreamersTel","text":"<p>Number of connected clients streaming video.</p> Field Type Label Description n_streamers NStreamers <p></p>"},{"location":"protobuf-protocol/#notificationtel","title":"NotificationTel","text":"<p>Notification from the control system.</p> Field Type Label Description notification Notification <p></p>"},{"location":"protobuf-protocol/#pilotgpspositiontel","title":"PilotGPSPositionTel","text":"<p>Pilot position (originating from device GPS) for logging.</p> Field Type Label Description position LatLongPosition <p></p>"},{"location":"protobuf-protocol/#positionestimatetel","title":"PositionEstimateTel","text":"<p>Position estimate of the drone if a DVL or a positioning system is available.</p> Field Type Label Description position_estimate PositionEstimate <p></p>"},{"location":"protobuf-protocol/#recordstatetel","title":"RecordStateTel","text":"<p>Record state from the drone.</p> Field Type Label Description record_state RecordState <p></p>"},{"location":"protobuf-protocol/#referenceautopilottel","title":"ReferenceAutoPilotTel","text":"<p>Reference for the auto pilot when a mission is active.</p> Field Type Label Description reference_auto_pilot ReferenceAutoPilot <p></p>"},{"location":"protobuf-protocol/#referencetel","title":"ReferenceTel","text":"<p>Reference signals indicating desired states.</p> Field Type Label Description reference Reference <p></p>"},{"location":"protobuf-protocol/#thicknessgaugetel","title":"ThicknessGaugeTel","text":"<p>Thickness gauge measurement telemetry message.</p> Field Type Label Description thickness_gauge ThicknessGauge Tickness measurement with a cygnus gauge. <p></p>"},{"location":"protobuf-protocol/#tiltangletel","title":"TiltAngleTel","text":"<p>Tilt angle state on main camera.</p> Field Type Label Description angle TiltAngle <p></p>"},{"location":"protobuf-protocol/#tiltstabilizationtel","title":"TiltStabilizationTel","text":"<p>Tilt stabilization state.</p> Field Type Label Description state TiltStabilizationState <p></p>"},{"location":"protobuf-protocol/#timelapsestatetel","title":"TimeLapseStateTel","text":"<p>Time-lapse state from the drone.</p> Field Type Label Description time_lapse_state TimeLapseState <p></p>"},{"location":"protobuf-protocol/#videostoragespacetel","title":"VideoStorageSpaceTel","text":"<p>Video storage info.</p> Field Type Label Description storage_space StorageSpace <p></p>"},{"location":"protobuf-protocol/#watertemperaturetel","title":"WaterTemperatureTel","text":"<p>Water temerature from the depth sensor.</p> Field Type Label Description temperature WaterTemperature"},{"location":"protobuf-protocol/#scalar-value-types","title":"Scalar Value Types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby  double double double float float64 double float Float  float float float float float32 float float Float  int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required)  int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum  uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required)  uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required)  sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required)  sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum  fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required)  fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum  sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required)  sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum  bool bool boolean boolean bool bool boolean TrueClass/FalseClass  string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8)  bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)"},{"location":"quick_start/","title":"Quick Start","text":""},{"location":"quick_start/#installation","title":"Installation","text":"<p>The SDK requires Python 3.9 or higher. Since many operating systems do not package the newest version of Python we recommend using <code>pyenv</code> or something similar for configuring multiple python versions on the same system. Pyenv also has the added benefit of managing your virtual environments for you, though you are of course free to use other tools for that as well.</p> <p>The instructions below show the necessary steps to get started with the SDK on a fresh install:</p> Windows <p>Install Python</p> <p>Install Python 3.9 or higher, you can find the latest python versions here. Remember to check the option \"Add Python to path\" when installing.</p> <p>Install virtualenv for managing Python versions (optional)</p> <p>Using a virtual environment is not strictly necessary, but it greatly simplifies the development of Python packages. <pre><code># Upgrade pip version\npython -m pip install --upgrade pip\npip install virtualenv\n</code></pre></p> <p>Next, we create a virtual environment</p> <p><pre><code>cd .\\Desktop\nmkdir drone_project\ncd .\\drone_project\n# Replace \"C:\\Program Files\\Python310\\python.exe\" with the path\n# to the python version you want to use in the line below\nvirtualenv blueye_sdk_env -p \"C:\\Program Files\\Python310\\python.exe\"\n</code></pre> activate the virtual environment <pre><code>.\\blueye_sdk_env\\Scripts\\activate.bat\n</code></pre> if you are not allowed to activate the virtual environment, you might have to allow running unsigned scripts, see this link for instructions.</p> <p>Install the SDK</p> <p>Now we're ready to install the SDK, which should be as simple as</p> <pre><code>pip install blueye.sdk\n</code></pre> <p>or, if you want to include the dependencies required for running the examples shown in this documentation you should run</p> <pre><code>pip install \"blueye.sdk[examples]\"\n</code></pre> Mac OS <p>** Install the necessary Python version**</p> <p>Install pyenv, for more instructions see the pyenv-installer</p> <pre><code>curl https://pyenv.run | bash\npyenv update\n</code></pre> <p>If you want pyenv to be loaded each time you open a new terminal you can add this to your .zshrc or the equivalent for your terminal <pre><code>export PATH=\"$HOME/.pyenv/bin:$PATH\"\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n</code></pre></p> <p>The Pyenv wiki recommends installing some additional dependencies before building Python.</p> <pre><code># optional, but recommended:\nbrew install openssl readline sqlite3 xz zlib\n</code></pre> <p>When running Mojave or higher (10.14+) you will also need to install the additional SDK headers: <pre><code>sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /\n</code></pre> Then build Python with pyenv</p> <pre><code>pyenv install 3.12\n</code></pre> <p>Create a virtual environment</p> <p>Using a virtual environment is not strictly necessary, but it greatly simplifies the development of Python packages.</p> <p>Since we already have pyenv installed we'll use it to create a virtual environment,</p> <pre><code>pyenv virtualenv 3.12 blueye.sdk\npyenv activate blueye.sdk\n</code></pre> <p>Install the SDK</p> <p>Now we're ready to install the SDK, which should be as simple as.</p> <pre><code>pip install blueye.sdk\n</code></pre> <p>or, if you want to include the dependencies required for running the examples shown in this documentation you should run</p> <pre><code>pip install \"blueye.sdk[examples]\"\n</code></pre> Linux <p>These instructions are directed at Ubuntu, but the process should be similar for other distributions.</p> <p>Install the necessary Python version</p> <p>Install pyenv, for more instructions see the pyenv-installer</p> <pre><code>curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash\npyenv update\n</code></pre> <p>Install the needed dependencies for building python 3.12</p> <p><pre><code>apt install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \\\nlibreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \\\nxz-utils tk-dev libffi-dev liblzma-dev python-openssl\n</code></pre> Then build python with pyenv <pre><code>pyenv install 3.12\n</code></pre></p> <p>Create a virtual environment</p> <p>Using a virtual environment is not strictly necessary, but it greatly simplifies the development of Python packages.</p> <p>Since we already have pyenv installed we'll use it to create a virtual environment,</p> <pre><code>pyenv virtualenv 3.12 blueye.sdk\npyenv activate blueye.sdk\n</code></pre> <p>Install the SDK</p> <p>Now we're ready to install the SDK, which should be as simple as</p> <pre><code>pip install blueye.sdk\n</code></pre> <p>or, if you want to include the dependencies required for running the examples shown in this documentation you should run</p> <pre><code>pip install \"blueye.sdk[examples]\"\n</code></pre>"},{"location":"quick_start/#connect-to-the-drone","title":"Connect to the drone","text":"<p>To use the SDK your computer must be connected to the drone via the surface unit WiFi. For a how-to on turning on the drone and surface unit you can watch the quick start video.</p>"},{"location":"quick_start/#control-the-drone","title":"Control the drone","text":"<p>Most of the functionality is controlled using Python properties and we will illustrate the use of properties by showing how to control the lights:</p> <p><pre><code>import time\nfrom blueye.sdk import Drone\n\n# When the Drone object is instantiatied a connection to the drone is established\nmyDrone = Drone()\n\n# Setting the lights property to 0.1 (10 %)\nmyDrone.lights = 0.1\n\ntime.sleep(2)\n\n# We can also get the current brightness of the lights through the lights property\nprint(f\"Current light intensity: {myDrone.lights}\")\nmyDrone.lights = 0\n\n# Properties can also be used for reading telemetry data from the drone\nprint(f\"Current depth in meters: {myDrone.depth}\")\n</code></pre> For an overview of the properties that are available for controlling and reading data from the drone, go to the <code>Reference section</code> of the documentation. The valid input ranges and descriptions of the different properties can also be found there.</p> <p>Tip</p> <p>You can explore the properties of the drone interactively using an interactive python interpreter like <code>iPython</code>, install it with: <pre><code>pip install ipython\n</code></pre> By instantiating a Drone object and using the completion key (normally the <code>tab-key \u21b9</code>) you can get a interactive list of the available properties on the drone, it is then easy to try setting and getting the different properties. </p>"},{"location":"quick_start/#watching-the-video-stream","title":"Watching the video stream","text":"<p>The easiest way to open the  RTSP video stream is using <code>VLC media player</code>. Once VLC is downloaded you can start the stream like this, the RTSP URL is: <code>rtsp://192.168.1.101:8554/test</code> </p> <p>For lower latency streaming (on a PC) you can see the instructions on using <code>Gstreamer</code>, or if you just want to watch a low latency stream you can download the Blueye Observer app. (iOS / Android)</p> <p>The normal Blueye app can not be used to spectate when controlling the drone from the SDK because it will interfere with the commands sent from the SDK. The Observer app, however, is only a spectator and can be used together with the SDK.</p>"},{"location":"quick_start/#explore-the-examples","title":"Explore the examples","text":"<p>For further examples on how to use the SDK to control the drone have a look at the motion examples.</p> <p>Remember to install the example dependencies before running the examples.</p> <pre><code>pip install \"blueye.sdk[examples]\"\n</code></pre>"},{"location":"quick_start/#local-documentation","title":"Local documentation","text":"<p>Since the drone surface unit (usually) does not have internet access it can be a bit tricky to reference this documentation while developing on the drone. Luckily when you install the SDK from PyPI it includes a pre-built, local copy of this documentation. This documentation can be viewed by executing the following Python snippet:</p> <pre><code>import blueye.sdk\n\nblueye.sdk.open_local_documentation()\n</code></pre>"},{"location":"telemetry-callback/","title":"Subscribing to a telemetry message","text":"<p>The drone publishes all of its telemetry data as protobuf encoded messages transmitted via a ZeroMQ socket. You can find the protobuf message definitions in the Protocol Definitions repository, and the generated python definitions are located in the blueye.protocol repository.</p> <p>Upon connection the Drone object will instantiate an instance of the Telemetry class as the <code>telemetry</code> attribute. Using this attribute one can control various telemetry function and add/remove new callbacks.</p>"},{"location":"telemetry-callback/#adding-a-callback","title":"Adding a callback","text":"<p>To add a callback we need to use the <code>add_msg_callback</code> function, and provide it with a list of telemetry messages types we want it to trigger on, as well as a function handle to call. All available telemetry messages can be found in telemetry.proto</p>"},{"location":"telemetry-callback/#removing-a-callback","title":"Removing a callback","text":"<p>A callback is removed with <code>remove_msg_callback</code> using the ID returned when creating the callback.</p>"},{"location":"telemetry-callback/#adjusting-the-publishing-frequency-of-a-telemetry-message","title":"Adjusting the publishing frequency of a telemetry message","text":"<p>By using the <code>set_msg_publish_frequency</code> function we can alter how often the drone should publish the specified telemetry message. The valid frequency range is 0 to 100 Hz.</p>"},{"location":"telemetry-callback/#example","title":"Example","text":"<p>The following example illustrates how can use a callback to print the depth reported by the drone.</p> <pre><code>\"\"\"print_depth.py\n\nThis example program demonstrates how one can add a callback function to a telemetry message, as\nwell as how to adjust the frequency of that telemetry message, and how to remove the callback.\n\"\"\"\n\nimport time\n\nimport blueye.protocol as bp\n\nfrom blueye.sdk import Drone\n\n\ndef callback_depth(msg_type: str, msg: bp.DepthTel):\n    \"\"\"Callback for the depth telemetry message\n\n    This function is called once for every DepthTel message received by the telemetry watcher\n    \"\"\"\n    print(f\"Got a {msg_type} message with depth: {msg.depth.value:.3f}\")\n\n\nif __name__ == \"__main__\":\n    # Instantiate a drone object\n    my_drone = Drone()\n\n    # Add a callback for the DepthTel message, storing the ID for later use\n    callback_id = my_drone.telemetry.add_msg_callback([bp.DepthTel], callback_depth)\n\n    # Adjust the publishing frequency to 5 Hz\n    my_drone.telemetry.set_msg_publish_frequency(bp.DepthTel, 5)\n\n    # Callback is triggered by a separate thread while we sleep here\n    time.sleep(5)\n\n    # Remove the callback using the ID we stored when it was created (not really necessary here\n    # since the my_drone object goes out of scope immediately afterwards)\n    my_drone.telemetry.remove_msg_callback(callback_id)\n</code></pre>"},{"location":"logs/legacy-log-file-format/","title":"Legacy log file format","text":"<p>This page describes the legacy log file format. Blunux v3.0 introduced a new logfile format, and no longer logs telemetry in this format. See Plotting for an example on how to use the new format.</p> <p>The log files from the Blueye drones are in essence a recording of the data that is published over UDP stored as a comma-separated-value (CSV) file.</p> <p>The rest of this page documents the most useful fields of the log files. The column indices listed are zero-based. If you feel that some fields need more documentation, feel free to open an issue on Github, and we'll happily supply the requested information.</p>"},{"location":"logs/legacy-log-file-format/#time","title":"Time","text":"Column Type Unit Description 2 Integer Milliseconds The elapsed time since the start of the log 3 Float Unix timestamp Global time"},{"location":"logs/legacy-log-file-format/#position","title":"Position","text":"<p>The position is based on the user's phone's GPS at the start of the dive.</p> Column Type Unit Description 6 Float Degrees Latitude 7 Float Degrees Longitude"},{"location":"logs/legacy-log-file-format/#file-storage","title":"File storage","text":"Column Type Unit Description 8 Integer Bytes Total file storage on the drone 9 Integer Bytes Available free space"},{"location":"logs/legacy-log-file-format/#temperature","title":"Temperature","text":"<p>Note: All temperatures are in \"deci-degrees Celsius\", ie. to get \u00b0C you need to divide the value by 10.</p> Column Type Unit Description 11 Integer Deci-Celsius Bottom canister temperature 12 Integer Deci-Celsius Water temperature 13 Integer Deci-Celsius Top canister temperature 14 Integer Deci-Celsius CPU temperature"},{"location":"logs/legacy-log-file-format/#internal-humidity","title":"Internal humidity","text":"<p>Note: The unit is in deci-percent (ie. divide by 10 to get percent).</p> Column Type Unit Description 15 Integer Deci-percent Humidity in the top canister. 16 Integer Deci-percent Humidity in the bottom canister."},{"location":"logs/legacy-log-file-format/#lights","title":"Lights","text":"Column Type Unit Description 17 Integer - State of the on-board light. Range is 0 to 255."},{"location":"logs/legacy-log-file-format/#depth","title":"Depth","text":"Column Type Unit Description 22 Integer Milli-meters Depth below water surface. Positive values are below the surface, negative are above."},{"location":"logs/legacy-log-file-format/#control-force","title":"Control force","text":"<p>Control force is the force exerted on the drone by the control system.</p> Column Type Unit Description 29 Float Newton Force in the surge direction. 30 Float Newton Force in the sway direction. 31 Float Newton Force in the heave direction. 32 Float Newton-meters Moment in the yaw direction."},{"location":"logs/legacy-log-file-format/#orientation-pose","title":"Orientation (pose)","text":"Column Type Unit Description 32 Float Degrees Roll angle. Range from -180\u00b0 - 180\u00b0 33 Float Degrees Pitch angle. Range from -180\u00b0 - 180\u00b0 34 Float Degrees Yaw angle. Range from -180\u00b0 - 180\u00b0"},{"location":"logs/legacy-log-file-format/#battery","title":"Battery","text":"Column Type Unit Description 38 Integer Milli-volts Battery voltage 39 Integer Milli-amperes Battery current. Negative values are drained from the battery, positive are charged. 41 Integer Percent Relative state of charge. Range from 0 - 100 %"},{"location":"logs/listing-and-downloading/","title":"Logs from the drone","text":"<p>When the drone is powered on a new log file is created, where it stores telemetry data such as depth, temperature, and more, is created. The drone will log data as long as it is powered on. These files can be downloaded to your local system where you can plot them or use them however you see fit.</p> <p>Blunux v3.0 introduced a a modern binary log format to replace the older CSV-based logs. This updated format employs gzip compression and Google's Protocol Buffers (Protobuf) for serialization. Gzip compression reduces log file sizes, optimizing storage and data transfer. The integration of Protobuf streamlines log parsing and analysis, offering more efficient data handling.</p> <p>Every entry in the binary log is a BinlogRecord Protobuf message, which in turn contains a unix timestamp in UTC, the monotonic timestamp (time since boot), and an Any message wrapping the Blueye telemetry message. The telemetry messages are documented in the telemetry proto.</p>"},{"location":"logs/listing-and-downloading/#listing-the-log-files","title":"Listing the log files","text":"<p>If your drone has completed 5 dives and you do</p> Binary logsLegacy logs <pre><code>from blueye.sdk import Drone\nmyDrone = Drone()\nprint(myDrone.logs)\n</code></pre> <pre><code>from blueye.sdk import Drone\nmyDrone = Drone()\nprint(myDrone.legacy_logs)\n</code></pre> <p>you should see something like the following lines be printed</p> Binary logsLegacy logs <p><pre><code>Name                                Time                Max depth    Size\nBYEDP000000_ea9ac92e1817a1d4_00000  07. Aug 2023 12:10  7 m          217.1 KiB\nBYEDP000000_ea9ac92e1817a1d4_00001  08. Aug 2023 12:35  20 m         1.6 MiB\nBYEDP000000_ea9ac92e1817a1d4_00002  09. Aug 2023 14:20  100 m        3.8 MiB\nBYEDP000000_ea9ac92e1817a1d4_00003  10. Aug 2023 09:15  200 m        6.5 MiB\nBYEDP000000_ea9ac92e1817a1d4_00004  11. Aug 2023 15:01  300 m        10.2 MiB\n</code></pre> The first part of the filename (the part before the _) is the serial number of your drone, the second part is the unique ID of the drone, and the third part is the dive number. In addition we see the start time of the dive, the maximum depth reached, as well as the size of the log file.</p> <p>Max depth is rounded down to the nearest meter for dives up to 10 meters, rounded down to the nearest 10 meters for dives up to 100 meters, and rounded down to the nearest 100 meters for deeper dives.</p> <pre><code>Name                        Time                Max depth  Size\nea9add4d40f69d4-00000.csv   24. Oct 2018 09:40  21.05 m    6.3 MiB\nea9add4d40f69d4-00001.csv   25. Oct 2018 10:29  21.06 m    879.2 KiB\nea9add4d40f69d4-00002.csv   31. Oct 2018 10:05  60.69 m    8.5 MiB\nea9add4d40f69d4-00003.csv   31. Oct 2018 12:13  41.68 m    8.4 MiB\nea9add4d40f69d4-00004.csv   02. Nov 2018 08:59  52.52 m    7.8 MiB\n</code></pre> <p>The first part of the filename (the part before the -) is the unique ID of your drone and second part is the dive number. In addition we see the start time of the dive, the maximum depth reached, as well as the size of the log file.</p> <p>The drone will by default filter out logs with a max depth below 20 cm. If you wish to list all logs you can do so by manually refreshing the log index with the <code>get_all_logs</code> parameter set to to <code>True</code>.</p> <pre><code>myDrone.legacy_logs.refresh_log_index(get_all_logs=True)\n</code></pre>"},{"location":"logs/listing-and-downloading/#selecting-a-log-file","title":"Selecting a log file","text":"<p>There are multiple ways to select a log file from the logs index, here are some examples showing how to select by index, by name, and by slice.</p> <p>By index</p> Binary logsLegacy logs <pre><code>first_log: LogFile = myDrone.logs[0]\nlast_log: LogFile = myDrone.logs[-1]\n</code></pre> <pre><code>first_log: LegacyLogFile = myDrone.legacy_logs[0]\nlast_log: LegacyLogFile = myDrone.legacy_logs[-1]\n</code></pre> <p>By name</p> Binary logsLegacy logs <pre><code>log: LogFile = myDrone.logs[\"BYEDP000000_ea9ac92e1817a1d4_00000\"]\n</code></pre> <pre><code>log: LegacyLogFile = myDrone.legacy_logs[\"ea9add4d40f69d4-00000.csv\"]\n</code></pre> <p>By slice</p> Binary logsLegacy logs <pre><code>first_three_logs: Logs = myDrone.logs[:3]\nevery_other_log: Logs = myDrone.logs[::2]\n</code></pre> <pre><code>first_three_logs: List[LegacyLogFile] = myDrone.legacy_logs[:3]\nevery_other_log: List[LegacyLogFile] = myDrone.legacy_logs[::2]\n</code></pre>"},{"location":"logs/listing-and-downloading/#downloading-a-log-file-to-your-computer","title":"Downloading a log file to your computer","text":"<p>When you want to download a log file all you have to do is to call the <code>download()</code> method on the desired log and the file will be downloaded to your current folder.</p> <p>Following are some examples of how one can download log files.</p> <p>Downloading a single log file</p> Binary logsLegacy logs <p>The following will download the first log with its default name to the current folder: <pre><code>myDrone.logs[0].download()\n</code></pre></p> <p>If we wish to specify the name/path of the log file we can use the optional <code>output_path</code> parameter: <pre><code>myDrone.logs[0].download(output_path=\"/tmp/my_log.bez\")\n</code></pre></p> <p><pre><code>myDrone.legacy_logs[0].download()\n</code></pre> The <code>download()</code> method takes two optional parameters, <code>output_path</code> and <code>output_name</code>. These specify, respectively, which folder the log is downloaded to and what name it's stored with. So if we want to download the first log to the folder <code>/tmp</code> and name it <code>my_log</code> we can do</p> <pre><code>myDrone.legacy_logs[0].download(output_path=\"/tmp\", output_name=\"my_log\")\n</code></pre> <p>Downloading multiple log files</p> <p>Downloading multiple log files is solved by a simple Python for-loop. The example below shows how one can download the last 3 logs to the current folder:</p> Binary logsLegacy logs <pre><code>for log in myDrone.logs[:-3]:\n    log.download()\n</code></pre> <pre><code>for log in myDrone.legacy_logs[:-3]:\n    log.download()\n</code></pre> <p>Adding a prefix to log names</p> <p>The example code below shows how one can add a simple prefix to all log files when downloading:</p> Binary logsLegacy logs <pre><code>prefix = \"pre_\"\nfor log in myDrone.logs:\n    log.download(output_path=prefix+log.name+\".bez\")\n</code></pre> <pre><code>prefix = \"pre_\"\nfor log in myDrone.logs:\n    log.download(output_name=prefix+log.name)\n</code></pre>"},{"location":"logs/plotting/","title":"Plotting","text":"<p>This example shows how one can pull a log file from the drone and use pandas and matplotlib to plot it.</p> Binary logsLegacy Logs <p>We'll start by downloading a log file from the drone</p> <pre><code>from blueye.sdk import Drone\n\nmyDrone = Drone()\nlog = myDrone.logs[0]\n</code></pre> <p>Next we'll parse the log to a stream and create a pandas dataframe from the records. We'll also specify the column names to make it easier to work with the dataframe later.</p> <pre><code>import pandas as pd\nimport blueye.protocol as bp\n\ncolumns = [\"rt\", \"delta\", \"meta\", \"message\"]\nlog_stream = log.parse_to_stream()\ndivelog = pd.DataFrame.from_records(log_stream, columns=columns)\n</code></pre> <p>We'll now filter out all entries that are not depth telemetry messages and messages that were logged before the start of the dive.</p> <pre><code>depth_log = divelog[divelog.meta == bp.DepthTel]\ndepth_log = depth_log[depth_log.rt &gt; log.start_time]\n</code></pre> <p>We can now extract the depth value from the remaining entries</p> <pre><code>depth_log[\"depth\"] = depth_log[\"message\"].apply(lambda x: x.depth.value)\n</code></pre> <p>We'll prepare our axes for plotting</p> <pre><code>x = depth_log[\"rt\"]\ny = depth_log[\"depth\"]\n</code></pre> <p>We'll start by downloading a log file from the drone</p> <pre><code>from blueye.sdk import Drone\n\nmyDrone = Drone()\nmyDrone.legacy_logs[0].download(output_name=\"log0.csv\")\n</code></pre> <p>We can now read the csv-file into a pandas object for easy manipulation</p> <pre><code>import pandas as pd\n\ndivelog = pd.read_csv(\"log0.csv\")\n</code></pre> <p>and then we'll convert the unix timestamp in <code>rt_clock</code> into a more readable format:</p> <pre><code>divelog[\"rt_clock\"] = pandas.to_datetime(divelog[\"rt_clock\"], unit=\"s\")\n</code></pre> <p>We'll prepare our axes for plotting</p> <pre><code>x = divelog[\"rt_clock\"]\ny = divelog[\"depth\"] / 1000  # Dividing by 1000 to get depth in meters\n</code></pre> <p>Next we will plot depth vs time with matplotlib: <pre><code>import matplotlib.pyplot as plt\n\n# Instantiate our figure and axes to plot on\nfigure, axes = plt.subplots()\n\n# Plot the depth values against time\naxes.plot(x, y, label=\"depth\")\n\n# Set title, labels, and legend\nplt.title(\"Depth chart\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Depth [m]\")\nplt.legend()\n\n# Save the figure\nfigure.savefig(\"depth_plot.svg\")\n</code></pre></p> <p>This should yield us a plot that looks something like this: </p> <p>See the matplotlib documentation for more ways to plot your data.</p>"},{"location":"logs/runtime-logs/","title":"Log statements from the blueye.sdk","text":"<p>The <code>blueye.sdk</code> package uses the standard Python logging module to log information about the SDK's operation. The log statements are useful for debugging and troubleshooting, and can be used to get a better understanding of what is happening inside the SDK.</p> <p>Note: These logs must not be confused with the divelogs that are generated and stored on the drone. See Listing and downloading logfiles for instructions on how to get the divelogs.</p> <p>Events with severity <code>WARNING</code> or greater are printed to <code>sys.stderr</code> by default, but can be configured to be written to a file or sent to a remote server. See the Python logging documentation for more information about how to configure the logging module.</p>"},{"location":"logs/runtime-logs/#enabling-logging-with-lower-severity","title":"Enabling logging with lower severity","text":"<p>By default, the events with severity lower than <code>WARNING</code> are muted. To enable them, you need to configure the logger to capture the logs. Here's an example of how to enable debug logs:</p> <pre><code>import logging\nimport blueye.sdk\n\ndef enable_debug_logs():\n    # Set the logger configuration\n    logger = logging.getLogger(blueye.sdk.__name__)\n    logger.setLevel(logging.DEBUG)\n\n    # Define the log handler\n    handler = logging.StreamHandler()\n    handler.setLevel(logging.DEBUG)\n\n    # Define the log format\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    # Add the log handler to the logger\n    logger.addHandler(handler)\n</code></pre> <p>In the example above, we import the necessary modules and create a function <code>enable_runtime_logs()</code> to enable the runtime logs. We configure the logger to capture logs with the <code>logging.getLogger(blueye.sdk.__name__)</code> statement and set the log level to <code>DEBUG</code> to capture all logs.</p> <p>We also define a log handler to determine where the logs should be outputted. In this example, we use a <code>logging.StreamHandler()</code> to print the logs to the console. You can customize the log handler based on your requirements, such as writing logs to a file or sending them to a remote server.</p> <p>Finally, we set the log format using <code>logging.Formatter()</code> and add the log handler to the logger using <code>logger.addHandler(handler)</code>.</p>"},{"location":"logs/runtime-logs/#disabling-logging","title":"Disabling Logging","text":"<p>If you want to completely disable logging and prevent any logs from being captured, you can use a <code>NullHandler</code>. Here's an example:</p> <pre><code>import logging\nimport blueye.sdk\n\ndef disable_logging():\n    # Disable all logging\n    logger = logging.getLogger(blueye.sdk.__name__)\n    logger.addHandler(logging.NullHandler())\n</code></pre> <p>In the example above, we define a function <code>disable_logging()</code> that sets a <code>NullHandler</code> to the logger. The <code>NullHandler</code> is a special handler that essentially discards all log records, effectively disabling logging.</p>"},{"location":"movement/from-the-CLI/","title":"Controlling from the Command Line Interface","text":"<p>This is a super simple example showing how you make the drone move from the command line interface:</p> <pre><code>import time\nfrom blueye.sdk import Drone\nmyDrone = Drone()\nmyDrone.motion.surge = 0.4\ntime.sleep(1)\nmyDrone.motion.surge = 0\n</code></pre>"},{"location":"movement/with-a-gamepad/","title":"Controlling the drone from a gamepad","text":"<p>To run the example remember to first install the optional dependencies needed for running the examples <pre><code>pip install \"blueye.sdk[examples]\"\n</code></pre></p> <p>The example below illustrates how one could use an Xbox controller and the SDK to control the drone.</p> <p>The inputs library supports many other gamepads, so using a different controller should be as simple as looking up the event codes for the buttons/axes and mapping them to the functions you want.</p> <pre><code>import inputs\n\nfrom blueye.sdk import Drone\n\n\nclass JoystickHandler:\n    \"\"\"Maps drone functions to joystick events\"\"\"\n\n    def __init__(self, drone):\n        self.drone = drone\n        self.event_to_function_map = {\n            \"BTN_NORTH\": self.handle_x_button,\n            \"BTN_WEST\": self.handle_y_button,\n            \"BTN_EAST\": self.handle_b_button,\n            \"BTN_SOUTH\": self.handle_a_button,\n            \"ABS_X\": self.handle_left_x_axis,\n            \"ABS_Y\": self.handle_left_y_axis,\n            \"ABS_Z\": self.handle_left_trigger,\n            \"ABS_RX\": self.handle_right_x_axis,\n            \"ABS_RY\": self.handle_right_y_axis,\n            \"ABS_RZ\": self.handle_right_trigger,\n        }\n\n    def handle_x_button(self, value):\n        \"\"\"Starts/stops the video recording\"\"\"\n        self.drone.camera.is_recording = value\n\n    def handle_y_button(self, value):\n        \"\"\"Turns lights on or off\"\"\"\n        if value:\n            if self.drone.lights &gt; 0:\n                self.drone.lights = 0\n            else:\n                self.drone.lights = 0.1\n\n    def handle_b_button(self, value):\n        \"\"\"Toggles autoheading\"\"\"\n        if value:\n            self.drone.motion.auto_heading_active = not self.drone.motion.auto_heading_active\n\n    def handle_a_button(self, value):\n        \"\"\"Toggles autodepth\"\"\"\n        if value:\n            self.drone.motion.auto_depth_active = not self.drone.motion.auto_depth_active\n\n    def filter_and_normalize(self, value, lower=5000, upper=32768):\n        \"\"\"Normalizing the joystick axis range from (default) -32768&lt;-&gt;32678 to -1&lt;-&gt;1\n\n        The sticks also tend to not stop at 0 when you let them go but rather some\n        low value, so we'll filter those out as well.\n        \"\"\"\n        if -lower &lt; value &lt; lower:\n            return 0\n        elif lower &lt;= value &lt;= upper:\n            return (value - lower) / (upper - lower)\n        elif -upper &lt;= value &lt;= -lower:\n            return (value + lower) / (upper - lower)\n        else:\n            return 0\n\n    def handle_left_x_axis(self, value):\n        self.drone.motion.yaw = self.filter_and_normalize(value)\n\n    def handle_left_y_axis(self, value):\n        self.drone.motion.heave = self.filter_and_normalize(value)\n\n    def handle_right_x_axis(self, value):\n        self.drone.motion.sway = self.filter_and_normalize(value)\n\n    def handle_right_y_axis(self, value):\n        self.drone.motion.surge = -self.filter_and_normalize(value)\n\n    def handle_left_trigger(self, value):\n        self.drone.motion.slow = self.filter_and_normalize(value, lower=0, upper=255)\n\n    def handle_right_trigger(self, value):\n        self.drone.motion.boost = self.filter_and_normalize(value, lower=0, upper=255)\n\n\nif __name__ == \"__main__\":\n    try:\n        myDrone = Drone()\n        handler = JoystickHandler(myDrone)\n        while True:\n            events = inputs.get_gamepad()\n            for event in events:\n                if event.code in handler.event_to_function_map:\n                    handler.event_to_function_map[event.code](event.state)\n\n    except KeyboardInterrupt:\n        pass\n</code></pre>"},{"location":"reference/blueye/protocol/aquatroll/","title":"Aquatroll","text":""},{"location":"reference/blueye/protocol/aquatroll/#blueye.protocol.types.aquatroll","title":"aquatroll","text":"<p>Classes:</p> <ul> <li> <code>AquaTrollDevice</code>           \u2013            <p>Aqua Troll Device IDs</p> </li> <li> <code>AquaTrollDeviceStatus</code>           \u2013            <p>Aqua Troll Device Status IDs</p> </li> <li> <code>AquaTrollParameter</code>           \u2013            <p>Aqua Troll Parameter IDs</p> </li> <li> <code>AquaTrollParameterBlock</code>           \u2013            <p>In-Situ Parameter Block</p> </li> <li> <code>AquaTrollProbeMetadata</code>           \u2013            <p>Attributes:</p> </li> <li> <code>AquaTrollQuality</code>           \u2013            <p>Aqua Troll Quality IDs</p> </li> <li> <code>AquaTrollSensor</code>           \u2013            <p>Aqua Troll Sensor IDs</p> </li> <li> <code>AquaTrollSensorMetadata</code>           \u2013            <p>In-Situ AquaTroll 500 sensor metadata</p> </li> <li> <code>AquaTrollSensorMetadataArray</code>           \u2013            <p>Attributes:</p> </li> <li> <code>AquaTrollSensorParameters</code>           \u2013            <p>Attributes:</p> </li> <li> <code>AquaTrollSensorParametersArray</code>           \u2013            <p>Attributes:</p> </li> <li> <code>AquaTrollSensorStatus</code>           \u2013            <p>Aqua Troll Sensor Status IDs</p> </li> <li> <code>AquaTrollUnit</code>           \u2013            <p>Aqua Troll Unit IDs</p> </li> <li> <code>SetAquaTrollConnectionStatus</code>           \u2013            <p>Request to change the In-Situ Aqua Troll connection status</p> </li> <li> <code>SetAquaTrollParameterUnit</code>           \u2013            <p>Request to set an In-Situ Aqua Troll parameter unit</p> </li> <li> <code>Type</code>           \u2013            <p>Type IDs</p> </li> </ul>"},{"location":"reference/blueye/protocol/aquatroll/#blueye.protocol.types.aquatroll.AquaTrollDevice","title":"AquaTrollDevice","text":"<p>Aqua Troll Device IDs</p>"},{"location":"reference/blueye/protocol/aquatroll/#blueye.protocol.types.aquatroll.AquaTrollDeviceStatus","title":"AquaTrollDeviceStatus","text":"<p>Aqua Troll Device Status IDs</p>"},{"location":"reference/blueye/protocol/aquatroll/#blueye.protocol.types.aquatroll.AquaTrollParameter","title":"AquaTrollParameter","text":"<p>Aqua Troll Parameter IDs</p>"},{"location":"reference/blueye/protocol/aquatroll/#blueye.protocol.types.aquatroll.AquaTrollParameterBlock","title":"AquaTrollParameterBlock","text":"<p>In-Situ Parameter Block</p> <p>Up to NUMBER_OF_SENSOR_PARAMETERS blocks may be part of a sensor</p> <p>Attributes:</p> <ul> <li> <code>measured_value</code>               (<code>float</code>)           \u2013            </li> <li> <code>parameter_id</code>               (<code>AquaTrollParameter</code>)           \u2013            </li> <li> <code>units_id</code>               (<code>AquaTrollUnit</code>)           \u2013            </li> <li> <code>data_quality_ids</code>               (<code>Sequence[AquaTrollQuality]</code>)           \u2013            </li> <li> <code>off_line_sentinel_value</code>               (<code>float</code>)           \u2013            </li> <li> <code>available_units</code>               (<code>Sequence[AquaTrollUnit]</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/aquatroll/#blueye.protocol.types.aquatroll.AquaTrollProbeMetadata","title":"AquaTrollProbeMetadata","text":"<p>Attributes:</p> <ul> <li> <code>timestamp</code>               (<code>Timestamp</code>)           \u2013            </li> <li> <code>status</code>               (<code>bool</code>)           \u2013            </li> <li> <code>register_map_template_version</code>               (<code>int</code>)           \u2013            </li> <li> <code>device_id</code>               (<code>AquaTrollDevice</code>)           \u2013            </li> <li> <code>device_serial_number</code>               (<code>int</code>)           \u2013            </li> <li> <code>manufacture_date</code>               (<code>Timestamp</code>)           \u2013            </li> <li> <code>firmware_version</code>               (<code>int</code>)           \u2013            </li> <li> <code>boot_code_version</code>               (<code>int</code>)           \u2013            </li> <li> <code>hardware_version</code>               (<code>int</code>)           \u2013            </li> <li> <code>max_data_logs</code>               (<code>int</code>)           \u2013            </li> <li> <code>total_data_log_memory</code>               (<code>int</code>)           \u2013            </li> <li> <code>total_battery_ticks</code>               (<code>int</code>)           \u2013            </li> <li> <code>last_battery_change</code>               (<code>Timestamp</code>)           \u2013            </li> <li> <code>device_name</code>               (<code>str</code>)           \u2013            </li> <li> <code>site_name</code>               (<code>str</code>)           \u2013            </li> <li> <code>latitude_coordinate</code>               (<code>float</code>)           \u2013            </li> <li> <code>longitude_coordinate</code>               (<code>float</code>)           \u2013            </li> <li> <code>altitude_coordinate</code>               (<code>float</code>)           \u2013            </li> <li> <code>current_time_utc</code>               (<code>Timestamp</code>)           \u2013            </li> <li> <code>device_status_flags</code>               (<code>Sequence[AquaTrollDeviceStatus]</code>)           \u2013            </li> <li> <code>used_battery_ticks</code>               (<code>int</code>)           \u2013            </li> <li> <code>used_data_log_memory</code>               (<code>int</code>)           \u2013            </li> <li> <code>sensors</code>               (<code>Sequence[AquaTrollSensor]</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/aquatroll/#blueye.protocol.types.aquatroll.AquaTrollQuality","title":"AquaTrollQuality","text":"<p>Aqua Troll Quality IDs</p>"},{"location":"reference/blueye/protocol/aquatroll/#blueye.protocol.types.aquatroll.AquaTrollSensor","title":"AquaTrollSensor","text":"<p>Aqua Troll Sensor IDs</p>"},{"location":"reference/blueye/protocol/aquatroll/#blueye.protocol.types.aquatroll.AquaTrollSensorMetadata","title":"AquaTrollSensorMetadata","text":"<p>In-Situ AquaTroll 500 sensor metadata (Mostly) static information about a connected sensor. Refer to Section 7 Sensor Common Registers in the In-Situ Modbus Communication Protocol</p> <p>Attributes:</p> <ul> <li> <code>timestamp</code>               (<code>Timestamp</code>)           \u2013            </li> <li> <code>sensor_id</code>               (<code>AquaTrollSensor</code>)           \u2013            </li> <li> <code>sensor_serial_number</code>               (<code>int</code>)           \u2013            </li> <li> <code>sensor_status_flags</code>               (<code>Sequence[AquaTrollSensorStatus]</code>)           \u2013            </li> <li> <code>last_factory_calibration</code>               (<code>Timestamp</code>)           \u2013            </li> <li> <code>next_factory_calibration</code>               (<code>Timestamp</code>)           \u2013            </li> <li> <code>last_user_calibration</code>               (<code>Timestamp</code>)           \u2013            </li> <li> <code>next_user_calibration</code>               (<code>Timestamp</code>)           \u2013            </li> <li> <code>warm_up_time_in_milliseconds</code>               (<code>int</code>)           \u2013            </li> <li> <code>fast_sample_rate_in_milliseconds</code>               (<code>int</code>)           \u2013            </li> <li> <code>number_of_sensor_parameters</code>               (<code>int</code>)           \u2013            </li> <li> <code>alarm_and_warning_parameter_number</code>               (<code>int</code>)           \u2013            </li> <li> <code>alarm_and_warning_enable_bits</code>               (<code>int</code>)           \u2013            </li> <li> <code>high_alarm_set_value</code>               (<code>float</code>)           \u2013            </li> <li> <code>high_alarm_clear_value</code>               (<code>float</code>)           \u2013            </li> <li> <code>high_warning_set_value</code>               (<code>float</code>)           \u2013            </li> <li> <code>high_warning_clear_value</code>               (<code>float</code>)           \u2013            </li> <li> <code>low_warning_clear_value</code>               (<code>float</code>)           \u2013            </li> <li> <code>low_warning_set_value</code>               (<code>float</code>)           \u2013            </li> <li> <code>low_alarm_clear_value</code>               (<code>float</code>)           \u2013            </li> <li> <code>low_alarm_set_value</code>               (<code>float</code>)           \u2013            </li> <li> <code>parameter_blocks</code>               (<code>Sequence[AquaTrollParameterBlock]</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/aquatroll/#blueye.protocol.types.aquatroll.AquaTrollSensorMetadataArray","title":"AquaTrollSensorMetadataArray","text":"<p>Attributes:</p> <ul> <li> <code>timestamp</code>               (<code>Timestamp</code>)           \u2013            </li> <li> <code>sensors</code>               (<code>Sequence[AquaTrollSensorMetadata]</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/aquatroll/#blueye.protocol.types.aquatroll.AquaTrollSensorParameters","title":"AquaTrollSensorParameters","text":"<p>Attributes:</p> <ul> <li> <code>sensor_id</code>               (<code>AquaTrollSensor</code>)           \u2013            </li> <li> <code>parameter_blocks</code>               (<code>Sequence[AquaTrollParameterBlock]</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/aquatroll/#blueye.protocol.types.aquatroll.AquaTrollSensorParametersArray","title":"AquaTrollSensorParametersArray","text":"<p>Attributes:</p> <ul> <li> <code>timestamp</code>               (<code>Timestamp</code>)           \u2013            </li> <li> <code>sensors</code>               (<code>Sequence[AquaTrollSensorParameters]</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/aquatroll/#blueye.protocol.types.aquatroll.AquaTrollSensorStatus","title":"AquaTrollSensorStatus","text":"<p>Aqua Troll Sensor Status IDs</p>"},{"location":"reference/blueye/protocol/aquatroll/#blueye.protocol.types.aquatroll.AquaTrollUnit","title":"AquaTrollUnit","text":"<p>Aqua Troll Unit IDs</p>"},{"location":"reference/blueye/protocol/aquatroll/#blueye.protocol.types.aquatroll.SetAquaTrollConnectionStatus","title":"SetAquaTrollConnectionStatus","text":"<p>Request to change the In-Situ Aqua Troll connection status</p> <p>Attributes:</p> <ul> <li> <code>connected</code>               (<code>bool</code>)           \u2013            <p>True to connect, false to disconnect</p> </li> </ul>"},{"location":"reference/blueye/protocol/aquatroll/#blueye.protocol.types.aquatroll.SetAquaTrollParameterUnit","title":"SetAquaTrollParameterUnit","text":"<p>Request to set an In-Situ Aqua Troll parameter unit</p> <p>Attributes:</p> <ul> <li> <code>sensor_id</code>               (<code>AquaTrollSensor</code>)           \u2013            <p>Sensor id, f. ex. \"SENSOR_CONDUCTIVITY_SENSOR\".</p> </li> <li> <code>parameter_id</code>               (<code>AquaTrollParameter</code>)           \u2013            <p>Parameter name, f. ex. \"PARAMETER_TEMPERATURE\".</p> </li> <li> <code>unit_id</code>               (<code>AquaTrollUnit</code>)           \u2013            <p>Unit, f. ex. \"UNIT_TEMP_CELSIUS\".</p> </li> </ul>"},{"location":"reference/blueye/protocol/aquatroll/#blueye.protocol.types.aquatroll.Type","title":"Type","text":"<p>Type IDs</p>"},{"location":"reference/blueye/protocol/control/","title":"Control","text":""},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control","title":"control","text":"<p>Classes:</p> <ul> <li> <code>ActivateGuestPortsCtrl</code>           \u2013            <p>Activated the guest port power</p> </li> <li> <code>ActivateMultibeamCtrl</code>           \u2013            <p>Activate multibeam</p> </li> <li> <code>AutoAltitudeCtrl</code>           \u2013            <p>Issue a command to set auto altitude to a desired state.</p> </li> <li> <code>AutoDepthCtrl</code>           \u2013            <p>Issue a command to set auto depth to a desired state.</p> </li> <li> <code>AutoHeadingCtrl</code>           \u2013            <p>Issue a command to set auto heading to a desired state.</p> </li> <li> <code>AutoPilotHeaveCtrl</code>           \u2013            <p>Issue a command to set Auto Pilot for vertiacl movement to a</p> </li> <li> <code>AutoPilotSurgeYawCtrl</code>           \u2013            <p>Issue a command to set Auto Pilot for cruising and turning to</p> </li> <li> <code>CalibrateDvlGyroCtrl</code>           \u2013            <p>Issue a command to calibrate the DVL gyro.</p> </li> <li> <code>CancelCalibrationCtrl</code>           \u2013            <p>Issue a command to cancel compass calibration.</p> </li> <li> <code>ClearMissionCtrl</code>           \u2013            <p>Clear the loaded mission.</p> </li> <li> <code>DeactivateGuestPortsCtrl</code>           \u2013            <p>Deactivate the guest port power</p> </li> <li> <code>DeactivateMultibeamCtrl</code>           \u2013            <p>Deactivate multibeam</p> </li> <li> <code>EndDiveCtrl</code>           \u2013            <p>Message sent when the user hits the end dive button in the</p> </li> <li> <code>FinishCalibrationCtrl</code>           \u2013            <p>Issue a command to finish compass calibration.</p> </li> <li> <code>GenericServoCtrl</code>           \u2013            <p>Issue a command to set a generic servo value.</p> </li> <li> <code>GripperCtrl</code>           \u2013            <p>Issue a command to control the gripper.</p> </li> <li> <code>GuestportLightsCtrl</code>           \u2013            <p>Issue a command to set the guest port light intensity.</p> </li> <li> <code>LaserCtrl</code>           \u2013            <p>Issue a command to set the laser intensity.</p> </li> <li> <code>LightsCtrl</code>           \u2013            <p>Issue a command to set the main light intensity.</p> </li> <li> <code>MotionInputCtrl</code>           \u2013            <p>Issue a command to move the drone in the surge, sway, heave,</p> </li> <li> <code>MultibeamServoCtrl</code>           \u2013            <p>Issue a command to set multibeam servo angle.</p> </li> <li> <code>PauseMissionCtrl</code>           \u2013            <p>Issue a command to pause the loaded mission.</p> </li> <li> <code>PilotGPSPositionCtrl</code>           \u2013            <p>Issue a command with the GPS position of the pilot.</p> </li> <li> <code>PingerConfigurationCtrl</code>           \u2013            <p>Issue a command to set the pinger configuration.</p> </li> <li> <code>RecordCtrl</code>           \u2013            <p>Issue a command to start video recording.</p> </li> <li> <code>ResetOdometerCtrl</code>           \u2013            <p>Issue a command to reset the odometer.</p> </li> <li> <code>ResetPositionCtrl</code>           \u2013            <p>Issue a command to reset the position estimate.</p> </li> <li> <code>RestartGuestPortsCtrl</code>           \u2013            <p>Restart the guest ports by turning power on and off</p> </li> <li> <code>RunMissionCtrl</code>           \u2013            <p>Issue a command to start and pause the loaded mission.</p> </li> <li> <code>SetAquaTrollConnectionStatusCtrl</code>           \u2013            <p>Request to change the In-Situ Aqua Troll connection status</p> </li> <li> <code>SetAquaTrollParameterUnitCtrl</code>           \u2013            <p>Request to set an In-Situ Aqua Troll parameter unit</p> </li> <li> <code>SetMultibeamConfigCtrl</code>           \u2013            <p>Update multibeam settings</p> </li> <li> <code>StartCalibrationCtrl</code>           \u2013            <p>Issue a command to start compass calibration.</p> </li> <li> <code>StartDiveCtrl</code>           \u2013            <p>Message sent when the user hits the start dive button in the</p> </li> <li> <code>StationKeepingCtrl</code>           \u2013            <p>Issue a command to set station keeping to a desired state.</p> </li> <li> <code>SystemTimeCtrl</code>           \u2013            <p>Issue a command to set the system time on the drone.</p> </li> <li> <code>TakePictureCtrl</code>           \u2013            <p>Issue a command to take a picture.</p> </li> <li> <code>TiltStabilizationCtrl</code>           \u2013            <p>Issue a command to enable or disable tilt stabilization.</p> </li> <li> <code>TiltVelocityCtrl</code>           \u2013            <p>Issue a command to tilt the drone camera.</p> </li> <li> <code>WatchdogCtrl</code>           \u2013            <p>Issue a watchdog message to indicate that the remote client</p> </li> <li> <code>WaterDensityCtrl</code>           \u2013            <p>Issue a command to set the water density.</p> </li> <li> <code>WeatherVaningCtrl</code>           \u2013            <p>Issue a command to set station keeping with weather vaning to</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.ActivateGuestPortsCtrl","title":"ActivateGuestPortsCtrl","text":"<p>Activated the guest port power</p>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.ActivateMultibeamCtrl","title":"ActivateMultibeamCtrl","text":"<p>Activate multibeam</p> <p>Attributes:</p> <ul> <li> <code>config</code>               (<code>MultibeamConfig</code>)           \u2013            <p>Message with the multibeam ping configuration to set on connect</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.AutoAltitudeCtrl","title":"AutoAltitudeCtrl","text":"<p>Issue a command to set auto altitude to a desired state.</p> <p>Attributes:</p> <ul> <li> <code>state</code>               (<code>AutoAltitudeState</code>)           \u2013            <p>State of the altitude controller</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.AutoDepthCtrl","title":"AutoDepthCtrl","text":"<p>Issue a command to set auto depth to a desired state.</p> <p>Attributes:</p> <ul> <li> <code>state</code>               (<code>AutoDepthState</code>)           \u2013            <p>State of the depth controller</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.AutoHeadingCtrl","title":"AutoHeadingCtrl","text":"<p>Issue a command to set auto heading to a desired state.</p> <p>Attributes:</p> <ul> <li> <code>state</code>               (<code>AutoHeadingState</code>)           \u2013            <p>State of the heading controller</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.AutoPilotHeaveCtrl","title":"AutoPilotHeaveCtrl","text":"<p>Issue a command to set Auto Pilot for vertiacl movement to a desired state.</p> <p>Attributes:</p> <ul> <li> <code>state</code>               (<code>AutoPilotHeaveState</code>)           \u2013            <p>State of the auto pilot heave controller</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.AutoPilotSurgeYawCtrl","title":"AutoPilotSurgeYawCtrl","text":"<p>Issue a command to set Auto Pilot for cruising and turning to a desired state.</p> <p>Attributes:</p> <ul> <li> <code>state</code>               (<code>AutoPilotSurgeYawState</code>)           \u2013            <p>State of the auto pilot surge yaw controller</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.CalibrateDvlGyroCtrl","title":"CalibrateDvlGyroCtrl","text":"<p>Issue a command to calibrate the DVL gyro.</p>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.CancelCalibrationCtrl","title":"CancelCalibrationCtrl","text":"<p>Issue a command to cancel compass calibration.</p>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.ClearMissionCtrl","title":"ClearMissionCtrl","text":"<p>Clear the loaded mission.</p>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.DeactivateGuestPortsCtrl","title":"DeactivateGuestPortsCtrl","text":"<p>Deactivate the guest port power</p>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.DeactivateMultibeamCtrl","title":"DeactivateMultibeamCtrl","text":"<p>Deactivate multibeam</p>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.EndDiveCtrl","title":"EndDiveCtrl","text":"<p>Message sent when the user hits the end dive button in the app. The message does not do anything, but is included in the log files so we can see at which point the user exited the dive view.</p>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.FinishCalibrationCtrl","title":"FinishCalibrationCtrl","text":"<p>Issue a command to finish compass calibration.</p>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.GenericServoCtrl","title":"GenericServoCtrl","text":"<p>Issue a command to set a generic servo value.</p> <p>Attributes:</p> <ul> <li> <code>servo</code>               (<code>GenericServo</code>)           \u2013            <p>Message with the desired servo value.</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.GripperCtrl","title":"GripperCtrl","text":"<p>Issue a command to control the gripper.</p> <p>Attributes:</p> <ul> <li> <code>gripper_velocities</code>               (<code>GripperVelocities</code>)           \u2013            <p>The desired gripping and rotation velocity.</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.GuestportLightsCtrl","title":"GuestportLightsCtrl","text":"<p>Issue a command to set the guest port light intensity.</p> <p>Attributes:</p> <ul> <li> <code>lights</code>               (<code>Lights</code>)           \u2013            <p>Message with the desired light intensity.</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.LaserCtrl","title":"LaserCtrl","text":"<p>Issue a command to set the laser intensity.</p> <p>Attributes:</p> <ul> <li> <code>laser</code>               (<code>Laser</code>)           \u2013            <p>Message with the desired laser intensity.</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.LightsCtrl","title":"LightsCtrl","text":"<p>Issue a command to set the main light intensity.</p> <p>Attributes:</p> <ul> <li> <code>lights</code>               (<code>Lights</code>)           \u2013            <p>Message with the desired light intensity.</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.MotionInputCtrl","title":"MotionInputCtrl","text":"<p>Issue a command to move the drone in the surge, sway, heave, or yaw direction.</p> <p>Attributes:</p> <ul> <li> <code>motion_input</code>               (<code>MotionInput</code>)           \u2013            <p>Message with the desired movement in each direction.</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.MultibeamServoCtrl","title":"MultibeamServoCtrl","text":"<p>Issue a command to set multibeam servo angle.</p> <p>Attributes:</p> <ul> <li> <code>servo</code>               (<code>MultibeamServo</code>)           \u2013            <p>Message with the desired servo angle.</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.PauseMissionCtrl","title":"PauseMissionCtrl","text":"<p>Issue a command to pause the loaded mission.</p>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.PilotGPSPositionCtrl","title":"PilotGPSPositionCtrl","text":"<p>Issue a command with the GPS position of the pilot.</p> <p>Attributes:</p> <ul> <li> <code>position</code>               (<code>LatLongPosition</code>)           \u2013            <p>The GPS position of the pilot.</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.PingerConfigurationCtrl","title":"PingerConfigurationCtrl","text":"<p>Issue a command to set the pinger configuration.</p> <p>Attributes:</p> <ul> <li> <code>configuration</code>               (<code>PingerConfiguration</code>)           \u2013            <p>Message with the pinger configuration to set.</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.RecordCtrl","title":"RecordCtrl","text":"<p>Issue a command to start video recording.</p> <p>Attributes:</p> <ul> <li> <code>record_on</code>               (<code>RecordOn</code>)           \u2013            <p>Message specifying which cameras to record.</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.ResetOdometerCtrl","title":"ResetOdometerCtrl","text":"<p>Issue a command to reset the odometer.</p>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.ResetPositionCtrl","title":"ResetPositionCtrl","text":"<p>Issue a command to reset the position estimate.</p> <p>Attributes:</p> <ul> <li> <code>settings</code>               (<code>ResetPositionSettings</code>)           \u2013            <p>Reset settings.</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.RestartGuestPortsCtrl","title":"RestartGuestPortsCtrl","text":"<p>Restart the guest ports by turning power on and off</p> <p>Attributes:</p> <ul> <li> <code>restart_info</code>               (<code>GuestPortRestartInfo</code>)           \u2013            <p>Message with information about how long to keep the guest ports off.</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.RunMissionCtrl","title":"RunMissionCtrl","text":"<p>Issue a command to start and pause the loaded mission.</p>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.SetAquaTrollConnectionStatusCtrl","title":"SetAquaTrollConnectionStatusCtrl","text":"<p>Request to change the In-Situ Aqua Troll connection status</p> <p>Attributes:</p> <ul> <li> <code>connection_status</code>               (<code>SetAquaTrollConnectionStatus</code>)           \u2013            <p>Message with information about which parameter to set and the unit to set it to.</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.SetAquaTrollParameterUnitCtrl","title":"SetAquaTrollParameterUnitCtrl","text":"<p>Request to set an In-Situ Aqua Troll parameter unit</p> <p>Attributes:</p> <ul> <li> <code>parameter_info</code>               (<code>SetAquaTrollParameterUnit</code>)           \u2013            <p>Message with information about which parameter to set and the unit to set it to.</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.SetMultibeamConfigCtrl","title":"SetMultibeamConfigCtrl","text":"<p>Update multibeam settings</p> <p>Attributes:</p> <ul> <li> <code>config</code>               (<code>MultibeamConfig</code>)           \u2013            <p>Message with the multibeam ping configuration to set.</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.StartCalibrationCtrl","title":"StartCalibrationCtrl","text":"<p>Issue a command to start compass calibration.</p>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.StartDiveCtrl","title":"StartDiveCtrl","text":"<p>Message sent when the user hits the start dive button in the app. The message does not do anything, but is included in the log files so we can see at which point the user entered the dive view.</p>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.StationKeepingCtrl","title":"StationKeepingCtrl","text":"<p>Issue a command to set station keeping to a desired state.</p> <p>Attributes:</p> <ul> <li> <code>state</code>               (<code>StationKeepingState</code>)           \u2013            <p>State of the station keeping controller</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.SystemTimeCtrl","title":"SystemTimeCtrl","text":"<p>Issue a command to set the system time on the drone.</p> <p>Attributes:</p> <ul> <li> <code>system_time</code>               (<code>SystemTime</code>)           \u2013            <p>Message with the system time to set.</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.TakePictureCtrl","title":"TakePictureCtrl","text":"<p>Issue a command to take a picture.</p>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.TiltStabilizationCtrl","title":"TiltStabilizationCtrl","text":"<p>Issue a command to enable or disable tilt stabilization.</p> <p>Attributes:</p> <ul> <li> <code>state</code>               (<code>TiltStabilizationState</code>)           \u2013            <p>Message with the tilt stabilization state to set.</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.TiltVelocityCtrl","title":"TiltVelocityCtrl","text":"<p>Issue a command to tilt the drone camera.</p> <p>Attributes:</p> <ul> <li> <code>velocity</code>               (<code>TiltVelocity</code>)           \u2013            <p>Message with the desired tilt velocity (direction and speed).</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.WatchdogCtrl","title":"WatchdogCtrl","text":"<p>Issue a watchdog message to indicate that the remote client is connected and working as expected. If a watchdog message is not received every second, the drone will turn off lights and other auto functions to indicate that connection with the client has been lost.</p> <p>Attributes:</p> <ul> <li> <code>connection_duration</code>               (<code>ConnectionDuration</code>)           \u2013            <p>Message with the number of seconds the client has been connected.</p> </li> <li> <code>client_id</code>               (<code>int</code>)           \u2013            <p>The ID of the client, received in the ConnectClientRep response.</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.WaterDensityCtrl","title":"WaterDensityCtrl","text":"<p>Issue a command to set the water density.</p> <p>Attributes:</p> <ul> <li> <code>density</code>               (<code>WaterDensity</code>)           \u2013            <p>Message with the water density to set.</p> </li> </ul>"},{"location":"reference/blueye/protocol/control/#blueye.protocol.types.control.WeatherVaningCtrl","title":"WeatherVaningCtrl","text":"<p>Issue a command to set station keeping with weather vaning to a desired state.</p> <p>Attributes:</p> <ul> <li> <code>state</code>               (<code>WeatherVaningState</code>)           \u2013            <p>State of the weather vaning controller</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/","title":"Message Formats","text":""},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats","title":"message_formats","text":"<p>Classes:</p> <ul> <li> <code>Altitude</code>           \u2013            <p>Drone altitude over seabed, typically obtained from a DVL.</p> </li> <li> <code>Attitude</code>           \u2013            <p>The attitude of the drone.</p> </li> <li> <code>AutoAltitudeState</code>           \u2013            <p>Auto altitude state.</p> </li> <li> <code>AutoDepthState</code>           \u2013            <p>Auto depth state.</p> </li> <li> <code>AutoHeadingState</code>           \u2013            <p>Auto heading state.</p> </li> <li> <code>AutoPilotHeaveState</code>           \u2013            <p>Auto pilot heave state.</p> </li> <li> <code>AutoPilotSurgeYawState</code>           \u2013            <p>Auto pilot surge yaw state.</p> </li> <li> <code>Battery</code>           \u2013            <p>Essential battery information.</p> </li> <li> <code>BatteryBQ40Z50</code>           \u2013            <p>Battery information message.</p> </li> <li> <code>BinlogRecord</code>           \u2013            <p>Wrapper message for each entry in the drone telemetry</p> </li> <li> <code>CPUInfo</code>           \u2013            <p>CPU information</p> </li> <li> <code>CPUTemperature</code>           \u2013            <p>CPU temperature.</p> </li> <li> <code>CalibrationState</code>           \u2013            <p>Compass calibration state.</p> </li> <li> <code>Camera</code>           \u2013            <p>Which camera to control.</p> </li> <li> <code>CameraParameters</code>           \u2013            <p>Camera parameters.</p> </li> <li> <code>CanisterHumidity</code>           \u2013            <p>Canister humidity.</p> </li> <li> <code>CanisterTemperature</code>           \u2013            <p>Canister temperature.</p> </li> <li> <code>ClientInfo</code>           \u2013            <p>Information about a remote client.</p> </li> <li> <code>ConnectedClient</code>           \u2013            <p>Information about a connected client with an id assigned by</p> </li> <li> <code>ConnectionDuration</code>           \u2013            <p>Connection duration of a remote client.</p> </li> <li> <code>ControlForce</code>           \u2013            <p>Control Force is used for showing the requested control force</p> </li> <li> <code>ControlMode</code>           \u2013            <p>Control mode from drone supervisor</p> </li> <li> <code>ControllerHealth</code>           \u2013            <p>Controller health is used for showing the state of the</p> </li> <li> <code>CpProbe</code>           \u2013            <p>Reading from a Cathodic Protection Potential probe.</p> </li> <li> <code>Depth</code>           \u2013            <p>Water depth of the drone.</p> </li> <li> <code>DepthUnit</code>           \u2013            <p>Available depth units.</p> </li> <li> <code>DiveTime</code>           \u2013            <p>Amount of time the drone has been submerged.</p> </li> <li> <code>DroneInfo</code>           \u2013            <p>Information about the drone.</p> </li> <li> <code>ErrorFlags</code>           \u2013            <p>Known error states for the drone.</p> </li> <li> <code>FontSize</code>           \u2013            <p>Available font sizes for overlay text elements.</p> </li> <li> <code>ForwardDistance</code>           \u2013            <p>Distance to an object in front of the drone</p> </li> <li> <code>Framerate</code>           \u2013            <p>Available camera frame rates.</p> </li> <li> <code>GenericServo</code>           \u2013            <p>Servo message used to represent the angle of the servo.</p> </li> <li> <code>GripperVelocities</code>           \u2013            <p>Gripper velocity values.</p> </li> <li> <code>GuestPortConnectorInfo</code>           \u2013            <p>GuestPort connector information.</p> </li> <li> <code>GuestPortCurrent</code>           \u2013            <p>GuestPort current readings.</p> </li> <li> <code>GuestPortDetachStatus</code>           \u2013            <p>GuestPort detach status.</p> </li> <li> <code>GuestPortDevice</code>           \u2013            <p>GuestPort device.</p> </li> <li> <code>GuestPortDeviceID</code>           \u2013            <p>GuestPort device ID.</p> </li> <li> <code>GuestPortDeviceList</code>           \u2013            <p>List of guest port devices.</p> </li> <li> <code>GuestPortError</code>           \u2013            <p>GuestPort error. Only indicated errors on the guest port</p> </li> <li> <code>GuestPortInfo</code>           \u2013            <p>GuestPort information.</p> </li> <li> <code>GuestPortNumber</code>           \u2013            <p>GuestPort number.</p> </li> <li> <code>GuestPortRestartInfo</code>           \u2013            <p>GuestPort restart information.</p> </li> <li> <code>HeadingSource</code>           \u2013            <p>Heading source used during reset of the position estimate.</p> </li> <li> <code>Imu</code>           \u2013            <p>Imu data in drone body frame</p> </li> <li> <code>IntervalType</code>           \u2013            <p>Interval type for time-lapse photos.</p> </li> <li> <code>IperfStatus</code>           \u2013            <p>Connection speed between drone and Surface Unit.</p> </li> <li> <code>Laser</code>           \u2013            <p>Laser message used to represent the intensity of connected</p> </li> <li> <code>LatLongPosition</code>           \u2013            <p>Latitude and longitude position in WGS 84 decimal degrees</p> </li> <li> <code>Lights</code>           \u2013            <p>Lights message used to represent the intensity of the main</p> </li> <li> <code>LogoType</code>           \u2013            <p>Available logo types.</p> </li> <li> <code>MedusaSpectrometerData</code>           \u2013            <p>Medusa gamma ray sensor spectrometer data</p> </li> <li> <code>Model</code>           \u2013            <p>Drone models produced by Blueye</p> </li> <li> <code>MotionInput</code>           \u2013            <p>Motion input from client.</p> </li> <li> <code>MultibeamConfig</code>           \u2013            <p>Configuration message for sonar devices</p> </li> <li> <code>MultibeamDiscovery</code>           \u2013            <p>Discovery message for sonar devices</p> </li> <li> <code>MultibeamFrameOffset</code>           \u2013            <p>Frame offset for multibeam recordings index cache</p> </li> <li> <code>MultibeamFrequencyMode</code>           \u2013            </li> <li> <code>MultibeamPing</code>           \u2013            <p>Multibeam sonar ping</p> </li> <li> <code>MultibeamServo</code>           \u2013            <p>Servo message used to represent the angle of the servo.</p> </li> <li> <code>MutltibeamRecordingIndex</code>           \u2013            <p>Multibeam recording index cache</p> </li> <li> <code>NStreamers</code>           \u2013            <p>Number of spectators connected to video stream.</p> </li> <li> <code>NavigationSensorID</code>           \u2013            <p>List of navigation sensors that can be used by the position</p> </li> <li> <code>NavigationSensorStatus</code>           \u2013            <p>Navigation sensor used in the position observer with validity</p> </li> <li> <code>Notification</code>           \u2013            <p>Notification is used for displaying info, warnings, and</p> </li> <li> <code>NotificationLevel</code>           \u2013            <p>List of available notification levels.</p> </li> <li> <code>NotificationType</code>           \u2013            <p>Notification is used for displaying info, warnings, and</p> </li> <li> <code>OverlayParameters</code>           \u2013            <p>Overlay parameters.</p> </li> <li> <code>PersistentStorageSettings</code>           \u2013            <p>PersistentStorageSettings defines settings for writing</p> </li> <li> <code>PingerConfiguration</code>           \u2013            <p>Pinger configuration.</p> </li> <li> <code>PositionEstimate</code>           \u2013            <p>Position estimate from the Extended Kalman filter based</p> </li> <li> <code>PressureSensorType</code>           \u2013            <p>Depth sensors used by the drone.</p> </li> <li> <code>RecordOn</code>           \u2013            <p>Which cameras are supposed to be recording</p> </li> <li> <code>RecordState</code>           \u2013            <p>Camera recording state.</p> </li> <li> <code>Reference</code>           \u2013            <p>Reference for the control system. Note that the internal heading</p> </li> <li> <code>ResetCoordinateSource</code>           \u2013            </li> <li> <code>ResetPositionSettings</code>           \u2013            <p>ResetPositionSettings used during reset of the position</p> </li> <li> <code>Resolution</code>           \u2013            <p>Available camera resolutions.</p> </li> <li> <code>StationKeepingState</code>           \u2013            <p>Station keeping state.</p> </li> <li> <code>StorageSpace</code>           \u2013            <p>Storage space.</p> </li> <li> <code>SystemTime</code>           \u2013            <p>System time.</p> </li> <li> <code>TemperatureUnit</code>           \u2013            <p>Available temperature units.</p> </li> <li> <code>ThicknessGauge</code>           \u2013            <p>Thickness measurement data from a Cygnus Thickness Gauge.</p> </li> <li> <code>ThicknessUnit</code>           \u2013            <p>Available thickness units.</p> </li> <li> <code>TiltAngle</code>           \u2013            <p>Angle of tilt camera in degrees.</p> </li> <li> <code>TiltStabilizationState</code>           \u2013            <p>Tilt stabilization state.</p> </li> <li> <code>TiltVelocity</code>           \u2013            <p>Relative velocity of tilt</p> </li> <li> <code>TimeLapseState</code>           \u2013            <p>Time-lapse state published if time-lapse mission is running.</p> </li> <li> <code>Vector3</code>           \u2013            <p>Vector with 3 elements</p> </li> <li> <code>WaterDensity</code>           \u2013            <p>Water density.</p> </li> <li> <code>WaterTemperature</code>           \u2013            <p>Water temperature measured by the drone's combined depth and</p> </li> <li> <code>WeatherVaningState</code>           \u2013            <p>Weather vaning state.</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.Altitude","title":"Altitude","text":"<p>Drone altitude over seabed, typically obtained from a DVL.</p> <p>Attributes:</p> <ul> <li> <code>value</code>               (<code>float</code>)           \u2013            <p>Drone altitude over seabed (m)</p> </li> <li> <code>is_valid</code>               (<code>bool</code>)           \u2013            <p>If altitude is valid or not</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.Attitude","title":"Attitude","text":"<p>The attitude of the drone.</p> <p>Attributes:</p> <ul> <li> <code>roll</code>               (<code>float</code>)           \u2013            <p>Roll angle (-180\u00b0..180\u00b0)</p> </li> <li> <code>pitch</code>               (<code>float</code>)           \u2013            <p>Pitch angle (-180\u00b0..180\u00b0)</p> </li> <li> <code>yaw</code>               (<code>float</code>)           \u2013            <p>Yaw angle (-180\u00b0..180\u00b0)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.AutoAltitudeState","title":"AutoAltitudeState","text":"<p>Auto altitude state.</p> <p>Attributes:</p> <ul> <li> <code>enabled</code>               (<code>bool</code>)           \u2013            <p>If auto altitude is enabled</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.AutoDepthState","title":"AutoDepthState","text":"<p>Auto depth state.</p> <p>Attributes:</p> <ul> <li> <code>enabled</code>               (<code>bool</code>)           \u2013            <p>If auto depth is enabled</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.AutoHeadingState","title":"AutoHeadingState","text":"<p>Auto heading state.</p> <p>Attributes:</p> <ul> <li> <code>enabled</code>               (<code>bool</code>)           \u2013            <p>If auto heading is enabled</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.AutoPilotHeaveState","title":"AutoPilotHeaveState","text":"<p>Auto pilot heave state.</p> <p>Attributes:</p> <ul> <li> <code>enabled</code>               (<code>bool</code>)           \u2013            <p>If auto pilot heave is enabled</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.AutoPilotSurgeYawState","title":"AutoPilotSurgeYawState","text":"<p>Auto pilot surge yaw state.</p> <p>Attributes:</p> <ul> <li> <code>enabled</code>               (<code>bool</code>)           \u2013            <p>If auto pilot surge yaw is enabled</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.Battery","title":"Battery","text":"<p>Essential battery information.</p> <p>Attributes:</p> <ul> <li> <code>voltage</code>               (<code>float</code>)           \u2013            <p>Battery voltage (V)</p> </li> <li> <code>level</code>               (<code>float</code>)           \u2013            <p>Battery level (0..1)</p> </li> <li> <code>temperature</code>               (<code>float</code>)           \u2013            <p>Battery temperature (\u00b0C)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.BatteryBQ40Z50","title":"BatteryBQ40Z50","text":"<p>Battery information message. Detailed information about all aspects of the connected Blueye Smart Battery, using the BQ40Z50 BMS.</p> <p>Attributes:</p> <ul> <li> <code>voltage</code>               (<code>Voltage</code>)           \u2013            <p>Voltage of the battery cells</p> </li> <li> <code>temperature</code>               (<code>Temperature</code>)           \u2013            <p>Temperature of the battery cells</p> </li> <li> <code>status</code>               (<code>BatteryStatus</code>)           \u2013            <p>Battery status flags</p> </li> <li> <code>current</code>               (<code>float</code>)           \u2013            <p>Measured current from the coulomb counter (A)</p> </li> <li> <code>average_current</code>               (<code>float</code>)           \u2013            <p>Average current (A)</p> </li> <li> <code>relative_state_of_charge</code>               (<code>float</code>)           \u2013            <p>Predicted remaining battery capacity as a factor of full_charge_capacity (0..1)</p> </li> <li> <code>absolute_state_of_charge</code>               (<code>float</code>)           \u2013            <p>Predicted remaining battery capacity (0..1)</p> </li> <li> <code>calculated_state_of_charge</code>               (<code>float</code>)           \u2013            <p>Calculated state of charge (0..1)</p> </li> <li> <code>remaining_capacity</code>               (<code>float</code>)           \u2013            <p>Predicted remaining battery capacity (Ah)</p> </li> <li> <code>full_charge_capacity</code>               (<code>float</code>)           \u2013            <p>Predicted battery capacity when fully charged (Ah)</p> </li> <li> <code>runtime_to_empty</code>               (<code>int</code>)           \u2013            <p>Predicted remaining battery capacity based on the present rate of discharge (s)</p> </li> <li> <code>average_time_to_empty</code>               (<code>int</code>)           \u2013            <p>Predicted remaining battery capacity based on average_current (s)</p> </li> <li> <code>average_time_to_full</code>               (<code>int</code>)           \u2013            <p>Predicted time-to-full charge based on average_current (s)</p> </li> <li> <code>charging_current</code>               (<code>float</code>)           \u2013            <p>Desired charging current (A)</p> </li> <li> <code>charging_voltage</code>               (<code>float</code>)           \u2013            <p>Desired charging voltage (V)</p> </li> <li> <code>cycle_count</code>               (<code>int</code>)           \u2013            <p>Number of charging cycles</p> </li> <li> <code>design_capacity</code>               (<code>float</code>)           \u2013            <p>Design capacity (Ah)</p> </li> <li> <code>manufacture_date</code>               (<code>Timestamp</code>)           \u2013            <p>Manufacture date</p> </li> <li> <code>serial_number</code>               (<code>int</code>)           \u2013            <p>Serial number</p> </li> <li> <code>manufacturer_name</code>               (<code>str</code>)           \u2013            <p>Manufacturer name</p> </li> <li> <code>device_name</code>               (<code>str</code>)           \u2013            <p>Device name</p> </li> <li> <code>device_chemistry</code>               (<code>str</code>)           \u2013            <p>Battery chemistry</p> </li> <li> <code>lifetimes</code>               (<code>BatteryLifetimes</code>)           \u2013            <p>Battery lifetimes</p> </li> <li> <code>safety_events</code>               (<code>BatterySafetyEvents</code>)           \u2013            <p>Battery safety events</p> </li> <li> <code>charging_events</code>               (<code>BatteryChargingEvents</code>)           \u2013            <p>Battery charging events</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>BatteryChargingEvents</code>           \u2013            <p>Attributes:</p> </li> <li> <code>BatteryLifetimes</code>           \u2013            <p>Attributes:</p> </li> <li> <code>BatterySafetyEvents</code>           \u2013            <p>Attributes:</p> </li> <li> <code>BatteryStatus</code>           \u2013            <p>Battery status from BQ40Z50 ref data sheet 0x16.</p> </li> <li> <code>Temperature</code>           \u2013            <p>Battery temperature.</p> </li> <li> <code>Voltage</code>           \u2013            <p>Battery voltage levels.</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.BatteryBQ40Z50.BatteryChargingEvents","title":"BatteryChargingEvents","text":"<p>Attributes:</p> <ul> <li> <code>charge_termination_events_count</code>               (<code>int</code>)           \u2013            <p>Total number of valid charge termination events (events)</p> </li> <li> <code>charge_termination_last_event</code>               (<code>int</code>)           \u2013            <p>Last valid charge termination in cycle count cycles (cycles)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.BatteryBQ40Z50.BatteryLifetimes","title":"BatteryLifetimes","text":"<p>Attributes:</p> <ul> <li> <code>max_cell_voltages</code>               (<code>CellVoltages</code>)           \u2013            <p>Maximum reported cell voltages</p> </li> <li> <code>min_cell_voltages</code>               (<code>CellVoltages</code>)           \u2013            <p>Minimum reported cell voltages</p> </li> <li> <code>max_delta_cell_voltage</code>               (<code>float</code>)           \u2013            <p>Max delta between cells (V)</p> </li> <li> <code>max_charge_current</code>               (<code>float</code>)           \u2013            <p>Max reported current in the charge direction (A)</p> </li> <li> <code>max_discharge_current</code>               (<code>float</code>)           \u2013            <p>Max reported current in the discharge direction (A)</p> </li> <li> <code>max_avg_discharge_current</code>               (<code>float</code>)           \u2013            <p>Max reported average current in the discharge direction (A)</p> </li> <li> <code>max_avg_discharge_power</code>               (<code>float</code>)           \u2013            <p>Max reported power in discharge direction (W)</p> </li> <li> <code>max_cell_temperature</code>               (<code>float</code>)           \u2013            <p>Max reported cell temperature (\u00b0C)</p> </li> <li> <code>min_cell_temperature</code>               (<code>float</code>)           \u2013            <p>Min reported cell temperature (\u00b0C)</p> </li> <li> <code>max_delta_cell_temperature</code>               (<code>float</code>)           \u2013            <p>Max reported temperature delta for TSx inputs configured as cell temperature (\u00b0C)</p> </li> <li> <code>max_temperature_internal_sensor</code>               (<code>float</code>)           \u2013            <p>Max reported internal temperature sensor temperature (\u00b0C)</p> </li> <li> <code>min_temperature_internal_sensor</code>               (<code>float</code>)           \u2013            <p>Min reported internal temperature sensor temperature (\u00b0C)</p> </li> <li> <code>max_temperature_fet</code>               (<code>float</code>)           \u2013            <p>Max reported FET temperature (\u00b0C)</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>CellVoltages</code>           \u2013            <p>Attributes:</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.BatteryBQ40Z50.BatteryLifetimes.CellVoltages","title":"CellVoltages","text":"<p>Attributes:</p> <ul> <li> <code>cell_1</code>               (<code>float</code>)           \u2013            <p>Voltage for cell number 1 (V)</p> </li> <li> <code>cell_2</code>               (<code>float</code>)           \u2013            <p>Voltage for cell number 2 (V)</p> </li> <li> <code>cell_3</code>               (<code>float</code>)           \u2013            <p>Voltage for cell number 3 (V)</p> </li> <li> <code>cell_4</code>               (<code>float</code>)           \u2013            <p>Voltage for cell number 4 (V)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.BatteryBQ40Z50.BatterySafetyEvents","title":"BatterySafetyEvents","text":"<p>Attributes:</p> <ul> <li> <code>cov_events_count</code>               (<code>int</code>)           \u2013            <p>Number of cell over voltage (COV) events (events)</p> </li> <li> <code>cov_last_event</code>               (<code>int</code>)           \u2013            <p>Last COV event in cycle count cycles (cycles)</p> </li> <li> <code>cuv_events_count</code>               (<code>int</code>)           \u2013            <p>Number of cell under voltage (CUV) events (events)</p> </li> <li> <code>cuv_last_event</code>               (<code>int</code>)           \u2013            <p>Last CUV event in cycle count cycles (cycles)</p> </li> <li> <code>ocd1_events_count</code>               (<code>int</code>)           \u2013            <p>Number of over current in Discharge 1 (OCD1) events (events)</p> </li> <li> <code>ocd1_last_event</code>               (<code>int</code>)           \u2013            <p>Last OCD1 event in cycle count cycles (cycles)</p> </li> <li> <code>ocd2_events_count</code>               (<code>int</code>)           \u2013            <p>Number of over current in Discharge 2 (OCD2) events (events)</p> </li> <li> <code>ocd2_last_event</code>               (<code>int</code>)           \u2013            <p>Last OCD2 event in cycle count cycles (cycles)</p> </li> <li> <code>occ1_events_count</code>               (<code>int</code>)           \u2013            <p>Number of over current in Charge 1 (OCC1) events (events)</p> </li> <li> <code>occ1_last_event</code>               (<code>int</code>)           \u2013            <p>Last OCC1 event in cycle count cycles (cycles)</p> </li> <li> <code>occ2_events_count</code>               (<code>int</code>)           \u2013            <p>Number of over current in Charge 2 (OCC2) events (events)</p> </li> <li> <code>occ2_last_event</code>               (<code>int</code>)           \u2013            <p>Last OCC2 event in cycle count cycles (cycles)</p> </li> <li> <code>aold_events_count</code>               (<code>int</code>)           \u2013            <p>Number of Overload in discharge (AOLD) events (events)</p> </li> <li> <code>aold_last_event</code>               (<code>int</code>)           \u2013            <p>Last AOLD event in cycle count cycles (cycles)</p> </li> <li> <code>ascd_events_count</code>               (<code>int</code>)           \u2013            <p>Number of Short Circuit in Discharge (ASCD) events (events)</p> </li> <li> <code>ascd_last_event</code>               (<code>int</code>)           \u2013            <p>Last ASCD event in cycle count cycles (cycles)</p> </li> <li> <code>ascc_events_count</code>               (<code>int</code>)           \u2013            <p>Number of Short Circuit in Charge (ASCC) events (events)</p> </li> <li> <code>ascc_last_event</code>               (<code>int</code>)           \u2013            <p>Last ASCC event in cycle count cycles (cycles)</p> </li> <li> <code>otc_events_count</code>               (<code>int</code>)           \u2013            <p>Number of over temperature in Charge (OTC) events (events)</p> </li> <li> <code>otc_last_event</code>               (<code>int</code>)           \u2013            <p>Last OTC event in cycle count cycles (cycles)</p> </li> <li> <code>otd_events_count</code>               (<code>int</code>)           \u2013            <p>Number of over temperature in Discharge (OTD) events (events)</p> </li> <li> <code>otd_last_event</code>               (<code>int</code>)           \u2013            <p>Last OTD event in cycle count cycles (cycles)</p> </li> <li> <code>otf_events_count</code>               (<code>int</code>)           \u2013            <p>Number of over temperature in FET (OTF) events (events)</p> </li> <li> <code>otf_last_event</code>               (<code>int</code>)           \u2013            <p>Last OTF event in cycle count cycles (cycles)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.BatteryBQ40Z50.BatteryStatus","title":"BatteryStatus","text":"<p>Battery status from BQ40Z50 ref data sheet 0x16.</p> <p>Attributes:</p> <ul> <li> <code>overcharged_alarm</code>               (<code>bool</code>)           \u2013            </li> <li> <code>terminate_charge_alarm</code>               (<code>bool</code>)           \u2013            </li> <li> <code>over_temperature_alarm</code>               (<code>bool</code>)           \u2013            </li> <li> <code>terminate_discharge_alarm</code>               (<code>bool</code>)           \u2013            </li> <li> <code>remaining_capacity_alarm</code>               (<code>bool</code>)           \u2013            </li> <li> <code>remaining_time_alarm</code>               (<code>bool</code>)           \u2013            </li> <li> <code>initialization</code>               (<code>bool</code>)           \u2013            </li> <li> <code>discharging_or_relax</code>               (<code>bool</code>)           \u2013            </li> <li> <code>fully_charged</code>               (<code>bool</code>)           \u2013            </li> <li> <code>fully_discharged</code>               (<code>bool</code>)           \u2013            </li> <li> <code>error</code>               (<code>BatteryError</code>)           \u2013            <p>Battery error codes</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>BatteryError</code>           \u2013            <p>Battery error code from BQ40Z50 BMS data sheet.</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.BatteryBQ40Z50.BatteryStatus.BatteryError","title":"BatteryError","text":"<p>Battery error code from BQ40Z50 BMS data sheet.</p>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.BatteryBQ40Z50.Temperature","title":"Temperature","text":"<p>Battery temperature.</p> <p>Attributes:</p> <ul> <li> <code>average</code>               (<code>float</code>)           \u2013            <p>Average temperature accross cells (\u00b0C)</p> </li> <li> <code>cell_1</code>               (<code>float</code>)           \u2013            <p>Cell 1 temperature (\u00b0C)</p> </li> <li> <code>cell_2</code>               (<code>float</code>)           \u2013            <p>Cell 2 temperature (\u00b0C)</p> </li> <li> <code>cell_3</code>               (<code>float</code>)           \u2013            <p>Cell 3 temperature (\u00b0C)</p> </li> <li> <code>cell_4</code>               (<code>float</code>)           \u2013            <p>Cell 4 temperature (\u00b0C)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.BatteryBQ40Z50.Voltage","title":"Voltage","text":"<p>Battery voltage levels.</p> <p>Attributes:</p> <ul> <li> <code>total</code>               (<code>float</code>)           \u2013            <p>Battery pack voltage level (V)</p> </li> <li> <code>cell_1</code>               (<code>float</code>)           \u2013            <p>Cell 1 voltage level (V)</p> </li> <li> <code>cell_2</code>               (<code>float</code>)           \u2013            <p>Vell 2 voltage level (V)</p> </li> <li> <code>cell_3</code>               (<code>float</code>)           \u2013            <p>Cell 3 voltage level (V)</p> </li> <li> <code>cell_4</code>               (<code>float</code>)           \u2013            <p>Cell 4 voltage level (V)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.BinlogRecord","title":"BinlogRecord","text":"<p>Wrapper message for each entry in the drone telemetry logfile. Each entry contains the unix timestamp in UTC, the monotonic timestamp (time since boot), and an Any message wrapping the custom Blueye message. See separate documentation for the logfile format for more details.</p> <p>Attributes:</p> <ul> <li> <code>payload</code>               (<code>Any</code>)           \u2013            <p>The log entry payload.</p> </li> <li> <code>unix_timestamp</code>               (<code>Timestamp</code>)           \u2013            <p>Unix timestamp in UTC.</p> </li> <li> <code>clock_monotonic</code>               (<code>Timestamp</code>)           \u2013            <p>Posix CLOCK_MONOTONIC timestamp.</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.CPUInfo","title":"CPUInfo","text":"<p>CPU information Contains information about the CPU load and memory usage of the drone.</p> <p>Attributes:</p> <ul> <li> <code>cpu_load</code>               (<code>float</code>)           \u2013            <p>CPU load (0..1)</p> </li> <li> <code>memory_bus_load</code>               (<code>float</code>)           \u2013            <p>Memory bus load (0..1)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.CPUTemperature","title":"CPUTemperature","text":"<p>CPU temperature.</p> <p>Attributes:</p> <ul> <li> <code>value</code>               (<code>float</code>)           \u2013            <p>CPU temperature (\u00b0C)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.CalibrationState","title":"CalibrationState","text":"<p>Compass calibration state.</p> <p>Attributes:</p> <ul> <li> <code>status</code>               (<code>Status</code>)           \u2013            <p>Current calibration status</p> </li> <li> <code>progress_x_positive</code>               (<code>float</code>)           \u2013            <p>Progress for the positive X axis (0..1)</p> </li> <li> <code>progress_x_negative</code>               (<code>float</code>)           \u2013            <p>Progress for the negative X axis (0..1)</p> </li> <li> <code>progress_y_positive</code>               (<code>float</code>)           \u2013            <p>Progress for the positive Y axis (0..1)</p> </li> <li> <code>progress_y_negative</code>               (<code>float</code>)           \u2013            <p>Progress for the negative X axis (0..1)</p> </li> <li> <code>progress_z_positive</code>               (<code>float</code>)           \u2013            <p>Progress for the positive Z axis (0..1)</p> </li> <li> <code>progress_z_negative</code>               (<code>float</code>)           \u2013            <p>Progress for the negative Z axis (0..1)</p> </li> <li> <code>progress_thruster</code>               (<code>float</code>)           \u2013            <p>Progress for the thruster calibration (0..1)</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>Status</code>           \u2013            <p>Status of the compass calibration procedure.</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.CalibrationState.Status","title":"Status","text":"<p>Status of the compass calibration procedure. When calibration is started, the status will indicate the active (upfacing) axis.</p>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.Camera","title":"Camera","text":"<p>Which camera to control.</p>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.CameraParameters","title":"CameraParameters","text":"<p>Camera parameters.</p> <p>Attributes:</p> <ul> <li> <code>h264_bitrate</code>               (<code>int</code>)           \u2013            <p>Bitrate of the h264 stream (bit/sec)</p> </li> <li> <code>mjpg_bitrate</code>               (<code>int</code>)           \u2013            <p>Bitrate of the MJPG stream used for still pictures (bit/sec)</p> </li> <li> <code>exposure</code>               (<code>int</code>)           \u2013            <p>Shutter speed (1/10000 * s), -1 for automatic exposure</p> </li> <li> <code>white_balance</code>               (<code>int</code>)           \u2013            <p>White balance temperature (2800..9300), -1 for automatic white balance</p> </li> <li> <code>hue</code>               (<code>int</code>)           \u2013            <p>Hue (-40..40), 0 as default</p> </li> <li> <code>gain</code>               (<code>float</code>)           \u2013            <p>Iso gain (0..1)</p> </li> <li> <code>resolution</code>               (<code>Resolution</code>)           \u2013            <p>Stream, recording and image resolution</p> </li> <li> <code>framerate</code>               (<code>Framerate</code>)           \u2013            <p>Stream and recording framerate</p> </li> <li> <code>camera</code>               (<code>Camera</code>)           \u2013            <p>Which camera the parameters belong to.</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.CanisterHumidity","title":"CanisterHumidity","text":"<p>Canister humidity. Humidity measured in the top or bottom canister of the drone.</p> <p>Attributes:</p> <ul> <li> <code>humidity</code>               (<code>float</code>)           \u2013            <p>Air humidity (%)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.CanisterTemperature","title":"CanisterTemperature","text":"<p>Canister temperature. Temperature measured in the top or bottom canister of the drone.</p> <p>Attributes:</p> <ul> <li> <code>temperature</code>               (<code>float</code>)           \u2013            <p>Temperature (\u00b0C)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.ClientInfo","title":"ClientInfo","text":"<p>Information about a remote client.</p> <p>Attributes:</p> <ul> <li> <code>type_</code>               (<code>str</code>)           \u2013            <p>The type of client (such as Blueye App, Observer App, SDK, etc)</p> </li> <li> <code>version</code>               (<code>str</code>)           \u2013            <p>Client software version string</p> </li> <li> <code>device_type</code>               (<code>str</code>)           \u2013            <p>Device type, such as mobile, tablet, or computer</p> </li> <li> <code>platform</code>               (<code>str</code>)           \u2013            <p>Platform, such as iOS, Android, Linux, etc</p> </li> <li> <code>platform_version</code>               (<code>str</code>)           \u2013            <p>Platform software version string</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name of the client</p> </li> <li> <code>is_observer</code>               (<code>bool</code>)           \u2013            <p>If the client should be connected as an observer or not</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.ConnectedClient","title":"ConnectedClient","text":"<p>Information about a connected client with an id assigned by the drone.</p> <p>Attributes:</p> <ul> <li> <code>client_id</code>               (<code>int</code>)           \u2013            <p>The assigned client id</p> </li> <li> <code>client_info</code>               (<code>ClientInfo</code>)           \u2013            <p>Client information.</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.ConnectionDuration","title":"ConnectionDuration","text":"<p>Connection duration of a remote client.</p> <p>Attributes:</p> <ul> <li> <code>value</code>               (<code>int</code>)           \u2013            <p>time since connected to drone (s)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.ControlForce","title":"ControlForce","text":"<p>Control Force is used for showing the requested control force in each direction in Newtons.</p> <p>Attributes:</p> <ul> <li> <code>surge</code>               (<code>float</code>)           \u2013            <p>Force in surge (N)</p> </li> <li> <code>sway</code>               (<code>float</code>)           \u2013            <p>Force in sway (N)</p> </li> <li> <code>heave</code>               (<code>float</code>)           \u2013            <p>Force in heave (N)</p> </li> <li> <code>yaw</code>               (<code>float</code>)           \u2013            <p>Moment in yaw (Nm)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.ControlMode","title":"ControlMode","text":"<p>Control mode from drone supervisor</p> <p>Attributes:</p> <ul> <li> <code>auto_depth</code>               (<code>bool</code>)           \u2013            <p>If auto depth is enabled</p> </li> <li> <code>auto_heading</code>               (<code>bool</code>)           \u2013            <p>If auto heading is enabled</p> </li> <li> <code>auto_altitude</code>               (<code>bool</code>)           \u2013            <p>If auto altitude is enabled</p> </li> <li> <code>station_keeping</code>               (<code>bool</code>)           \u2013            <p>If station keeping is enabled</p> </li> <li> <code>weather_vaning</code>               (<code>bool</code>)           \u2013            <p>If weather vaning is enabled</p> </li> <li> <code>auto_pilot_surge_yaw</code>               (<code>bool</code>)           \u2013            <p>If auto pilot surge yaw is enabled</p> </li> <li> <code>auto_pilot_heave</code>               (<code>bool</code>)           \u2013            <p>If auto pilot heave is enabled</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.ControllerHealth","title":"ControllerHealth","text":"<p>Controller health is used for showing the state of the controller with an relative error and load from 0 to 1.</p> <p>Attributes:</p> <ul> <li> <code>depth_error</code>               (<code>float</code>)           \u2013            <p>Depth error in meters (m)</p> </li> <li> <code>depth_health</code>               (<code>float</code>)           \u2013            <p>Depth controller load (0..1)</p> </li> <li> <code>heading_error</code>               (<code>float</code>)           \u2013            <p>Heading error in degrees (\u00b0)</p> </li> <li> <code>heading_health</code>               (<code>float</code>)           \u2013            <p>Heading controller load (0..1)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.CpProbe","title":"CpProbe","text":"<p>Reading from a Cathodic Protection Potential probe.</p> <p>Attributes:</p> <ul> <li> <code>measurement</code>               (<code>float</code>)           \u2013            <p>Potential measurement (V)</p> </li> <li> <code>is_measurement_valid</code>               (<code>bool</code>)           \u2013            <p>Indicating if the measurement is valid</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.Depth","title":"Depth","text":"<p>Water depth of the drone.</p> <p>Attributes:</p> <ul> <li> <code>value</code>               (<code>float</code>)           \u2013            <p>Drone depth below surface (m)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.DepthUnit","title":"DepthUnit","text":"<p>Available depth units.</p>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.DiveTime","title":"DiveTime","text":"<p>Amount of time the drone has been submerged. The drone starts incrementing this value when the depth is above 250 mm.</p> <p>Attributes:</p> <ul> <li> <code>value</code>               (<code>int</code>)           \u2013            <p>Number of seconds the drone has been submerged</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.DroneInfo","title":"DroneInfo","text":"<p>Information about the drone. This message contains serial numbers and version information for internal components in the drone. Primarily used for diagnostics, or to determine the origin of a logfile.</p> <p>Attributes:</p> <ul> <li> <code>blunux_version</code>               (<code>str</code>)           \u2013            <p>Blunux version string</p> </li> <li> <code>serial_number</code>               (<code>bytes</code>)           \u2013            <p>Drone serial number</p> </li> <li> <code>hardware_id</code>               (<code>bytes</code>)           \u2013            <p>Main computer unique identifier</p> </li> <li> <code>model</code>               (<code>Model</code>)           \u2013            <p>Drone model</p> </li> <li> <code>mb_serial</code>               (<code>bytes</code>)           \u2013            <p>Motherboard serial number</p> </li> <li> <code>bb_serial</code>               (<code>bytes</code>)           \u2013            <p>Backbone serial number</p> </li> <li> <code>ds_serial</code>               (<code>bytes</code>)           \u2013            <p>Drone stack serial number</p> </li> <li> <code>mb_uid</code>               (<code>bytes</code>)           \u2013            <p>Motherboard unique identifier</p> </li> <li> <code>bb_uid</code>               (<code>bytes</code>)           \u2013            <p>Backbone unique identifier</p> </li> <li> <code>gp</code>               (<code>GuestPortInfo</code>)           \u2013            <p>GuestPortInfo</p> </li> <li> <code>depth_sensor</code>               (<code>PressureSensorType</code>)           \u2013            <p>Type of depth sensor that is connected to the drone</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.ErrorFlags","title":"ErrorFlags","text":"<p>Known error states for the drone.</p> <p>Attributes:</p> <ul> <li> <code>pmu_comm_ack</code>               (<code>bool</code>)           \u2013            <p>Acknowledge message not received for a message published to internal micro controller</p> </li> <li> <code>pmu_comm_stream</code>               (<code>bool</code>)           \u2013            <p>Error in communication with internal micro controller</p> </li> <li> <code>depth_read</code>               (<code>bool</code>)           \u2013            <p>Error reading depth sensor value</p> </li> <li> <code>depth_spike</code>               (<code>bool</code>)           \u2013            <p>Sudden spike in value read from depth sensor</p> </li> <li> <code>inner_pressure_read</code>               (<code>bool</code>)           \u2013            <p>Error reading inner pressure of the drone</p> </li> <li> <code>inner_pressure_spike</code>               (<code>bool</code>)           \u2013            <p>Sudden spike in inner preassure</p> </li> <li> <code>compass_calibration</code>               (<code>bool</code>)           \u2013            <p>Compass needs calibration</p> </li> <li> <code>tilt_calibration</code>               (<code>bool</code>)           \u2013            <p>Error during calibration of tilt endpoints</p> </li> <li> <code>gp1_read</code>               (<code>bool</code>)           \u2013            <p>Guest port 1 read error</p> </li> <li> <code>gp2_read</code>               (<code>bool</code>)           \u2013            <p>Guest port 2 read error</p> </li> <li> <code>gp3_read</code>               (<code>bool</code>)           \u2013            <p>Guest port 3 read error</p> </li> <li> <code>gp1_not_flashed</code>               (<code>bool</code>)           \u2013            <p>Guest port 1 not flashed</p> </li> <li> <code>gp2_not_flashed</code>               (<code>bool</code>)           \u2013            <p>Guest port 2 not flashed</p> </li> <li> <code>gp3_not_flashed</code>               (<code>bool</code>)           \u2013            <p>Guest port 3 not flashed</p> </li> <li> <code>gp1_unknown_device</code>               (<code>bool</code>)           \u2013            <p>Unknown device on guest port 1</p> </li> <li> <code>gp2_unknown_device</code>               (<code>bool</code>)           \u2013            <p>Unknown device on guest port 2</p> </li> <li> <code>gp3_unknown_device</code>               (<code>bool</code>)           \u2013            <p>Unknown device on guest port 3</p> </li> <li> <code>gp1_device_connection</code>               (<code>bool</code>)           \u2013            <p>Guest port 1 connection error</p> </li> <li> <code>gp2_device_connection</code>               (<code>bool</code>)           \u2013            <p>Guest port 2 connection error</p> </li> <li> <code>gp3_device_connection</code>               (<code>bool</code>)           \u2013            <p>Guest port 3 connection error</p> </li> <li> <code>gp1_device</code>               (<code>bool</code>)           \u2013            <p>Guest port 1 device error</p> </li> <li> <code>gp2_device</code>               (<code>bool</code>)           \u2013            <p>Guest port 2 device error</p> </li> <li> <code>gp3_device</code>               (<code>bool</code>)           \u2013            <p>Guest port 3 device error</p> </li> <li> <code>drone_serial_not_set</code>               (<code>bool</code>)           \u2013            <p>Drone serial number not set</p> </li> <li> <code>drone_serial</code>               (<code>bool</code>)           \u2013            <p>Drone serial number error</p> </li> <li> <code>mb_eeprom_read</code>               (<code>bool</code>)           \u2013            <p>MB eeprom read error</p> </li> <li> <code>bb_eeprom_read</code>               (<code>bool</code>)           \u2013            <p>BB eeprom read error</p> </li> <li> <code>mb_eeprom_not_flashed</code>               (<code>bool</code>)           \u2013            <p>MB eeprom not flashed</p> </li> <li> <code>bb_eeprom_not_flashed</code>               (<code>bool</code>)           \u2013            <p>BB eeprom not flashed</p> </li> <li> <code>main_camera_connection</code>               (<code>bool</code>)           \u2013            <p>We don't get buffers from the main camera</p> </li> <li> <code>main_camera_firmware</code>               (<code>bool</code>)           \u2013            <p>The main camera firmware is wrong</p> </li> <li> <code>guestport_camera_connection</code>               (<code>bool</code>)           \u2013            <p>We don't get buffers from the guestport camera</p> </li> <li> <code>guestport_camera_firmware</code>               (<code>bool</code>)           \u2013            <p>The guestport camera firmware is wrong</p> </li> <li> <code>mb_serial</code>               (<code>bool</code>)           \u2013            <p>MB serial number error</p> </li> <li> <code>bb_serial</code>               (<code>bool</code>)           \u2013            <p>BB serial number error</p> </li> <li> <code>ds_serial</code>               (<code>bool</code>)           \u2013            <p>DS serial number error</p> </li> <li> <code>gp_current_read</code>               (<code>bool</code>)           \u2013            <p>Error reading GP current</p> </li> <li> <code>gp_current</code>               (<code>bool</code>)           \u2013            <p>Max GP current exceeded</p> </li> <li> <code>gp1_bat_current</code>               (<code>bool</code>)           \u2013            <p>Max battery current exceeded on GP1</p> </li> <li> <code>gp2_bat_current</code>               (<code>bool</code>)           \u2013            <p>Max battery current exceeded on GP2</p> </li> <li> <code>gp3_bat_current</code>               (<code>bool</code>)           \u2013            <p>Max battery current exceeded on GP3</p> </li> <li> <code>gp_20v_current</code>               (<code>bool</code>)           \u2013            <p>Max 20V current exceeded on GP</p> </li> <li> <code>dvl_thermal_protection_mode</code>               (<code>bool</code>)           \u2013            <p>DVL is in thermal protection mode</p> </li> <li> <code>dvl_no_power</code>               (<code>bool</code>)           \u2013            <p>GP protection has been triggered at boot or faulty DVL</p> </li> <li> <code>usb_disconnect</code>               (<code>bool</code>)           \u2013            <p>USB disconnect</p> </li> <li> <code>video_urb_error</code>               (<code>bool</code>)           \u2013            <p>Video URB error</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.FontSize","title":"FontSize","text":"<p>Available font sizes for overlay text elements.</p>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.ForwardDistance","title":"ForwardDistance","text":"<p>Distance to an object in front of the drone Typically obtained from a 1D pinger.</p> <p>Attributes:</p> <ul> <li> <code>value</code>               (<code>float</code>)           \u2013            <p>Distance in front of drone (m)</p> </li> <li> <code>is_valid</code>               (<code>bool</code>)           \u2013            <p>If distance reading is valid or not</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.Framerate","title":"Framerate","text":"<p>Available camera frame rates.</p>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.GenericServo","title":"GenericServo","text":"<p>Servo message used to represent the angle of the servo.</p> <p>Attributes:</p> <ul> <li> <code>value</code>               (<code>float</code>)           \u2013            <p>Servo value (0..1)</p> </li> <li> <code>guest_port_number</code>               (<code>GuestPortNumber</code>)           \u2013            <p>Guest port the servo is on</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.GripperVelocities","title":"GripperVelocities","text":"<p>Gripper velocity values.</p> <p>Attributes:</p> <ul> <li> <code>grip_velocity</code>               (<code>float</code>)           \u2013            <p>The gripping velocity (-1.0..1.0)</p> </li> <li> <code>rotate_velocity</code>               (<code>float</code>)           \u2013            <p>The rotating velocity (-1.0..1.0)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.GuestPortConnectorInfo","title":"GuestPortConnectorInfo","text":"<p>GuestPort connector information.</p> <p>Attributes:</p> <ul> <li> <code>device_list</code>               (<code>GuestPortDeviceList</code>)           \u2013            <p>List of devices on this connector</p> </li> <li> <code>error</code>               (<code>GuestPortError</code>)           \u2013            <p>Guest port connector error</p> </li> <li> <code>guest_port_number</code>               (<code>GuestPortNumber</code>)           \u2013            <p>Guest port the connector is connected to</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.GuestPortCurrent","title":"GuestPortCurrent","text":"<p>GuestPort current readings.</p> <p>Attributes:</p> <ul> <li> <code>gp1_bat</code>               (<code>float</code>)           \u2013            <p>Current on GP1 battery voltage (A)</p> </li> <li> <code>gp2_bat</code>               (<code>float</code>)           \u2013            <p>Current on GP2 battery voltage (A)</p> </li> <li> <code>gp3_bat</code>               (<code>float</code>)           \u2013            <p>Current on GP3 battery voltage (A)</p> </li> <li> <code>gp_20v</code>               (<code>float</code>)           \u2013            <p>Current on common 20V supply (A)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.GuestPortDetachStatus","title":"GuestPortDetachStatus","text":"<p>GuestPort detach status.</p>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.GuestPortDevice","title":"GuestPortDevice","text":"<p>GuestPort device.</p> <p>Attributes:</p> <ul> <li> <code>device_id</code>               (<code>GuestPortDeviceID</code>)           \u2013            <p>Blueye device identifier</p> </li> <li> <code>manufacturer</code>               (<code>str</code>)           \u2013            <p>Manufacturer name</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Device name</p> </li> <li> <code>serial_number</code>               (<code>str</code>)           \u2013            <p>Serial number</p> </li> <li> <code>depth_rating</code>               (<code>float</code>)           \u2013            <p>Depth rating (m)</p> </li> <li> <code>required_blunux_version</code>               (<code>str</code>)           \u2013            <p>Required Blunux version (x.y.z)</p> </li> <li> <code>detach_status</code>               (<code>GuestPortDetachStatus</code>)           \u2013            <p>Detach status based on detection pin</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.GuestPortDeviceID","title":"GuestPortDeviceID","text":"<p>GuestPort device ID.</p>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.GuestPortDeviceList","title":"GuestPortDeviceList","text":"<p>List of guest port devices.</p> <p>Attributes:</p> <ul> <li> <code>devices</code>               (<code>Sequence[GuestPortDevice]</code>)           \u2013            <p>List of guest port devices</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.GuestPortError","title":"GuestPortError","text":"<p>GuestPort error. Only indicated errors on the guest port connector itself.</p>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.GuestPortInfo","title":"GuestPortInfo","text":"<p>GuestPort information.</p> <p>Attributes:</p> <ul> <li> <code>gp1</code>               (<code>GuestPortConnectorInfo</code>)           \u2013            <p>GuestPortConnectorInfo 1</p> </li> <li> <code>gp2</code>               (<code>GuestPortConnectorInfo</code>)           \u2013            <p>GuestPortConnectorInfo 2</p> </li> <li> <code>gp3</code>               (<code>GuestPortConnectorInfo</code>)           \u2013            <p>GuestPortConnectorInfo 3</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.GuestPortNumber","title":"GuestPortNumber","text":"<p>GuestPort number.</p>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.GuestPortRestartInfo","title":"GuestPortRestartInfo","text":"<p>GuestPort restart information.</p> <p>Attributes:</p> <ul> <li> <code>power_off_duration</code>               (<code>float</code>)           \u2013            <p>Duration to keep the guest ports off (s)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.HeadingSource","title":"HeadingSource","text":"<p>Heading source used during reset of the position estimate.</p>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.Imu","title":"Imu","text":"<p>Imu data in drone body frame x - forward y - right z - down</p> <p>Attributes:</p> <ul> <li> <code>accelerometer</code>               (<code>Vector3</code>)           \u2013            <p>Acceleration (g)</p> </li> <li> <code>gyroscope</code>               (<code>Vector3</code>)           \u2013            <p>Angular velocity (rad/s)</p> </li> <li> <code>magnetometer</code>               (<code>Vector3</code>)           \u2013            <p>Magnetic field (\u03bcT)</p> </li> <li> <code>temperature</code>               (<code>float</code>)           \u2013            <p>Temperature (\u00b0C)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.IntervalType","title":"IntervalType","text":"<p>Interval type for time-lapse photos.</p>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.IperfStatus","title":"IperfStatus","text":"<p>Connection speed between drone and Surface Unit.</p> <p>Attributes:</p> <ul> <li> <code>sent</code>               (<code>float</code>)           \u2013            <p>Transfer rate from drone to Surface Unit (Mbit/s)</p> </li> <li> <code>received</code>               (<code>float</code>)           \u2013            <p>Transfer rate from Surface Unit to drone (Mbit/s)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.Laser","title":"Laser","text":"<p>Laser message used to represent the intensity of connected laser. If the laser does not support dimming but only on and off, a value of 0 turns the laser off, and any value above 0 turns the laser on.</p> <p>Attributes:</p> <ul> <li> <code>value</code>               (<code>float</code>)           \u2013            <p>Laser intensity, any value above 0 turns the laser on (0..1)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.LatLongPosition","title":"LatLongPosition","text":"<p>Latitude and longitude position in WGS 84 decimal degrees format.</p> <p>Attributes:</p> <ul> <li> <code>latitude</code>               (<code>float</code>)           \u2013            <p>Latitude (\u00b0)</p> </li> <li> <code>longitude</code>               (<code>float</code>)           \u2013            <p>Longitude (\u00b0)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.Lights","title":"Lights","text":"<p>Lights message used to represent the intensity of the main light or external lights.</p> <p>Attributes:</p> <ul> <li> <code>value</code>               (<code>float</code>)           \u2013            <p>Light intensity (0..1)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.LogoType","title":"LogoType","text":"<p>Available logo types.</p>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.MedusaSpectrometerData","title":"MedusaSpectrometerData","text":"<p>Medusa gamma ray sensor spectrometer data</p> <p>Attributes:</p> <ul> <li> <code>drone_time</code>               (<code>Timestamp</code>)           \u2013            <p>Time stamp when the data is received</p> </li> <li> <code>sensor_time</code>               (<code>Timestamp</code>)           \u2013            <p>Time stamp the sensor reports</p> </li> <li> <code>realtime</code>               (<code>float</code>)           \u2013            <p>Time the sensor actually measured (s)</p> </li> <li> <code>livetime</code>               (<code>float</code>)           \u2013            <p>Time the measurement took (s)</p> </li> <li> <code>total</code>               (<code>int</code>)           \u2013            <p>Total counts inside the spectrum</p> </li> <li> <code>countrate</code>               (<code>int</code>)           \u2013            <p>Counts per second inside the spectrum (rounded)</p> </li> <li> <code>cosmics</code>               (<code>int</code>)           \u2013            <p>Detected counts above the last channel</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.Model","title":"Model","text":"<p>Drone models produced by Blueye</p>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.MotionInput","title":"MotionInput","text":"<p>Motion input from client. Used to indicate the desired motion in each direction. Typically these values map to the left and right joystick for motion, and the left and right trigger for the slow and boost modifiers.</p> <p>Attributes:</p> <ul> <li> <code>surge</code>               (<code>float</code>)           \u2013            <p>Forward (positive) and backwards (negative) movement. (-1..1)</p> </li> <li> <code>sway</code>               (<code>float</code>)           \u2013            <p>Right (positive) and left (negative) lateral movement (-1..1)</p> </li> <li> <code>heave</code>               (<code>float</code>)           \u2013            <p>Descend (positive) and ascend (negative) movement (-1..1)</p> </li> <li> <code>roll</code>               (<code>float</code>)           \u2013            <p>Roll left (negative) or right (positive). (-1..1)</p> </li> <li> <code>pitch</code>               (<code>float</code>)           \u2013            <p>Pitch down (negative) or up (positive). (-1..1)</p> </li> <li> <code>yaw</code>               (<code>float</code>)           \u2013            <p>Left (positive) and right (negative) movement (-1..1)</p> </li> <li> <code>slow</code>               (<code>float</code>)           \u2013            <p>Multiplier used to reduce the speed of the motion (0..1)</p> </li> <li> <code>boost</code>               (<code>float</code>)           \u2013            <p>Multiplier used to increase the speed of the motion (0..1)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.MultibeamConfig","title":"MultibeamConfig","text":"<p>Configuration message for sonar devices</p> <p>Attributes:</p> <ul> <li> <code>frequency_mode</code>               (<code>MultibeamFrequencyMode</code>)           \u2013            <p>Frequency mode used by the sonar if supported</p> </li> <li> <code>ping_rate</code>               (<code>PingRate</code>)           \u2013            <p>Sets the maximum ping rate.</p> </li> <li> <code>gamma_correction</code>               (<code>float</code>)           \u2013            <p>Gamma correction (0..1.0)</p> </li> <li> <code>gain_assist</code>               (<code>bool</code>)           \u2013            <p>Enable gain assist</p> </li> <li> <code>maximum_number_of_beams</code>               (<code>MaximumNumberOfBeams</code>)           \u2013            <p>Maximum number of beams. Used to throttle bandwidth.</p> </li> <li> <code>range_</code>               (<code>float</code>)           \u2013            <p>The range demand (m)</p> </li> <li> <code>gain</code>               (<code>float</code>)           \u2013            <p>The gain demand (0..1)</p> </li> <li> <code>salinity</code>               (<code>float</code>)           \u2013            <p>Set water salinity (ppt). Defaults to zero in fresh water</p> </li> <li> <code>device_id</code>               (<code>GuestPortDeviceID</code>)           \u2013            <p>Device ID of the sonar</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>MaximumNumberOfBeams</code>           \u2013            </li> <li> <code>PingRate</code>           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.MultibeamConfig.MaximumNumberOfBeams","title":"MaximumNumberOfBeams","text":""},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.MultibeamConfig.PingRate","title":"PingRate","text":""},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.MultibeamDiscovery","title":"MultibeamDiscovery","text":"<p>Discovery message for sonar devices</p> <p>Attributes:</p> <ul> <li> <code>enabled</code>               (<code>bool</code>)           \u2013            <p>If the sonar driver is enabled</p> </li> <li> <code>ip</code>               (<code>str</code>)           \u2013            <p>IP address of the sonar</p> </li> <li> <code>mask</code>               (<code>str</code>)           \u2013            <p>Subnet mask of the sonar</p> </li> <li> <code>serial_number</code>               (<code>str</code>)           \u2013            <p>Serial number of the sonar</p> </li> <li> <code>fw_version</code>               (<code>str</code>)           \u2013            <p>Firmware version of the sonar</p> </li> <li> <code>connected_ip</code>               (<code>str</code>)           \u2013            <p>IP address of the connected device</p> </li> <li> <code>device_id</code>               (<code>GuestPortDeviceID</code>)           \u2013            <p>Device ID of the sonar</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.MultibeamFrameOffset","title":"MultibeamFrameOffset","text":"<p>Frame offset for multibeam recordings index cache</p> <p>Attributes:</p> <ul> <li> <code>duration</code>               (<code>Duration</code>)           \u2013            <p>Duration from the start of the recording</p> </li> <li> <code>offset</code>               (<code>int</code>)           \u2013            <p>Offset in bytes from the start of the file</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.MultibeamFrequencyMode","title":"MultibeamFrequencyMode","text":""},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.MultibeamPing","title":"MultibeamPing","text":"<p>Multibeam sonar ping Contains all the information for rendering a multibeam sonar frame</p> <p>Attributes:</p> <ul> <li> <code>range_</code>               (<code>float</code>)           \u2013            <p>Maximum range value (m)</p> </li> <li> <code>gain</code>               (<code>float</code>)           \u2013            <p>Percentage of gain (0 to 1)</p> </li> <li> <code>frequency</code>               (<code>float</code>)           \u2013            <p>Ping acoustic frequency (Hz)</p> </li> <li> <code>speed_of_sound_used</code>               (<code>float</code>)           \u2013            <p>Speed of sound used by the sonar for range calculations (m/s)</p> </li> <li> <code>frequency_mode</code>               (<code>MultibeamFrequencyMode</code>)           \u2013            <p>Frequency mode used by the sonar for this frame</p> </li> <li> <code>number_of_ranges</code>               (<code>int</code>)           \u2013            <p>Height of the ping image data.</p> </li> <li> <code>number_of_beams</code>               (<code>int</code>)           \u2013            <p>Width of the ping image data.</p> </li> <li> <code>step</code>               (<code>int</code>)           \u2013            <p>Size in bytes of each row in the ping data image.</p> </li> <li> <code>bearings</code>               (<code>Sequence[float]</code>)           \u2013            <p>Bearing angle of each column of the sonar data (in 100<sup>th</sup> of a degree, multiply by 0.01 to get a value in degrees). The sonar image is not sampled uniformly in the bearing direction.</p> </li> <li> <code>ping_data</code>               (<code>bytes</code>)           \u2013            <p>Ping data (row major, 2D, grayscale image)</p> </li> <li> <code>device_id</code>               (<code>GuestPortDeviceID</code>)           \u2013            <p>Device ID of the sonar</p> </li> <li> <code>frame_generation_timestamp</code>               (<code>Timestamp</code>)           \u2013            <p>Timestamp when the frame was generated</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.MultibeamServo","title":"MultibeamServo","text":"<p>Servo message used to represent the angle of the servo.</p> <p>Attributes:</p> <ul> <li> <code>angle</code>               (<code>float</code>)           \u2013            <p>Servo degrees (-30..30)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.MutltibeamRecordingIndex","title":"MutltibeamRecordingIndex","text":"<p>Multibeam recording index cache</p> <p>Attributes:</p> <ul> <li> <code>frame_offsets</code>               (<code>Sequence[MultibeamFrameOffset]</code>)           \u2013            <p>List of frame offsets</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.NStreamers","title":"NStreamers","text":"<p>Number of spectators connected to video stream.</p> <p>Attributes:</p> <ul> <li> <code>main</code>               (<code>int</code>)           \u2013            <p>The number of clients to the main camera stream</p> </li> <li> <code>guestport</code>               (<code>int</code>)           \u2013            <p>The number of clients to the guestport camera stream</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.NavigationSensorID","title":"NavigationSensorID","text":"<p>List of navigation sensors that can be used by the position observer</p>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.NavigationSensorStatus","title":"NavigationSensorStatus","text":"<p>Navigation sensor used in the position observer with validity state</p> <p>Attributes:</p> <ul> <li> <code>sensor_id</code>               (<code>NavigationSensorID</code>)           \u2013            <p>Sensor id</p> </li> <li> <code>is_valid</code>               (<code>bool</code>)           \u2013            <p>Sensor validity</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.Notification","title":"Notification","text":"<p>Notification is used for displaying info, warnings, and errors to the user.</p> <p>Attributes:</p> <ul> <li> <code>type_</code>               (<code>NotificationType</code>)           \u2013            <p>Notification to be displayed to the user</p> </li> <li> <code>level</code>               (<code>NotificationLevel</code>)           \u2013            <p>Level of the notification, info, warning or error</p> </li> <li> <code>value</code>               (<code>Any</code>)           \u2013            <p>Optional value to be displayed in the message</p> </li> <li> <code>timestamp</code>               (<code>Timestamp</code>)           \u2013            <p>Timestamp of the notification</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.NotificationLevel","title":"NotificationLevel","text":"<p>List of available notification levels.</p>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.NotificationType","title":"NotificationType","text":"<p>Notification is used for displaying info, warnings, and errors to the user.</p>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.OverlayParameters","title":"OverlayParameters","text":"<p>Overlay parameters. All available parameters that can be used to configure telemetry overlay on video recordings.</p> <p>Attributes:</p> <ul> <li> <code>temperature_enabled</code>               (<code>bool</code>)           \u2013            <p>If temperature should be included</p> </li> <li> <code>depth_enabled</code>               (<code>bool</code>)           \u2013            <p>If depth should be included</p> </li> <li> <code>heading_enabled</code>               (<code>bool</code>)           \u2013            <p>If heading should be included</p> </li> <li> <code>tilt_enabled</code>               (<code>bool</code>)           \u2013            <p>If camera tilt angle should be included</p> </li> <li> <code>thickness_enabled</code>               (<code>bool</code>)           \u2013            <p>If camera tilt angle should be included</p> </li> <li> <code>date_enabled</code>               (<code>bool</code>)           \u2013            <p>If date should be included</p> </li> <li> <code>distance_enabled</code>               (<code>bool</code>)           \u2013            <p>If distance should be included</p> </li> <li> <code>altitude_enabled</code>               (<code>bool</code>)           \u2013            <p>If altitude should be included</p> </li> <li> <code>cp_probe_enabled</code>               (<code>bool</code>)           \u2013            <p>If cp-probe should be included</p> </li> <li> <code>medusa_enabled</code>               (<code>bool</code>)           \u2013            <p>If medusa measurement should be included</p> </li> <li> <code>drone_location_enabled</code>               (<code>bool</code>)           \u2013            <p>If the drone location coordinates should be included</p> </li> <li> <code>logo_type</code>               (<code>LogoType</code>)           \u2013            <p>Which logo should be used</p> </li> <li> <code>depth_unit</code>               (<code>DepthUnit</code>)           \u2013            <p>Which unit should be used for depth: Meter, Feet or None</p> </li> <li> <code>temperature_unit</code>               (<code>TemperatureUnit</code>)           \u2013            <p>Which unit should be used for temperature: Celsius or Fahrenheit</p> </li> <li> <code>thickness_unit</code>               (<code>ThicknessUnit</code>)           \u2013            <p>Which unit should be used for thickness: Millimeters or Inches</p> </li> <li> <code>timezone_offset</code>               (<code>int</code>)           \u2013            <p>Timezone offset from UTC (min)</p> </li> <li> <code>margin_width</code>               (<code>int</code>)           \u2013            <p>Horizontal margins of text elements (px)</p> </li> <li> <code>margin_height</code>               (<code>int</code>)           \u2013            <p>Vertical margins of text elements (px)</p> </li> <li> <code>font_size</code>               (<code>FontSize</code>)           \u2013            <p>Font size of text elements</p> </li> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>Optional title</p> </li> <li> <code>subtitle</code>               (<code>str</code>)           \u2013            <p>Optional subtitle</p> </li> <li> <code>date_format</code>               (<code>str</code>)           \u2013            <p>Posix strftime format string for time stamp</p> </li> <li> <code>shading</code>               (<code>float</code>)           \u2013            <p>Pixel intensity to subtract from text background (0..1), 0: transparent, 1: black</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.PersistentStorageSettings","title":"PersistentStorageSettings","text":"<p>PersistentStorageSettings defines settings for writing various types of data in the persistent storage on the drone Some of the data is written during factory calibration (acc calibration), while other data is written during user calubration or during normal operation.</p> <p>Attributes:</p> <ul> <li> <code>videos</code>               (<code>bool</code>)           \u2013            <p>Indicates if videos should be written to the video partition.</p> </li> <li> <code>images</code>               (<code>bool</code>)           \u2013            <p>Indicates if images should be written to the video partition.</p> </li> <li> <code>binlog</code>               (<code>bool</code>)           \u2013            <p>Indicates if binary logs with telemetry data should be written to the data partition.</p> </li> <li> <code>multibeam</code>               (<code>bool</code>)           \u2013            <p>Indicates if multibeam data should be written to the video partition.</p> </li> <li> <code>webserver_log</code>               (<code>bool</code>)           \u2013            <p>Indicates if webserver logs should be written to the data partition.</p> </li> <li> <code>control_system_log</code>               (<code>bool</code>)           \u2013            <p>Indicates if control system logs should be written to the data partition.</p> </li> <li> <code>gyro_calibration</code>               (<code>bool</code>)           \u2013            <p>Indicates if gyro calibration data should be written to the data partition.</p> </li> <li> <code>compass_calibration</code>               (<code>bool</code>)           \u2013            <p>Indicates if compass calibration data should be written to the data partition.</p> </li> <li> <code>acc_calibration</code>               (<code>bool</code>)           \u2013            <p>Indicates if accelerometer calibration data should be written to the data partition.</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.PingerConfiguration","title":"PingerConfiguration","text":"<p>Pinger configuration. Used to specify the configuration the BR 1D-Pinger.</p> <p>Attributes:</p> <ul> <li> <code>mounting_direction</code>               (<code>MountingDirection</code>)           \u2013            <p>Mounting direction of the pinger</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>MountingDirection</code>           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.PingerConfiguration.MountingDirection","title":"MountingDirection","text":""},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.PositionEstimate","title":"PositionEstimate","text":"<p>Position estimate from the Extended Kalman filter based observer if a DVL is connected.</p> <p>Attributes:</p> <ul> <li> <code>northing</code>               (<code>float</code>)           \u2013            <p>Position from reset point (m)</p> </li> <li> <code>easting</code>               (<code>float</code>)           \u2013            <p>Position from reset point (m)</p> </li> <li> <code>heading</code>               (<code>float</code>)           \u2013            <p>Gyro based heading estimate (continous radians)</p> </li> <li> <code>surge_rate</code>               (<code>float</code>)           \u2013            <p>Velocity in surge (m/s)</p> </li> <li> <code>sway_rate</code>               (<code>float</code>)           \u2013            <p>Velocity in sway (m/s)</p> </li> <li> <code>yaw_rate</code>               (<code>float</code>)           \u2013            <p>Rotaion rate in yaw (rad/s)</p> </li> <li> <code>ocean_current</code>               (<code>float</code>)           \u2013            <p>Estimated ocean current (m/s)</p> </li> <li> <code>odometer</code>               (<code>float</code>)           \u2013            <p>Travelled distance since reset (m)</p> </li> <li> <code>is_valid</code>               (<code>bool</code>)           \u2013            <p>If the estimate can be trusted</p> </li> <li> <code>global_position</code>               (<code>LatLongPosition</code>)           \u2013            <p>Best estimate of the global position in decimal degrees</p> </li> <li> <code>navigation_sensors</code>               (<code>Sequence[NavigationSensorStatus]</code>)           \u2013            <p>List of available sensors with status</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.PressureSensorType","title":"PressureSensorType","text":"<p>Depth sensors used by the drone.</p>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.RecordOn","title":"RecordOn","text":"<p>Which cameras are supposed to be recording</p> <p>Attributes:</p> <ul> <li> <code>main</code>               (<code>bool</code>)           \u2013            <p>Record the main camera</p> </li> <li> <code>guestport</code>               (<code>bool</code>)           \u2013            <p>Record external camera</p> </li> <li> <code>multibeam</code>               (<code>bool</code>)           \u2013            <p>Record multibeam</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.RecordState","title":"RecordState","text":"<p>Camera recording state.</p> <p>Attributes:</p> <ul> <li> <code>main_is_recording</code>               (<code>bool</code>)           \u2013            <p>If the main camera is recording</p> </li> <li> <code>main_seconds</code>               (<code>int</code>)           \u2013            <p>Main record time (s)</p> </li> <li> <code>main_fps</code>               (<code>float</code>)           \u2013            <p>Main record fps</p> </li> <li> <code>guestport_is_recording</code>               (<code>bool</code>)           \u2013            <p>If the guestport camera is recording</p> </li> <li> <code>guestport_seconds</code>               (<code>int</code>)           \u2013            <p>Guestport record time (s)</p> </li> <li> <code>guestport_fps</code>               (<code>float</code>)           \u2013            <p>Guestport record fps</p> </li> <li> <code>multibeam_is_recording</code>               (<code>bool</code>)           \u2013            <p>If the multibeam is recording</p> </li> <li> <code>multibeam_seconds</code>               (<code>int</code>)           \u2013            <p>Multibeam record time (s)</p> </li> <li> <code>multibeam_fps</code>               (<code>float</code>)           \u2013            <p>Multibeam record fps</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.Reference","title":"Reference","text":"<p>Reference for the control system. Note that the internal heading reference is not relative to North, use (ControlHealth.heading_error + pose.yaw) instead.</p> <p>Attributes:</p> <ul> <li> <code>surge</code>               (<code>float</code>)           \u2013            <p>Reference from joystick surge input (0..1)</p> </li> <li> <code>sway</code>               (<code>float</code>)           \u2013            <p>Reference from joystick sway input (0..1)</p> </li> <li> <code>heave</code>               (<code>float</code>)           \u2013            <p>Reference from joystick heave input (0..1)</p> </li> <li> <code>yaw</code>               (<code>float</code>)           \u2013            <p>Reference from joystick yaw input (0..1)</p> </li> <li> <code>depth</code>               (<code>float</code>)           \u2013            <p>Reference drone depth below surface (m)</p> </li> <li> <code>heading</code>               (<code>float</code>)           \u2013            <p>Reference used in auto heading mode, gyro based (\u00b0)</p> </li> <li> <code>altitude</code>               (<code>float</code>)           \u2013            <p>Reference used in auto altitude mode (m)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.ResetCoordinateSource","title":"ResetCoordinateSource","text":""},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.ResetPositionSettings","title":"ResetPositionSettings","text":"<p>ResetPositionSettings used during reset of the position estimate.</p> <p>Attributes:</p> <ul> <li> <code>heading_source_during_reset</code>               (<code>HeadingSource</code>)           \u2013            <p>Option to use the drone compass or due North as heading during reset</p> </li> <li> <code>manual_heading</code>               (<code>float</code>)           \u2013            <p>Heading in degrees (0-359)</p> </li> <li> <code>reset_coordinate_source</code>               (<code>ResetCoordinateSource</code>)           \u2013            <p>Option to use the device GPS or a manual coordinate.</p> </li> <li> <code>reset_coordinate</code>               (<code>LatLongPosition</code>)           \u2013            <p>Reset coordinate in decimal degrees</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.Resolution","title":"Resolution","text":"<p>Available camera resolutions.</p>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.StationKeepingState","title":"StationKeepingState","text":"<p>Station keeping state.</p> <p>Attributes:</p> <ul> <li> <code>enabled</code>               (<code>bool</code>)           \u2013            <p>If station keeping is enabled</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.StorageSpace","title":"StorageSpace","text":"<p>Storage space.</p> <p>Attributes:</p> <ul> <li> <code>total_space</code>               (<code>int</code>)           \u2013            <p>Total bytes of storage space (B)</p> </li> <li> <code>free_space</code>               (<code>int</code>)           \u2013            <p>Available bytes of storage space (B)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.SystemTime","title":"SystemTime","text":"<p>System time.</p> <p>Attributes:</p> <ul> <li> <code>unix_timestamp</code>               (<code>Timestamp</code>)           \u2013            <p>Unix timestamp</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.TemperatureUnit","title":"TemperatureUnit","text":"<p>Available temperature units.</p>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.ThicknessGauge","title":"ThicknessGauge","text":"<p>Thickness measurement data from a Cygnus Thickness Gauge.</p> <p>Attributes:</p> <ul> <li> <code>thickness_measurement</code>               (<code>float</code>)           \u2013            <p>Thickness measurement of a steel plate</p> </li> <li> <code>echo_count</code>               (<code>int</code>)           \u2013            <p>Indicating the quality of the reading when invalid (0-3)</p> </li> <li> <code>sound_velocity</code>               (<code>int</code>)           \u2013            <p>Speed of sound in the steel member (m/s)</p> </li> <li> <code>is_measurement_valid</code>               (<code>bool</code>)           \u2013            <p>Indicating if the measurement is valid</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.ThicknessUnit","title":"ThicknessUnit","text":"<p>Available thickness units.</p>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.TiltAngle","title":"TiltAngle","text":"<p>Angle of tilt camera in degrees.</p> <p>Attributes:</p> <ul> <li> <code>value</code>               (<code>float</code>)           \u2013            <p>Tilt angle (\u00b0)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.TiltStabilizationState","title":"TiltStabilizationState","text":"<p>Tilt stabilization state. Blueye drones with mechanical tilt has the ability to enable camera stabilization.</p> <p>Attributes:</p> <ul> <li> <code>enabled</code>               (<code>bool</code>)           \u2013            <p>If tilt stabilization is enabled</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.TiltVelocity","title":"TiltVelocity","text":"<p>Relative velocity of tilt</p> <p>Attributes:</p> <ul> <li> <code>value</code>               (<code>float</code>)           \u2013            <p>Relative angular velocity of tilt (-1..1), negative means down and positive means up</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.TimeLapseState","title":"TimeLapseState","text":"<p>Time-lapse state published if time-lapse mission is running.</p> <p>Attributes:</p> <ul> <li> <code>interval</code>               (<code>float</code>)           \u2013            <p>Interval between photos</p> </li> <li> <code>photos_taken</code>               (<code>int</code>)           \u2013            <p>Number of photos taken</p> </li> <li> <code>interval_type</code>               (<code>IntervalType</code>)           \u2013            <p>Interval type for photos, distance or time</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.Vector3","title":"Vector3","text":"<p>Vector with 3 elements</p> <p>Attributes:</p> <ul> <li> <code>x</code>               (<code>float</code>)           \u2013            <p>x-component</p> </li> <li> <code>y</code>               (<code>float</code>)           \u2013            <p>y-component</p> </li> <li> <code>z</code>               (<code>float</code>)           \u2013            <p>z-component</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.WaterDensity","title":"WaterDensity","text":"<p>Water density. Used to specify the water density the drone is operating in, to achieve more accurate depth measurements, f. ex. influenced by salinity.</p> <p>Attributes:</p> <ul> <li> <code>value</code>               (<code>float</code>)           \u2013            <p>Water density (g/l)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.WaterTemperature","title":"WaterTemperature","text":"<p>Water temperature measured by the drone's combined depth and temperature sensor.</p> <p>Attributes:</p> <ul> <li> <code>value</code>               (<code>float</code>)           \u2013            <p>Water temperature (\u00b0C)</p> </li> </ul>"},{"location":"reference/blueye/protocol/message_formats/#blueye.protocol.types.message_formats.WeatherVaningState","title":"WeatherVaningState","text":"<p>Weather vaning state.</p> <p>Attributes:</p> <ul> <li> <code>enabled</code>               (<code>bool</code>)           \u2013            <p>If weather vaning is enabled</p> </li> </ul>"},{"location":"reference/blueye/protocol/mission_planning/","title":"Mission Planning","text":""},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning","title":"mission_planning","text":"<p>Classes:</p> <ul> <li> <code>CameraAction</code>           \u2013            <p>List of available camera actions.</p> </li> <li> <code>CameraCommand</code>           \u2013            <p>CameraCommands are used to control the camera from a mission.</p> </li> <li> <code>ControlModeCommand</code>           \u2013            <p>A ControlModeCommand is used to set vertical and horizontal</p> </li> <li> <code>ControlModeHorizontal</code>           \u2013            </li> <li> <code>ControlModeVertical</code>           \u2013            </li> <li> <code>DepthSetPoint</code>           \u2013            <p>Depth set point is used to describe a depth set-point</p> </li> <li> <code>DepthSetPointCommand</code>           \u2013            <p>A DepthSetPointCommand is used to go to a desired depth or</p> </li> <li> <code>DepthZeroReference</code>           \u2013            <p>Depth zero reference from surface for depth, and seabed for</p> </li> <li> <code>GoToHomeCommand</code>           \u2013            <p>GoToHomeCommand is used to go to the home position.</p> </li> <li> <code>GoToSeabedCommand</code>           \u2013            <p>GoToSeabedCommand is used to go to the seabed.</p> </li> <li> <code>GoToSurfaceCommand</code>           \u2013            <p>GoToSurfaceCommand is used to go to the surface.</p> </li> <li> <code>Instruction</code>           \u2013            <p>A mission consists of one or multiple instructions. One</p> </li> <li> <code>InstructionType</code>           \u2013            <p>List of available instruction types.</p> </li> <li> <code>Mission</code>           \u2013            <p>A list of waypoints describes a mission that the auto pilot</p> </li> <li> <code>MissionState</code>           \u2013            <p>List of mission supervisor states.</p> </li> <li> <code>MissionStatus</code>           \u2013            <p>Mission Status is used for showing the status of the mission.</p> </li> <li> <code>PathSegment</code>           \u2013            <p>Path segment used to describe segments of a mission as a line</p> </li> <li> <code>ReferenceAutoPilot</code>           \u2013            <p>Reference for the auto pilot when a mission is active.</p> </li> <li> <code>TiltMainCameraCommand</code>           \u2013            <p>The TiltMainCameraCommand can set the desired camera tilt</p> </li> <li> <code>TiltMultibeamCommand</code>           \u2013            <p>The TiltMultibeamCommand is used to set the tilt angle of the</p> </li> <li> <code>WaitForCommand</code>           \u2013            <p>WaitForCommand is used to wait during a mission.</p> </li> <li> <code>Waypoint</code>           \u2013            <p>Waypoints used to describe a path for the auto pilot.</p> </li> <li> <code>WaypointCommand</code>           \u2013            <p>A WaypointCommand will request the drone to drive to a point</p> </li> </ul>"},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.CameraAction","title":"CameraAction","text":"<p>List of available camera actions.</p>"},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.CameraCommand","title":"CameraCommand","text":"<p>CameraCommands are used to control the camera from a mission.</p> <p>Attributes:</p> <ul> <li> <code>camera_action</code>               (<code>CameraAction</code>)           \u2013            <p>Camera command</p> </li> <li> <code>action_param</code>               (<code>float</code>)           \u2013            <p>Used for taking photos based on a time or distance interval</p> </li> </ul>"},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.ControlModeCommand","title":"ControlModeCommand","text":"<p>A ControlModeCommand is used to set vertical and horizontal control mode during a mission.</p> <p>Attributes:</p> <ul> <li> <code>control_mode_vertical</code>               (<code>ControlModeVertical</code>)           \u2013            <p>Desired control mode in heave</p> </li> <li> <code>control_mode_horizontal</code>               (<code>ControlModeHorizontal</code>)           \u2013            <p>Desired control mode in surge and yaw</p> </li> </ul>"},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.ControlModeHorizontal","title":"ControlModeHorizontal","text":""},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.ControlModeVertical","title":"ControlModeVertical","text":""},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.DepthSetPoint","title":"DepthSetPoint","text":"<p>Depth set point is used to describe a depth set-point relative to the surface or the seabed.</p> <p>Attributes:</p> <ul> <li> <code>depth</code>               (<code>float</code>)           \u2013            <p>Desired depth at the wp (m)</p> </li> <li> <code>speed_to_depth</code>               (<code>float</code>)           \u2013            <p>Desired speed to desired depth set point (m/s)</p> </li> <li> <code>depth_zero_reference</code>               (<code>DepthZeroReference</code>)           \u2013            <p>Used to distinguish desired altitude or depth</p> </li> </ul>"},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.DepthSetPointCommand","title":"DepthSetPointCommand","text":"<p>A DepthSetPointCommand is used to go to a desired depth or altitude.</p> <p>Attributes:</p> <ul> <li> <code>depth_set_point</code>               (<code>DepthSetPoint</code>)           \u2013            <p>Depth set point to go to</p> </li> </ul>"},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.DepthZeroReference","title":"DepthZeroReference","text":"<p>Depth zero reference from surface for depth, and seabed for altitude.</p>"},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.GoToHomeCommand","title":"GoToHomeCommand","text":"<p>GoToHomeCommand is used to go to the home position.</p> <p>Attributes:</p> <ul> <li> <code>desired_speed</code>               (<code>float</code>)           \u2013            <p>Desired speed to home (m/s)</p> </li> </ul>"},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.GoToSeabedCommand","title":"GoToSeabedCommand","text":"<p>GoToSeabedCommand is used to go to the seabed.</p> <p>Attributes:</p> <ul> <li> <code>desired_speed</code>               (<code>float</code>)           \u2013            <p>Desired speed to seabed (m/s)</p> </li> </ul>"},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.GoToSurfaceCommand","title":"GoToSurfaceCommand","text":"<p>GoToSurfaceCommand is used to go to the surface.</p> <p>Attributes:</p> <ul> <li> <code>desired_speed</code>               (<code>float</code>)           \u2013            <p>Desired speed to surface (m/s)</p> </li> </ul>"},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.Instruction","title":"Instruction","text":"<p>A mission consists of one or multiple instructions. One instruction can be of different types.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            </li> <li> <code>group_id</code>               (<code>int</code>)           \u2013            <p>Group id used for polygons</p> </li> <li> <code>auto_continue</code>               (<code>bool</code>)           \u2013            <p>False will pause the mission after this instruction</p> </li> <li> <code>waypoint_command</code>               (<code>WaypointCommand</code>)           \u2013            <p>Go to waypoint</p> </li> <li> <code>depth_set_point_command</code>               (<code>DepthSetPointCommand</code>)           \u2013            <p>Go to depth</p> </li> <li> <code>camera_command</code>               (<code>CameraCommand</code>)           \u2013            <p>Camera commands</p> </li> <li> <code>control_mode_command</code>               (<code>ControlModeCommand</code>)           \u2013            <p>Set control modes</p> </li> <li> <code>tilt_main_camera_command</code>               (<code>TiltMainCameraCommand</code>)           \u2013            <p>Set camera to angle x</p> </li> <li> <code>tilt_multibeam_command</code>               (<code>TiltMultibeamCommand</code>)           \u2013            <p>Set multibeam tilt angle</p> </li> <li> <code>wait_for_command</code>               (<code>WaitForCommand</code>)           \u2013            <p>Wait for x seconds</p> </li> <li> <code>go_to_surface_command</code>               (<code>GoToSurfaceCommand</code>)           \u2013            <p>Go to surface</p> </li> <li> <code>go_to_seabed_command</code>               (<code>GoToSeabedCommand</code>)           \u2013            <p>Go to seabed</p> </li> <li> <code>go_to_home_command</code>               (<code>GoToHomeCommand</code>)           \u2013            <p>Go to home position</p> </li> </ul>"},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.InstructionType","title":"InstructionType","text":"<p>List of available instruction types.</p>"},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.Mission","title":"Mission","text":"<p>A list of waypoints describes a mission that the auto pilot can execute.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>Mission id</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Mission name provided from the app</p> </li> <li> <code>instructions</code>               (<code>Sequence[Instruction]</code>)           \u2013            <p>List of instructions in the mission</p> </li> <li> <code>path_segments</code>               (<code>Sequence[PathSegment]</code>)           \u2013            <p>Calculated path segments from the reference generator (optional)</p> </li> <li> <code>total_distance</code>               (<code>int</code>)           \u2013            <p>Total distance of the mission (m) (optional)</p> </li> <li> <code>total_duration_time</code>               (<code>int</code>)           \u2013            <p>Total duration time of the mission (s) (optional)</p> </li> <li> <code>default_surge_speed</code>               (<code>float</code>)           \u2013            <p>Default cruise speed of the mission (m/s) (optional)</p> </li> <li> <code>default_heave_speed</code>               (<code>float</code>)           \u2013            <p>Default heave speed of the mission (m/s) (optional)</p> </li> <li> <code>default_circle_of_acceptance</code>               (<code>float</code>)           \u2013            <p>Default circle of acceptance for waypoints (m) (optional)</p> </li> </ul>"},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.MissionState","title":"MissionState","text":"<p>List of mission supervisor states.</p>"},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.MissionStatus","title":"MissionStatus","text":"<p>Mission Status is used for showing the status of the mission.</p> <p>Attributes:</p> <ul> <li> <code>state</code>               (<code>MissionState</code>)           \u2013            <p>State of the mission supervisor</p> </li> <li> <code>time_elapsed</code>               (<code>int</code>)           \u2013            <p>Time elapsed since mission started (s)</p> </li> <li> <code>estimated_time_to_complete</code>               (<code>int</code>)           \u2013            <p>Estimated time to complete the mission (s)</p> </li> <li> <code>distance_to_complete</code>               (<code>int</code>)           \u2013            <p>Distance left of the mission (m)</p> </li> <li> <code>completed_instruction_ids</code>               (<code>Sequence[int]</code>)           \u2013            <p>Ids of the completed instructions</p> </li> <li> <code>total_number_of_instructions</code>               (<code>int</code>)           \u2013            <p>Total number of instructions in the mission</p> </li> <li> <code>completed_path_segment_ids</code>               (<code>Sequence[int]</code>)           \u2013            <p>Ids of the completed path segments</p> </li> <li> <code>total_number_of_path_segments</code>               (<code>int</code>)           \u2013            <p>Total number of path segments in the mission</p> </li> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>Mission id of the active mission</p> </li> </ul>"},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.PathSegment","title":"PathSegment","text":"<p>Path segment used to describe segments of a mission as a line between to waypoints.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>Path segment id starting at 0, -1 for inactive</p> </li> <li> <code>speed_to_target</code>               (<code>float</code>)           \u2013            <p>Desired speed over ground in (m/s)</p> </li> <li> <code>course_to_target</code>               (<code>float</code>)           \u2013            <p>Course to target relative to north (rad) [-pi, pi]</p> </li> <li> <code>depth_speed</code>               (<code>float</code>)           \u2013            <p>Desired speed in heave (m/s)</p> </li> <li> <code>horizontal_length</code>               (<code>float</code>)           \u2013            <p>Horizontal length of the path segment (m)</p> </li> <li> <code>vertical_length</code>               (<code>float</code>)           \u2013            <p>Vertical length of the path segment (m)</p> </li> <li> <code>from_wp_id</code>               (<code>int</code>)           \u2013            <p>Id of the starting waypoint</p> </li> <li> <code>to_wp_id</code>               (<code>int</code>)           \u2013            <p>Id of the ending waypoint</p> </li> <li> <code>duration_time</code>               (<code>float</code>)           \u2013            <p>Estimated time it takes to complete given length and desired speed (s)</p> </li> </ul>"},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.ReferenceAutoPilot","title":"ReferenceAutoPilot","text":"<p>Reference for the auto pilot when a mission is active.</p> <p>Attributes:</p> <ul> <li> <code>instruction_type</code>               (<code>InstructionType</code>)           \u2013            <p>Instruction type</p> </li> <li> <code>active_instruction_id</code>               (<code>int</code>)           \u2013            <p>Id of the active instruction</p> </li> <li> <code>active_path_segment_id</code>               (<code>int</code>)           \u2013            <p>Id of the active path segment</p> </li> <li> <code>course_to_target</code>               (<code>float</code>)           \u2013            <p>Course to the next waypoint from north (rad) [-pi, pi]</p> </li> <li> <code>speed_over_ground</code>               (<code>float</code>)           \u2013            <p>Desired speed over ground (m/s)</p> </li> <li> <code>horizontal_distance_to_target</code>               (<code>float</code>)           \u2013            <p>Horizontal distance to the next waypoint (m)</p> </li> <li> <code>circle_of_acceptance</code>               (<code>float</code>)           \u2013            <p>Circle of acceptance to mark waypoint as visited (m)</p> </li> <li> <code>depth_set_point</code>               (<code>float</code>)           \u2013            <p>Desired depth set point (m)</p> </li> <li> <code>heave_velocity</code>               (<code>float</code>)           \u2013            <p>Desired heave velocity (m/s)</p> </li> <li> <code>vertical_distance_to_target</code>               (<code>float</code>)           \u2013            <p>Vertical distance to the next waypoint (m)</p> </li> <li> <code>depth_zero_reference</code>               (<code>DepthZeroReference</code>)           \u2013            <p>Indicates if depth is measured from the surface or seabed</p> </li> <li> <code>time_to_complete</code>               (<code>float</code>)           \u2013            <p>Estimated time to complete the instruction (s)</p> </li> </ul>"},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.TiltMainCameraCommand","title":"TiltMainCameraCommand","text":"<p>The TiltMainCameraCommand can set the desired camera tilt angle.</p> <p>Attributes:</p> <ul> <li> <code>tilt_angle</code>               (<code>TiltAngle</code>)           \u2013            <p>Tilt angle of the camera (-30..30)</p> </li> </ul>"},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.TiltMultibeamCommand","title":"TiltMultibeamCommand","text":"<p>The TiltMultibeamCommand is used to set the tilt angle of the servo.</p> <p>Attributes:</p> <ul> <li> <code>multibeam_servo</code>               (<code>MultibeamServo</code>)           \u2013            <p>Tilt angle for the multibeam servo</p> </li> </ul>"},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.WaitForCommand","title":"WaitForCommand","text":"<p>WaitForCommand is used to wait during a mission.</p> <p>Attributes:</p> <ul> <li> <code>wait_for_seconds</code>               (<code>float</code>)           \u2013            <p>Wait for x seconds</p> </li> </ul>"},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.Waypoint","title":"Waypoint","text":"<p>Waypoints used to describe a path for the auto pilot.</p> <p>Attributes:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>Waypoint id</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Waypoint name provided from the app</p> </li> <li> <code>global_position</code>               (<code>LatLongPosition</code>)           \u2013            <p>Position if the waypoint (decimal degrees)</p> </li> <li> <code>circle_of_acceptance</code>               (<code>float</code>)           \u2013            <p>Radius of the acceptance circle around the waypoint (m)</p> </li> <li> <code>speed_to_target</code>               (<code>float</code>)           \u2013            <p>Desired speed over ground to waypoint (m/s)</p> </li> <li> <code>depth_set_point</code>               (<code>DepthSetPoint</code>)           \u2013            <p>Depth set point (optional)</p> </li> </ul>"},{"location":"reference/blueye/protocol/mission_planning/#blueye.protocol.types.mission_planning.WaypointCommand","title":"WaypointCommand","text":"<p>A WaypointCommand will request the drone to drive to a point automatically.</p> <p>Attributes:</p> <ul> <li> <code>waypoint</code>               (<code>Waypoint</code>)           \u2013            <p>Waypoint to go to</p> </li> </ul>"},{"location":"reference/blueye/protocol/overview/","title":"Message Types Overview","text":""},{"location":"reference/blueye/protocol/overview/#telemetry-messages","title":"Telemetry Messages","text":"<p>Telemetry messages are used to receive real-time data from the drone. Examples of telemetry messages include depth, altitude, attitude, and battery status. These messages are handled by the TelemetryClient class. They are subscribed to and processed to update the state of the drone or trigger callbacks.</p>"},{"location":"reference/blueye/protocol/overview/#control-messages","title":"Control Messages","text":"<p>Control messages are used to send commands to control the drone's behavior. Examples of control messages include setting light intensity, controlling thrusters, and taking pictures. These messages are handled by the CtrlClient class. They are sent to the drone to perform actions like adjusting lights, moving the drone, or starting/stopping recordings.</p>"},{"location":"reference/blueye/protocol/overview/#request-reply-req_rep-messages","title":"Request-Reply (Req_Rep) Messages","text":"<p>Request-Reply messages are used for synchronous communication where a request is sent, and a response is expected. Examples of request-reply messages include getting camera parameters, setting overlay parameters, and synchronizing time. These messages are handled by the ReqRepClient class. They are used to query the drone for information or to set configurations that require confirmation.</p>"},{"location":"reference/blueye/protocol/overview/#message-formats","title":"Message Formats","text":"<p>Message formats define the structure and serialization of messages. These include Protobuf message definitions for telemetry, control, and request-reply messages. Message formats are used internally by the SDK to serialize and deserialize messages, ensuring consistent communication between the SDK and the drone. For example, the telemetry message \"DepthTel\" will have a \"Depth\" message from message formats.</p>"},{"location":"reference/blueye/protocol/overview/#mission-planning-messages","title":"Mission Planning Messages","text":"<p>Mission planning messages are used for planning and executing missions. Examples of mission planning messages include waypoints and mission start/stop commands. These messages are used to define and control autonomous missions for the drone, allowing for pre-programmed routes and actions to be executed by the drone.</p>"},{"location":"reference/blueye/protocol/overview/#aquatroll-messages","title":"Aquatroll Messages","text":"<p>Aquatroll messages are used for communication with Aquatroll sensors. Examples of Aquatroll messages include sensor data requests and configuration commands. These messages are used to interface with Aquatroll sensors connected to the drone, allowing for the collection and management of environmental data from the sensors.</p>"},{"location":"reference/blueye/protocol/req_rep/","title":"ReqRep","text":""},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep","title":"req_rep","text":"<p>Classes:</p> <ul> <li> <code>ConnectClientRep</code>           \u2013            <p>Response after connecting a client to the drone.</p> </li> <li> <code>ConnectClientReq</code>           \u2013            <p>Connect a new client to the drone.</p> </li> <li> <code>DisconnectClientRep</code>           \u2013            <p>Response after disconnecting a client from the drone.</p> </li> <li> <code>DisconnectClientReq</code>           \u2013            <p>Disconnect a client from the drone.</p> </li> <li> <code>GetBatteryRep</code>           \u2013            <p>Response with essential battery information.</p> </li> <li> <code>GetBatteryReq</code>           \u2013            <p>Request essential battery information.</p> </li> <li> <code>GetCameraParametersRep</code>           \u2013            <p>Response with the currently set camera parameters.</p> </li> <li> <code>GetCameraParametersReq</code>           \u2013            <p>Request to get the currently set camera parameters.</p> </li> <li> <code>GetMissionRep</code>           \u2013            <p>Get active mission response.</p> </li> <li> <code>GetMissionReq</code>           \u2013            <p>Service request to the reference_generator to get the active</p> </li> <li> <code>GetOverlayParametersRep</code>           \u2013            <p>Response with the currently set video overlay parameters.</p> </li> <li> <code>GetOverlayParametersReq</code>           \u2013            <p>Request to get currently set video overlay parameters.</p> </li> <li> <code>GetPersistentStorageSettingsRep</code>           \u2013            <p>Response with the currently set persistent storage settings.</p> </li> <li> <code>GetPersistentStorageSettingsReq</code>           \u2013            <p>Request to get currently set persistent storage settings.</p> </li> <li> <code>GetTelemetryRep</code>           \u2013            <p>Response with latest telemetry</p> </li> <li> <code>GetTelemetryReq</code>           \u2013            <p>Request to get latest telemetry data</p> </li> <li> <code>PingRep</code>           \u2013            <p>Response message from a PingReq request.</p> </li> <li> <code>PingReq</code>           \u2013            <p>The simplest message to use to test request/reply</p> </li> <li> <code>SetCameraParametersRep</code>           \u2013            <p>Response after setting the camera parameters.</p> </li> <li> <code>SetCameraParametersReq</code>           \u2013            <p>Request to set camera parameters.</p> </li> <li> <code>SetInstructionUpdateRep</code>           \u2013            <p>Response after updating an instruction in the current</p> </li> <li> <code>SetInstructionUpdateReq</code>           \u2013            <p>Updates an instruction in current mission with a new</p> </li> <li> <code>SetMissionRep</code>           \u2013            <p>Response after setting a new mission.</p> </li> <li> <code>SetMissionReq</code>           \u2013            <p>Issue a desired mission to the reference_generator.</p> </li> <li> <code>SetOverlayParametersRep</code>           \u2013            <p>Response after setting video overlay parameters.</p> </li> <li> <code>SetOverlayParametersReq</code>           \u2013            <p>Request to set video overlay parameters.</p> </li> <li> <code>SetPersistentStorageSettingsRep</code>           \u2013            <p>Response after setting persistent storage settings.</p> </li> <li> <code>SetPersistentStorageSettingsReq</code>           \u2013            <p>Request to set persistent storage settings.</p> </li> <li> <code>SetPubFrequencyRep</code>           \u2013            <p>Response after updating publish frequency</p> </li> <li> <code>SetPubFrequencyReq</code>           \u2013            <p>Request to update the publish frequency</p> </li> <li> <code>SetThicknessGaugeParametersRep</code>           \u2013            <p>Response after setting thickness gauge parameters.</p> </li> <li> <code>SetThicknessGaugeParametersReq</code>           \u2013            <p>Request to set parameters for ultrasonic thickness gauge.</p> </li> <li> <code>SyncTimeRep</code>           \u2013            <p>Response after setting the system time on the drone.</p> </li> <li> <code>SyncTimeReq</code>           \u2013            <p>Request to set the system time on the drone.</p> </li> </ul>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.ConnectClientRep","title":"ConnectClientRep","text":"<p>Response after connecting a client to the drone. Contains information about which client is in control, and a list of all connected clients.</p> <p>Attributes:</p> <ul> <li> <code>client_id</code>               (<code>int</code>)           \u2013            <p>The assigned ID of this client.</p> </li> <li> <code>client_id_in_control</code>               (<code>int</code>)           \u2013            <p>The ID of the client in control of the drone.</p> </li> <li> <code>connected_clients</code>               (<code>Sequence[ConnectedClient]</code>)           \u2013            <p>List of connected clients.</p> </li> </ul>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.ConnectClientReq","title":"ConnectClientReq","text":"<p>Connect a new client to the drone.</p> <p>Attributes:</p> <ul> <li> <code>client_info</code>               (<code>ClientInfo</code>)           \u2013            <p>Information about the client connecting to the drone.</p> </li> </ul>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.DisconnectClientRep","title":"DisconnectClientRep","text":"<p>Response after disconnecting a client from the drone. Contains information about which clients are connected and in control.</p> <p>Attributes:</p> <ul> <li> <code>client_id_in_control</code>               (<code>int</code>)           \u2013            <p>The ID of the client in control of the drone.</p> </li> <li> <code>connected_clients</code>               (<code>Sequence[ConnectedClient]</code>)           \u2013            <p>List of connected clients.</p> </li> </ul>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.DisconnectClientReq","title":"DisconnectClientReq","text":"<p>Disconnect a client from the drone. This request will remove the client from the list of connected clients. It allows clients to disconnect instantly, without waiting for a watchdog to clear the client in control, or promote a new client to be in control.</p> <p>Attributes:</p> <ul> <li> <code>client_id</code>               (<code>int</code>)           \u2013            <p>The assigned ID of the client to disconnect.</p> </li> </ul>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.GetBatteryRep","title":"GetBatteryRep","text":"<p>Response with essential battery information.</p> <p>Attributes:</p> <ul> <li> <code>battery</code>               (<code>Battery</code>)           \u2013            <p>Essential battery information.</p> </li> </ul>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.GetBatteryReq","title":"GetBatteryReq","text":"<p>Request essential battery information. Can be used to instantly get battery information, instead of having to wait for the BatteryTel message to be received.</p>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.GetCameraParametersRep","title":"GetCameraParametersRep","text":"<p>Response with the currently set camera parameters.</p> <p>Attributes:</p> <ul> <li> <code>camera_parameters</code>               (<code>CameraParameters</code>)           \u2013            <p>The currently set camera parameters.</p> </li> </ul>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.GetCameraParametersReq","title":"GetCameraParametersReq","text":"<p>Request to get the currently set camera parameters.</p> <p>Attributes:</p> <ul> <li> <code>camera</code>               (<code>Camera</code>)           \u2013            <p>Which camera to read camera parameters from.</p> </li> </ul>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.GetMissionRep","title":"GetMissionRep","text":"<p>Get active mission response.</p> <p>Attributes:</p> <ul> <li> <code>mission</code>               (<code>Mission</code>)           \u2013            <p>active mission with waypoints</p> </li> </ul>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.GetMissionReq","title":"GetMissionReq","text":"<p>Service request to the reference_generator to get the active mission.</p>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.GetOverlayParametersRep","title":"GetOverlayParametersRep","text":"<p>Response with the currently set video overlay parameters.</p> <p>Attributes:</p> <ul> <li> <code>overlay_parameters</code>               (<code>OverlayParameters</code>)           \u2013            <p>The currently set overlay parameters.</p> </li> </ul>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.GetOverlayParametersReq","title":"GetOverlayParametersReq","text":"<p>Request to get currently set video overlay parameters.</p>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.GetPersistentStorageSettingsRep","title":"GetPersistentStorageSettingsRep","text":"<p>Response with the currently set persistent storage settings.</p> <p>Attributes:</p> <ul> <li> <code>persistent_storage_settings</code>               (<code>PersistentStorageSettings</code>)           \u2013            <p>The currently set persistent storage settings.</p> </li> </ul>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.GetPersistentStorageSettingsReq","title":"GetPersistentStorageSettingsReq","text":"<p>Request to get currently set persistent storage settings.</p>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.GetTelemetryRep","title":"GetTelemetryRep","text":"<p>Response with latest telemetry</p> <p>Attributes:</p> <ul> <li> <code>payload</code>               (<code>Any</code>)           \u2013            <p>The latest telemetry data, empty if no data available.</p> </li> </ul>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.GetTelemetryReq","title":"GetTelemetryReq","text":"<p>Request to get latest telemetry data</p> <p>Attributes:</p> <ul> <li> <code>message_type</code>               (<code>str</code>)           \u2013            <p>Message name, f. ex. \"AttitudeTel\".</p> </li> </ul>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.PingRep","title":"PingRep","text":"<p>Response message from a PingReq request.</p>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.PingReq","title":"PingReq","text":"<p>The simplest message to use to test request/reply communication with the drone. The drone replies with a PingRep message immediately after receiving the PingReq.</p>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.SetCameraParametersRep","title":"SetCameraParametersRep","text":"<p>Response after setting the camera parameters.</p>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.SetCameraParametersReq","title":"SetCameraParametersReq","text":"<p>Request to set camera parameters.</p> <p>Attributes:</p> <ul> <li> <code>camera_parameters</code>               (<code>CameraParameters</code>)           \u2013            <p>The camera parameters to apply.</p> </li> </ul>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.SetInstructionUpdateRep","title":"SetInstructionUpdateRep","text":"<p>Response after updating an instruction in the current mission.</p>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.SetInstructionUpdateReq","title":"SetInstructionUpdateReq","text":"<p>Updates an instruction in current mission with a new instruction payload.</p> <p>Attributes:</p> <ul> <li> <code>instruction</code>               (<code>Instruction</code>)           \u2013            <p>instruction that will replace the desired instruction</p> </li> </ul>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.SetMissionRep","title":"SetMissionRep","text":"<p>Response after setting a new mission.</p>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.SetMissionReq","title":"SetMissionReq","text":"<p>Issue a desired mission to the reference_generator.</p> <p>Attributes:</p> <ul> <li> <code>mission</code>               (<code>Mission</code>)           \u2013            <p>requested mission issued to the reference generator</p> </li> </ul>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.SetOverlayParametersRep","title":"SetOverlayParametersRep","text":"<p>Response after setting video overlay parameters.</p>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.SetOverlayParametersReq","title":"SetOverlayParametersReq","text":"<p>Request to set video overlay parameters.</p> <p>Attributes:</p> <ul> <li> <code>overlay_parameters</code>               (<code>OverlayParameters</code>)           \u2013            <p>The video overlay parameters to apply.</p> </li> </ul>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.SetPersistentStorageSettingsRep","title":"SetPersistentStorageSettingsRep","text":"<p>Response after setting persistent storage settings.</p>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.SetPersistentStorageSettingsReq","title":"SetPersistentStorageSettingsReq","text":"<p>Request to set persistent storage settings.</p> <p>Attributes:</p> <ul> <li> <code>persistent_storage_settings</code>               (<code>PersistentStorageSettings</code>)           \u2013            <p>The persistent storage settings to apply.</p> </li> </ul>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.SetPubFrequencyRep","title":"SetPubFrequencyRep","text":"<p>Response after updating publish frequency</p> <p>Attributes:</p> <ul> <li> <code>success</code>               (<code>bool</code>)           \u2013            <p>True if message name valid and frequency successfully updated.</p> </li> </ul>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.SetPubFrequencyReq","title":"SetPubFrequencyReq","text":"<p>Request to update the publish frequency</p> <p>Attributes:</p> <ul> <li> <code>message_type</code>               (<code>str</code>)           \u2013            <p>Message name, f. ex. \"AttitudeTel\".</p> </li> <li> <code>frequency</code>               (<code>float</code>)           \u2013            <p>Publish frequency (max 100 Hz).</p> </li> </ul>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.SetThicknessGaugeParametersRep","title":"SetThicknessGaugeParametersRep","text":"<p>Response after setting thickness gauge parameters.</p>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.SetThicknessGaugeParametersReq","title":"SetThicknessGaugeParametersReq","text":"<p>Request to set parameters for ultrasonic thickness gauge. The sound velocity is used to calculate the thickness of the material being measured.</p> <p>Attributes:</p> <ul> <li> <code>sound_velocity</code>               (<code>int</code>)           \u2013            <p>Sound velocity in m/s</p> </li> </ul>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.SyncTimeRep","title":"SyncTimeRep","text":"<p>Response after setting the system time on the drone.</p> <p>Attributes:</p> <ul> <li> <code>success</code>               (<code>bool</code>)           \u2013            <p>If the time was set successfully.</p> </li> </ul>"},{"location":"reference/blueye/protocol/req_rep/#blueye.protocol.types.req_rep.SyncTimeReq","title":"SyncTimeReq","text":"<p>Request to set the system time on the drone.</p> <p>Attributes:</p> <ul> <li> <code>time</code>               (<code>SystemTime</code>)           \u2013            <p>The time to set on the drone.</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/","title":"Telemetry","text":""},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry","title":"telemetry","text":"<p>Classes:</p> <ul> <li> <code>AltitudeTel</code>           \u2013            <p>Receive the current altitude of the drone.</p> </li> <li> <code>AquaTrollProbeMetadataTel</code>           \u2013            <p>Metadata from the In-Situ Aqua Troll probe's common registers</p> </li> <li> <code>AquaTrollSensorMetadataTel</code>           \u2013            <p>Metadata from a single sensor from In-Situ Aqua Troll probe</p> </li> <li> <code>AquaTrollSensorParametersTel</code>           \u2013            <p>Single sensor from In-Situ Aqua Troll probe</p> </li> <li> <code>AttitudeTel</code>           \u2013            <p>Receive the current attitude of the drone.</p> </li> <li> <code>BatteryBQ40Z50Tel</code>           \u2013            <p>Receive detailed information about a battery using the</p> </li> <li> <code>BatteryTel</code>           \u2013            <p>Receive essential information about the battery status.</p> </li> <li> <code>CPUInfoTel</code>           \u2013            <p>Attributes:</p> </li> <li> <code>CPUTemperatureTel</code>           \u2013            <p>Drone CPU temperature</p> </li> <li> <code>CalibratedImuTel</code>           \u2013            <p>Calibrated IMU data</p> </li> <li> <code>CalibrationStateTel</code>           \u2013            <p>Calibration state used for calibration routine.</p> </li> <li> <code>CanisterBottomHumidityTel</code>           \u2013            <p>Receive humidity information from the bottom canister.</p> </li> <li> <code>CanisterBottomTemperatureTel</code>           \u2013            <p>Receive temperature information from the bottom canister.</p> </li> <li> <code>CanisterTopHumidityTel</code>           \u2013            <p>Receive humidity information from the top canister.</p> </li> <li> <code>CanisterTopTemperatureTel</code>           \u2013            <p>Receive temperature information from the top canister.</p> </li> <li> <code>ConnectedClientsTel</code>           \u2013            <p>List of connected clients telemetry message.</p> </li> <li> <code>ControlForceTel</code>           \u2013            <p>Control force in all directions.</p> </li> <li> <code>ControlModeTel</code>           \u2013            <p>Receive the current state of the control system.</p> </li> <li> <code>ControllerHealthTel</code>           \u2013            <p>Controller health indicating the load of the controller, used</p> </li> <li> <code>CpProbeTel</code>           \u2013            <p>Cathodic Protection Potential probe telemetry message</p> </li> <li> <code>DataStorageSpaceTel</code>           \u2013            <p>Data storage info.</p> </li> <li> <code>DepthTel</code>           \u2013            <p>Measurement of the drones position relative to the sea</p> </li> <li> <code>DiveTimeTel</code>           \u2013            <p>Receive the dive time of the drone.</p> </li> <li> <code>DroneInfoTel</code>           \u2013            <p>Receive metadata and information about the connected drone.</p> </li> <li> <code>DroneTimeTel</code>           \u2013            <p>Receive time information from the drone.</p> </li> <li> <code>ErrorFlagsTel</code>           \u2013            <p>Receive currently set error flags.</p> </li> <li> <code>ForwardDistanceTel</code>           \u2013            <p>Distance to an object in front of the drone when a 1D pinger</p> </li> <li> <code>GenericServoTel</code>           \u2013            <p>State of a generic servo</p> </li> <li> <code>GuestPortCurrentTel</code>           \u2013            <p>GuestPort current readings</p> </li> <li> <code>GuestPortLightsTel</code>           \u2013            <p>Receive the status of any guest port lights connected to the</p> </li> <li> <code>Imu1Tel</code>           \u2013            <p>Raw IMU data from IMU 1</p> </li> <li> <code>Imu2Tel</code>           \u2013            <p>Raw IMU data from IMU 2</p> </li> <li> <code>IperfTel</code>           \u2013            <p>Iperf indicates the available bandwidth on the tether from</p> </li> <li> <code>LaserTel</code>           \u2013            <p>Receive the status of any lasers connected to the drone.</p> </li> <li> <code>LightsTel</code>           \u2013            <p>Receive the status of the main lights of the drone.</p> </li> <li> <code>MedusaSpectrometerDataTel</code>           \u2013            <p>Medusa gamma ray sensor spectrometer data</p> </li> <li> <code>MissionStatusTel</code>           \u2013            <p>Mission status from the mission supervisor.</p> </li> <li> <code>MultibeamConfigTel</code>           \u2013            <p>Multibeam sonar config</p> </li> <li> <code>MultibeamDiscoveryTel</code>           \u2013            <p>Multibeam sonar status message</p> </li> <li> <code>MultibeamPingTel</code>           \u2013            <p>Multibeam sonar ping data</p> </li> <li> <code>MultibeamServoTel</code>           \u2013            <p>State of the servo installed in the multibeam</p> </li> <li> <code>NStreamersTel</code>           \u2013            <p>Number of connected clients streaming video.</p> </li> <li> <code>NotificationTel</code>           \u2013            <p>Notification from the control system.</p> </li> <li> <code>PilotGPSPositionTel</code>           \u2013            <p>Pilot position (originating from device GPS) for logging.</p> </li> <li> <code>PositionEstimateTel</code>           \u2013            <p>Position estimate of the drone if a DVL or a positioning</p> </li> <li> <code>RecordStateTel</code>           \u2013            <p>Record state from the drone.</p> </li> <li> <code>ReferenceAutoPilotTel</code>           \u2013            <p>Reference for the auto pilot when a mission is active.</p> </li> <li> <code>ReferenceTel</code>           \u2013            <p>Reference signals indicating desired states.</p> </li> <li> <code>ThicknessGaugeTel</code>           \u2013            <p>Thickness gauge measurement telemetry message.</p> </li> <li> <code>TiltAngleTel</code>           \u2013            <p>Tilt angle state on main camera.</p> </li> <li> <code>TiltStabilizationTel</code>           \u2013            <p>Tilt stabilization state.</p> </li> <li> <code>TimeLapseStateTel</code>           \u2013            <p>Time-lapse state from the drone.</p> </li> <li> <code>VideoStorageSpaceTel</code>           \u2013            <p>Video storage info.</p> </li> <li> <code>WaterTemperatureTel</code>           \u2013            <p>Water temperature from the depth sensor.</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.AltitudeTel","title":"AltitudeTel","text":"<p>Receive the current altitude of the drone.</p> <p>Attributes:</p> <ul> <li> <code>altitude</code>               (<code>Altitude</code>)           \u2013            <p>The altitude of the drone.</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.AquaTrollProbeMetadataTel","title":"AquaTrollProbeMetadataTel","text":"<p>Metadata from the In-Situ Aqua Troll probe's common registers</p> <p>Attributes:</p> <ul> <li> <code>probe</code>               (<code>AquaTrollProbeMetadata</code>)           \u2013            <p>AquaTroll message containing sensor array.</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.AquaTrollSensorMetadataTel","title":"AquaTrollSensorMetadataTel","text":"<p>Metadata from a single sensor from In-Situ Aqua Troll probe</p> <p>Attributes:</p> <ul> <li> <code>sensors</code>               (<code>AquaTrollSensorMetadataArray</code>)           \u2013            <p>AquaTroll message containing sensor array.</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.AquaTrollSensorParametersTel","title":"AquaTrollSensorParametersTel","text":"<p>Single sensor from In-Situ Aqua Troll probe</p> <p>Attributes:</p> <ul> <li> <code>sensors</code>               (<code>AquaTrollSensorParametersArray</code>)           \u2013            <p>AquaTroll message containing parameter array.</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.AttitudeTel","title":"AttitudeTel","text":"<p>Receive the current attitude of the drone.</p> <p>Attributes:</p> <ul> <li> <code>attitude</code>               (<code>Attitude</code>)           \u2013            <p>The attitude of the drone.</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.BatteryBQ40Z50Tel","title":"BatteryBQ40Z50Tel","text":"<p>Receive detailed information about a battery using the BQ40Z50 battery management system.</p> <p>Attributes:</p> <ul> <li> <code>battery</code>               (<code>BatteryBQ40Z50</code>)           \u2013            <p>Detailed battery information.</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.BatteryTel","title":"BatteryTel","text":"<p>Receive essential information about the battery status.</p> <p>Attributes:</p> <ul> <li> <code>battery</code>               (<code>Battery</code>)           \u2013            <p>Essential battery information.</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.CPUInfoTel","title":"CPUInfoTel","text":"<p>Attributes:</p> <ul> <li> <code>cpu_info</code>               (<code>CPUInfo</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.CPUTemperatureTel","title":"CPUTemperatureTel","text":"<p>Drone CPU temperature</p> <p>Attributes:</p> <ul> <li> <code>temperature</code>               (<code>CPUTemperature</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.CalibratedImuTel","title":"CalibratedImuTel","text":"<p>Calibrated IMU data</p> <p>Attributes:</p> <ul> <li> <code>imu</code>               (<code>Imu</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.CalibrationStateTel","title":"CalibrationStateTel","text":"<p>Calibration state used for calibration routine.</p> <p>Attributes:</p> <ul> <li> <code>calibration_state</code>               (<code>CalibrationState</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.CanisterBottomHumidityTel","title":"CanisterBottomHumidityTel","text":"<p>Receive humidity information from the bottom canister.</p> <p>Attributes:</p> <ul> <li> <code>humidity</code>               (<code>CanisterHumidity</code>)           \u2013            <p>Humidity information</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.CanisterBottomTemperatureTel","title":"CanisterBottomTemperatureTel","text":"<p>Receive temperature information from the bottom canister.</p> <p>Attributes:</p> <ul> <li> <code>temperature</code>               (<code>CanisterTemperature</code>)           \u2013            <p>Temperature information.</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.CanisterTopHumidityTel","title":"CanisterTopHumidityTel","text":"<p>Receive humidity information from the top canister.</p> <p>Attributes:</p> <ul> <li> <code>humidity</code>               (<code>CanisterHumidity</code>)           \u2013            <p>Humidity information</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.CanisterTopTemperatureTel","title":"CanisterTopTemperatureTel","text":"<p>Receive temperature information from the top canister.</p> <p>Attributes:</p> <ul> <li> <code>temperature</code>               (<code>CanisterTemperature</code>)           \u2013            <p>Temperature information.</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.ConnectedClientsTel","title":"ConnectedClientsTel","text":"<p>List of connected clients telemetry message.</p> <p>Attributes:</p> <ul> <li> <code>client_id_in_control</code>               (<code>int</code>)           \u2013            <p>The client id of the client in control.</p> </li> <li> <code>connected_clients</code>               (<code>Sequence[ConnectedClient]</code>)           \u2013            <p>List of connected clients.</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.ControlForceTel","title":"ControlForceTel","text":"<p>Control force in all directions.</p> <p>Attributes:</p> <ul> <li> <code>control_force</code>               (<code>ControlForce</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.ControlModeTel","title":"ControlModeTel","text":"<p>Receive the current state of the control system.</p> <p>Attributes:</p> <ul> <li> <code>state</code>               (<code>ControlMode</code>)           \u2013            <p>State of the control system.</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.ControllerHealthTel","title":"ControllerHealthTel","text":"<p>Controller health indicating the load of the controller, used to set a color in the heading and depth bar.</p> <p>Attributes:</p> <ul> <li> <code>controller_health</code>               (<code>ControllerHealth</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.CpProbeTel","title":"CpProbeTel","text":"<p>Cathodic Protection Potential probe telemetry message</p> <p>Attributes:</p> <ul> <li> <code>cp_probe</code>               (<code>CpProbe</code>)           \u2013            <p>Reading from cp probe.</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.DataStorageSpaceTel","title":"DataStorageSpaceTel","text":"<p>Data storage info.</p> <p>Attributes:</p> <ul> <li> <code>storage_space</code>               (<code>StorageSpace</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.DepthTel","title":"DepthTel","text":"<p>Measurement of the drones position relative to the sea surface.</p> <p>Attributes:</p> <ul> <li> <code>depth</code>               (<code>Depth</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.DiveTimeTel","title":"DiveTimeTel","text":"<p>Receive the dive time of the drone.</p> <p>Attributes:</p> <ul> <li> <code>dive_time</code>               (<code>DiveTime</code>)           \u2013            <p>The current dive time of the drone.</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.DroneInfoTel","title":"DroneInfoTel","text":"<p>Receive metadata and information about the connected drone.</p> <p>Attributes:</p> <ul> <li> <code>drone_info</code>               (<code>DroneInfo</code>)           \u2013            <p>Various metadata such as software versions and serial number.</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.DroneTimeTel","title":"DroneTimeTel","text":"<p>Receive time information from the drone.</p> <p>Attributes:</p> <ul> <li> <code>real_time_clock</code>               (<code>SystemTime</code>)           \u2013            <p>The real-time clock of the drone.</p> </li> <li> <code>monotonic_clock</code>               (<code>SystemTime</code>)           \u2013            <p>The monotonic clock of the drone (time since power on).</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.ErrorFlagsTel","title":"ErrorFlagsTel","text":"<p>Receive currently set error flags.</p> <p>Attributes:</p> <ul> <li> <code>error_flags</code>               (<code>ErrorFlags</code>)           \u2013            <p>Currently set error flags on the drone.</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.ForwardDistanceTel","title":"ForwardDistanceTel","text":"<p>Distance to an object in front of the drone when a 1D pinger is mounted forwards.</p> <p>Attributes:</p> <ul> <li> <code>forward_distance</code>               (<code>ForwardDistance</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.GenericServoTel","title":"GenericServoTel","text":"<p>State of a generic servo</p> <p>Attributes:</p> <ul> <li> <code>servo</code>               (<code>GenericServo</code>)           \u2013            <p>Servo state</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.GuestPortCurrentTel","title":"GuestPortCurrentTel","text":"<p>GuestPort current readings</p> <p>Attributes:</p> <ul> <li> <code>current</code>               (<code>GuestPortCurrent</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.GuestPortLightsTel","title":"GuestPortLightsTel","text":"<p>Receive the status of any guest port lights connected to the drone.</p> <p>Attributes:</p> <ul> <li> <code>lights</code>               (<code>Lights</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.Imu1Tel","title":"Imu1Tel","text":"<p>Raw IMU data from IMU 1</p> <p>Attributes:</p> <ul> <li> <code>imu</code>               (<code>Imu</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.Imu2Tel","title":"Imu2Tel","text":"<p>Raw IMU data from IMU 2</p> <p>Attributes:</p> <ul> <li> <code>imu</code>               (<code>Imu</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.IperfTel","title":"IperfTel","text":"<p>Iperf indicates the available bandwidth on the tether from drone to surface unit.</p> <p>Attributes:</p> <ul> <li> <code>status</code>               (<code>IperfStatus</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.LaserTel","title":"LaserTel","text":"<p>Receive the status of any lasers connected to the drone.</p> <p>Attributes:</p> <ul> <li> <code>laser</code>               (<code>Laser</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.LightsTel","title":"LightsTel","text":"<p>Receive the status of the main lights of the drone.</p> <p>Attributes:</p> <ul> <li> <code>lights</code>               (<code>Lights</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.MedusaSpectrometerDataTel","title":"MedusaSpectrometerDataTel","text":"<p>Medusa gamma ray sensor spectrometer data</p> <p>Attributes:</p> <ul> <li> <code>data</code>               (<code>MedusaSpectrometerData</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.MissionStatusTel","title":"MissionStatusTel","text":"<p>Mission status from the mission supervisor.</p> <p>Attributes:</p> <ul> <li> <code>mission_status</code>               (<code>MissionStatus</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.MultibeamConfigTel","title":"MultibeamConfigTel","text":"<p>Multibeam sonar config</p> <p>Attributes:</p> <ul> <li> <code>config</code>               (<code>MultibeamConfig</code>)           \u2013            <p>Config data from a multibeam sonar</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.MultibeamDiscoveryTel","title":"MultibeamDiscoveryTel","text":"<p>Multibeam sonar status message</p> <p>Attributes:</p> <ul> <li> <code>discovery</code>               (<code>MultibeamDiscovery</code>)           \u2013            <p>Discovery data from a multibeam sonar</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.MultibeamPingTel","title":"MultibeamPingTel","text":"<p>Multibeam sonar ping data</p> <p>Attributes:</p> <ul> <li> <code>ping</code>               (<code>MultibeamPing</code>)           \u2013            <p>Ping data from a multibeam sonar</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.MultibeamServoTel","title":"MultibeamServoTel","text":"<p>State of the servo installed in the multibeam</p> <p>Attributes:</p> <ul> <li> <code>servo</code>               (<code>MultibeamServo</code>)           \u2013            <p>Multibeam servo state</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.NStreamersTel","title":"NStreamersTel","text":"<p>Number of connected clients streaming video.</p> <p>Attributes:</p> <ul> <li> <code>n_streamers</code>               (<code>NStreamers</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.NotificationTel","title":"NotificationTel","text":"<p>Notification from the control system.</p> <p>Attributes:</p> <ul> <li> <code>notification</code>               (<code>Notification</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.PilotGPSPositionTel","title":"PilotGPSPositionTel","text":"<p>Pilot position (originating from device GPS) for logging.</p> <p>Attributes:</p> <ul> <li> <code>position</code>               (<code>LatLongPosition</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.PositionEstimateTel","title":"PositionEstimateTel","text":"<p>Position estimate of the drone if a DVL or a positioning system is available.</p> <p>Attributes:</p> <ul> <li> <code>position_estimate</code>               (<code>PositionEstimate</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.RecordStateTel","title":"RecordStateTel","text":"<p>Record state from the drone.</p> <p>Attributes:</p> <ul> <li> <code>record_state</code>               (<code>RecordState</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.ReferenceAutoPilotTel","title":"ReferenceAutoPilotTel","text":"<p>Reference for the auto pilot when a mission is active.</p> <p>Attributes:</p> <ul> <li> <code>reference_auto_pilot</code>               (<code>ReferenceAutoPilot</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.ReferenceTel","title":"ReferenceTel","text":"<p>Reference signals indicating desired states.</p> <p>Attributes:</p> <ul> <li> <code>reference</code>               (<code>Reference</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.ThicknessGaugeTel","title":"ThicknessGaugeTel","text":"<p>Thickness gauge measurement telemetry message.</p> <p>Attributes:</p> <ul> <li> <code>thickness_gauge</code>               (<code>ThicknessGauge</code>)           \u2013            <p>Thickness measurement with a cygnus gauge.</p> </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.TiltAngleTel","title":"TiltAngleTel","text":"<p>Tilt angle state on main camera.</p> <p>Attributes:</p> <ul> <li> <code>angle</code>               (<code>TiltAngle</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.TiltStabilizationTel","title":"TiltStabilizationTel","text":"<p>Tilt stabilization state.</p> <p>Attributes:</p> <ul> <li> <code>state</code>               (<code>TiltStabilizationState</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.TimeLapseStateTel","title":"TimeLapseStateTel","text":"<p>Time-lapse state from the drone.</p> <p>Attributes:</p> <ul> <li> <code>time_lapse_state</code>               (<code>TimeLapseState</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.VideoStorageSpaceTel","title":"VideoStorageSpaceTel","text":"<p>Video storage info.</p> <p>Attributes:</p> <ul> <li> <code>storage_space</code>               (<code>StorageSpace</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/protocol/telemetry/#blueye.protocol.types.telemetry.WaterTemperatureTel","title":"WaterTemperatureTel","text":"<p>Water temperature from the depth sensor.</p> <p>Attributes:</p> <ul> <li> <code>temperature</code>               (<code>WaterTemperature</code>)           \u2013            </li> </ul>"},{"location":"reference/blueye/sdk/battery/","title":"blueye.sdk.battery","text":""},{"location":"reference/blueye/sdk/battery/#blueye.sdk.battery","title":"battery","text":""},{"location":"reference/blueye/sdk/battery/#blueye.sdk.battery.Battery","title":"Battery","text":"<pre><code>Battery(parent_drone: Drone)\n</code></pre> <p>Contains the battery related functions.</p> <p>Parameters:</p> <ul> <li> <code>parent_drone</code>               (<code>Drone</code>)           \u2013            <p>The parent drone instance.</p> </li> </ul> Source code in <code>blueye/sdk/battery.py</code> <pre><code>def __init__(self, parent_drone: Drone):\n    \"\"\"Initialize the Battery class.\n\n    Args:\n        parent_drone (Drone): The parent drone instance.\"\"\"\n    self._parent_drone = parent_drone\n</code></pre>"},{"location":"reference/blueye/sdk/battery/#blueye.sdk.battery.Battery.state_of_charge","title":"state_of_charge  <code>property</code>","text":"<pre><code>state_of_charge: Optional[float]\n</code></pre> <p>Get the battery state of charge.</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Current state of charge of the drone battery (0..1).</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/","title":"blueye.sdk.camera","text":""},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera","title":"camera","text":"<p>Classes:</p> <ul> <li> <code>Camera</code>           \u2013            <p>Handles the camera functionality for the Blueye drone.</p> </li> <li> <code>Overlay</code>           \u2013            <p>Control the overlay on videos and pictures.</p> </li> <li> <code>Tilt</code>           \u2013            <p>Handles the camera tilt functionality for the Blueye drone.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Camera","title":"Camera","text":"<pre><code>Camera(\n    parent_drone: Drone, is_guestport_camera: bool = False\n)\n</code></pre> <p>Handles the camera functionality for the Blueye drone.</p> <p>Parameters:</p> <ul> <li> <code>parent_drone</code>               (<code>Drone</code>)           \u2013            <p>The parent drone instance.</p> </li> <li> <code>is_guestport_camera</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether this is a guestport camera.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>take_picture</code>             \u2013              <p>Take a still picture and store it locally on the drone.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>bitrate</code>               (<code>int</code>)           \u2013            <p>Set or get the video stream bitrate.</p> </li> <li> <code>bitrate_still_picture</code>               (<code>int</code>)           \u2013            <p>Set or get the bitrate for the still picture stream.</p> </li> <li> <code>exposure</code>               (<code>int</code>)           \u2013            <p>Set or get the camera exposure.</p> </li> <li> <code>framerate</code>               (<code>int</code>)           \u2013            <p>Set or get the camera frame rate.</p> </li> <li> <code>hue</code>               (<code>int</code>)           \u2013            <p>Set or get the camera hue.</p> </li> <li> <code>is_recording</code>               (<code>Optional[bool]</code>)           \u2013            <p>Get or set the camera recording state.</p> </li> <li> <code>record_time</code>               (<code>Optional[int]</code>)           \u2013            <p>Get the duration of the current camera recording.</p> </li> <li> <code>resolution</code>               (<code>int</code>)           \u2013            <p>Set or get the camera resolution.</p> </li> <li> <code>whitebalance</code>               (<code>int</code>)           \u2013            <p>Set or get the camera white balance.</p> </li> </ul> Source code in <code>blueye/sdk/camera.py</code> <pre><code>def __init__(self, parent_drone: Drone, is_guestport_camera: bool = False):\n    \"\"\"Initialize the Camera class.\n\n    Args:\n        parent_drone (Drone): The parent drone instance.\n        is_guestport_camera (bool, optional): Whether this is a guestport camera.\n    \"\"\"\n    self._parent_drone = parent_drone\n    self._is_guestport_camera = is_guestport_camera\n    self._camera_type = (\n        blueye.protocol.Camera.CAMERA_GUESTPORT\n        if is_guestport_camera\n        else blueye.protocol.Camera.CAMERA_MAIN\n    )\n    if not self._is_guestport_camera:\n        self.tilt = Tilt(parent_drone)\n        self.overlay = Overlay(parent_drone)\n    self._camera_parameters = None\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Camera.bitrate","title":"bitrate  <code>property</code> <code>writable</code>","text":"<pre><code>bitrate: int\n</code></pre> <p>Set or get the video stream bitrate.</p> <p>Parameters:</p> <ul> <li> <code>bitrate</code>               (<code>int</code>)           \u2013            <p>Set the video stream bitrate in bits, valid values are in range            (1 000 000 .. 16 000 000).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The H264 video stream bitrate.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Camera.bitrate_still_picture","title":"bitrate_still_picture  <code>property</code> <code>writable</code>","text":"<pre><code>bitrate_still_picture: int\n</code></pre> <p>Set or get the bitrate for the still picture stream.</p> <p>Parameters:</p> <ul> <li> <code>bitrate</code>               (<code>int</code>)           \u2013            <p>Set the still picture stream bitrate in bits, valid values are in range            (1 000 000 .. 300 000 000). Default value is 100 000 000.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The still picture stream bitrate.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Camera.exposure","title":"exposure  <code>property</code> <code>writable</code>","text":"<pre><code>exposure: int\n</code></pre> <p>Set or get the camera exposure.</p> <p>Parameters:</p> <ul> <li> <code>exposure</code>               (<code>int</code>)           \u2013            <p>Set the camera exposure time. Unit is thousandths of a second,             ie. 5 = 5s/1000. Valid values are in the range (1 .. 5000) or -1             for auto exposure.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The camera exposure.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Camera.framerate","title":"framerate  <code>property</code> <code>writable</code>","text":"<pre><code>framerate: int\n</code></pre> <p>Set or get the camera frame rate.</p> <p>Parameters:</p> <ul> <li> <code>framerate</code>               (<code>int</code>)           \u2013            <p>Set the camera frame rate in frames per second.              Valid values are 25 or 30.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The camera frame rate.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Camera.hue","title":"hue  <code>property</code> <code>writable</code>","text":"<pre><code>hue: int\n</code></pre> <p>Set or get the camera hue.</p> <p>Parameters:</p> <ul> <li> <code>hue</code>               (<code>int</code>)           \u2013            <p>Set the camera hue. Valid values are in the range (-40..40).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The camera hue.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Camera.is_recording","title":"is_recording  <code>property</code> <code>writable</code>","text":"<pre><code>is_recording: Optional[bool]\n</code></pre> <p>Get or set the camera recording state.</p> <p>Parameters:</p> <ul> <li> <code>start_recording</code>               (<code>bool</code>)           \u2013            <p>Set to True to start a recording, set to False to stop the                     current recording.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Optional[bool]</code>           \u2013            <p>True if the camera is currently recording, False if not. Returns None if the SDK hasn't received a RecordState telemetry message.</p> </li> </ul> <p>Warns:</p> <ul> <li> <code>RuntimeWarning</code>             \u2013            <p>If no recording state telemetry data is received.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Camera.record_time","title":"record_time  <code>property</code>","text":"<pre><code>record_time: Optional[int]\n</code></pre> <p>Get the duration of the current camera recording.</p> <p>Returns:</p> <ul> <li> <code>Optional[int]</code>           \u2013            <p>The length in seconds of the current recording, -1 if the camera is not currently recording. Returns None if the SDK hasn't received a RecordState telemetry message.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Camera.resolution","title":"resolution  <code>property</code> <code>writable</code>","text":"<pre><code>resolution: int\n</code></pre> <p>Set or get the camera resolution.</p> <p>Parameters:</p> <ul> <li> <code>resolution</code>               (<code>int</code>)           \u2013            <p>Set the camera in vertical pixels. Valid values are 720 or 1080.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The camera resolution.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Camera.whitebalance","title":"whitebalance  <code>property</code> <code>writable</code>","text":"<pre><code>whitebalance: int\n</code></pre> <p>Set or get the camera white balance.</p> <p>Parameters:</p> <ul> <li> <code>white_balance</code>               (<code>int</code>)           \u2013            <p>Set the camera white balance. Valid values are in the range                  (2800..9300) or -1 for auto white balance.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The camera white balance.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Camera.take_picture","title":"take_picture","text":"<pre><code>take_picture()\n</code></pre> <p>Take a still picture and store it locally on the drone.</p> <p>These pictures can be downloaded with the Blueye App, or by any WebDAV compatible client.</p> Source code in <code>blueye/sdk/camera.py</code> <pre><code>def take_picture(self):\n    \"\"\"Take a still picture and store it locally on the drone.\n\n    These pictures can be downloaded with the Blueye App, or by any WebDAV compatible client.\n    \"\"\"\n    self._parent_drone._ctrl_client.take_still_picture()\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay","title":"Overlay","text":"<pre><code>Overlay(parent_drone: Drone)\n</code></pre> <p>Control the overlay on videos and pictures.</p> <p>Parameters:</p> <ul> <li> <code>parent_drone</code>               (<code>Drone</code>)           \u2013            <p>The parent drone instance.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>delete_logo</code>             \u2013              <p>Delete the user uploaded logo from the drone.</p> </li> <li> <code>download_logo</code>             \u2013              <p>Download the original user uploaded logo (PNG or JPG).</p> </li> <li> <code>upload_logo</code>             \u2013              <p>Upload user selectable logo for watermarking videos and pictures.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>altitude_enabled</code>               (<code>bool</code>)           \u2013            <p>Get or set the state of the altitude overlay.</p> </li> <li> <code>cp_probe_enabled</code>               (<code>bool</code>)           \u2013            <p>Get or set the state of the CP probe overlay.</p> </li> <li> <code>date_enabled</code>               (<code>bool</code>)           \u2013            <p>Get or set the state of the date overlay.</p> </li> <li> <code>date_format</code>               (<code>str</code>)           \u2013            <p>Get or set the format string for the time displayed in the overlay.</p> </li> <li> <code>depth_enabled</code>               (<code>bool</code>)           \u2013            <p>Get or set the state of the depth overlay.</p> </li> <li> <code>depth_unit</code>               (<code>DepthUnit</code>)           \u2013            <p>Get or set the depth unit for the overlay.</p> </li> <li> <code>distance_enabled</code>               (<code>bool</code>)           \u2013            <p>Get or set the state of the distance overlay.</p> </li> <li> <code>drone_location_enabled</code>               (<code>bool</code>)           \u2013            <p>Get or set the state of the drone location overlay.</p> </li> <li> <code>font_size</code>               (<code>FontSize</code>)           \u2013            <p>Get or set the font size for the overlay.</p> </li> <li> <code>gamma_ray_measurement_enabled</code>               (<code>bool</code>)           \u2013            <p>Get or set the state of the gamma-ray measurement overlay.</p> </li> <li> <code>heading_enabled</code>               (<code>bool</code>)           \u2013            <p>Get or set the state of the heading overlay.</p> </li> <li> <code>logo</code>               (<code>LogoType</code>)           \u2013            <p>Get or set logo overlay selection.</p> </li> <li> <code>margin_height</code>               (<code>int</code>)           \u2013            <p>Get or set the margin height for the overlay.</p> </li> <li> <code>margin_width</code>               (<code>int</code>)           \u2013            <p>Get or set the margin width for the overlay.</p> </li> <li> <code>shading</code>               (<code>float</code>)           \u2013            <p>Get or set the pixel intensity to subtract from text background.</p> </li> <li> <code>subtitle</code>               (<code>str</code>)           \u2013            <p>Get or set the subtitle for the overlay.</p> </li> <li> <code>temperature_enabled</code>               (<code>bool</code>)           \u2013            <p>Get or set the state of the temperature overlay.</p> </li> <li> <code>temperature_unit</code>               (<code>TemperatureUnit</code>)           \u2013            <p>Get or set the temperature unit for the overlay.</p> </li> <li> <code>thickness_enabled</code>               (<code>bool</code>)           \u2013            <p>Get or set the state of the thickness overlay.</p> </li> <li> <code>thickness_unit</code>               (<code>ThicknessUnit</code>)           \u2013            <p>Get or set the thickness unit for the overlay.</p> </li> <li> <code>tilt_enabled</code>               (<code>bool</code>)           \u2013            <p>Get or set the state of the tilt overlay.</p> </li> <li> <code>timezone_offset</code>               (<code>int</code>)           \u2013            <p>Get or set the timezone offset for the overlay.</p> </li> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>Get or set the title for the overlay.</p> </li> </ul> Source code in <code>blueye/sdk/camera.py</code> <pre><code>def __init__(self, parent_drone: Drone):\n    \"\"\"Initialize the Overlay class.\n\n    Args:\n        parent_drone (Drone): The parent drone instance.\n    \"\"\"\n    self._parent_drone = parent_drone\n    self._overlay_parametres = None\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.altitude_enabled","title":"altitude_enabled  <code>property</code> <code>writable</code>","text":"<pre><code>altitude_enabled: bool\n</code></pre> <p>Get or set the state of the altitude overlay.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>The current state of the altitude overlay.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>enable_altitude</code>               (<code>bool</code>)           \u2013            <p>True to enable the altitude overlay, False to disable it.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.cp_probe_enabled","title":"cp_probe_enabled  <code>property</code> <code>writable</code>","text":"<pre><code>cp_probe_enabled: bool\n</code></pre> <p>Get or set the state of the CP probe overlay.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>The current state of the CP probe overlay.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>enable_cp_probe</code>               (<code>bool</code>)           \u2013            <p>True to enable the CP probe overlay, False to disable it.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.date_enabled","title":"date_enabled  <code>property</code> <code>writable</code>","text":"<pre><code>date_enabled: bool\n</code></pre> <p>Get or set the state of the date overlay.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>The current state of the date overlay.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>enable_date</code>               (<code>bool</code>)           \u2013            <p>True to enable the date overlay, False to disable it.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.date_format","title":"date_format  <code>property</code> <code>writable</code>","text":"<pre><code>date_format: str\n</code></pre> <p>Get or set the format string for the time displayed in the overlay.</p> <p>Must be a string containing only ASCII characters, with a max length of 63 characters.</p> <p>The format codes are defined by the C89 standard, see https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes for an overview of the available codes.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The current date format.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>input_format_str</code>               (<code>str</code>)           \u2013            <p>The date format string to set.</p> </li> </ul> <p>Warns:</p> <ul> <li> <code>RuntimeWarning</code>             \u2013            <p>If the date format is too long or contains non-ASCII characters.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.depth_enabled","title":"depth_enabled  <code>property</code> <code>writable</code>","text":"<pre><code>depth_enabled: bool\n</code></pre> <p>Get or set the state of the depth overlay.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>The current state of the depth overlay.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>enable_depth</code>               (<code>bool</code>)           \u2013            <p>True to enable the depth overlay, False to disable it.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.depth_unit","title":"depth_unit  <code>property</code> <code>writable</code>","text":"<pre><code>depth_unit: DepthUnit\n</code></pre> <p>Get or set the depth unit for the overlay.</p> <p>Returns:</p> <ul> <li> <code>DepthUnit</code>           \u2013            <p>The current depth unit.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>unit</code>               (<code>DepthUnit</code>)           \u2013            <p>The depth unit to set.</p> </li> </ul> <p>Warns:</p> <ul> <li> <code>RuntimeWarning</code>             \u2013            <p>If the unit is not an instance of blueye.protocol.DepthUnit.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.distance_enabled","title":"distance_enabled  <code>property</code> <code>writable</code>","text":"<pre><code>distance_enabled: bool\n</code></pre> <p>Get or set the state of the distance overlay.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>The current state of the distance overlay.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>enable_distance</code>               (<code>bool</code>)           \u2013            <p>True to enable the distance overlay, False to disable it.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.drone_location_enabled","title":"drone_location_enabled  <code>property</code> <code>writable</code>","text":"<pre><code>drone_location_enabled: bool\n</code></pre> <p>Get or set the state of the drone location overlay.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>The current state of the drone location overlay.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>enable_drone_location</code>               (<code>bool</code>)           \u2013            <p>True to enable the drone location overlay,                           False to disable it.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.font_size","title":"font_size  <code>property</code> <code>writable</code>","text":"<pre><code>font_size: FontSize\n</code></pre> <p>Get or set the font size for the overlay.</p> <p>Needs to be an instance of the <code>blueye.protocol.FontSize</code> enum.</p> <p>Returns:</p> <ul> <li> <code>FontSize</code>           \u2013            <p>The current font size.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>FontSize</code>)           \u2013            <p>The font size to set.</p> </li> </ul> <p>Warns:</p> <ul> <li> <code>RuntimeWarning</code>             \u2013            <p>If the font size is not an instance of blueye.protocol.FontSize.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.gamma_ray_measurement_enabled","title":"gamma_ray_measurement_enabled  <code>property</code> <code>writable</code>","text":"<pre><code>gamma_ray_measurement_enabled: bool\n</code></pre> <p>Get or set the state of the gamma-ray measurement overlay.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>The current state of the gamma-ray measurement overlay.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>enable_gamma_ray_measurement</code>               (<code>bool</code>)           \u2013            <p>True to enable the gamma-ray measurement overlay,                                  False to disable it.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.heading_enabled","title":"heading_enabled  <code>property</code> <code>writable</code>","text":"<pre><code>heading_enabled: bool\n</code></pre> <p>Get or set the state of the heading overlay.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>The current state of the heading overlay.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>enable_heading</code>               (<code>bool</code>)           \u2013            <p>True to enable the heading overlay, False to disable it.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.logo","title":"logo  <code>property</code> <code>writable</code>","text":"<pre><code>logo: LogoType\n</code></pre> <p>Get or set logo overlay selection.</p> <p>Returns:</p> <ul> <li> <code>LogoType</code>           \u2013            <p>The current logo type.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>logo_type</code>               (<code>LogoType</code>)           \u2013            <p>The logo type.</p> </li> </ul> <p>Warns:</p> <ul> <li> <code>RuntimeWarning</code>             \u2013            <p>If the logo type is not an instance of blueye.protocol.LogoType.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.margin_height","title":"margin_height  <code>property</code> <code>writable</code>","text":"<pre><code>margin_height: int\n</code></pre> <p>Get or set the margin height for the overlay.</p> <p>The amount of pixels to use as margin on the top and bottom side of the overlay.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The current margin height.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>height</code>               (<code>int</code>)           \u2013            <p>The margin height to set. Needs to be a positive integer.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.margin_width","title":"margin_width  <code>property</code> <code>writable</code>","text":"<pre><code>margin_width: int\n</code></pre> <p>Get or set the margin width for the overlay.</p> <p>The amount of pixels to use as margin on the right and left side of the overlay.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The current margin width.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>width</code>               (<code>int</code>)           \u2013            <p>The margin width to set. Needs to be a positive integer.</p> </li> </ul> <p>Warns:</p> <ul> <li> <code>RuntimeWarning</code>             \u2013            <p>If the margin width is not a positive integer.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.shading","title":"shading  <code>property</code> <code>writable</code>","text":"<pre><code>shading: float\n</code></pre> <p>Get or set the pixel intensity to subtract from text background.</p> <p>Returns:</p> <ul> <li> <code>float</code>           \u2013            <p>The current shading intensity.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>intensity</code>               (<code>float</code>)           \u2013            <p>The shading intensity to set. Valid range is 0.0 to 1.0.                0 is transparent, 1 is black.</p> </li> </ul> <p>Warns:</p> <ul> <li> <code>RuntimeWarning</code>             \u2013            <p>If the shading intensity is not a float between 0.0 and 1.0.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.subtitle","title":"subtitle  <code>property</code> <code>writable</code>","text":"<pre><code>subtitle: str\n</code></pre> <p>Get or set the subtitle for the overlay.</p> <p>The subtitle needs to be a string of only ASCII characters with a maximum length of 63 characters.</p> <p>Set to an empty string to disable the subtitle.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The current subtitle.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>input_subtitle</code>               (<code>str</code>)           \u2013            <p>The subtitle to set. Set to an empty string to disable.                   Truncated to 63 characters if longer.</p> </li> </ul> <p>Warns:</p> <ul> <li> <code>RuntimeWarning</code>             \u2013            <p>If the subtitle is too long or contains non-ASCII characters.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.temperature_enabled","title":"temperature_enabled  <code>property</code> <code>writable</code>","text":"<pre><code>temperature_enabled: bool\n</code></pre> <p>Get or set the state of the temperature overlay.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>The current state of the temperature overlay.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>enable_temperature</code>               (<code>bool</code>)           \u2013            <p>True to enable the temperature overlay, False to disable it.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.temperature_unit","title":"temperature_unit  <code>property</code> <code>writable</code>","text":"<pre><code>temperature_unit: TemperatureUnit\n</code></pre> <p>Get or set the temperature unit for the overlay.</p> <p>Returns:</p> <ul> <li> <code>TemperatureUnit</code>           \u2013            <p>The current temperature unit.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>unit</code>               (<code>TemperatureUnit</code>)           \u2013            <p>The temperature unit to set.</p> </li> </ul> <p>Warns:</p> <ul> <li> <code>RuntimeWarning</code>             \u2013            <p>If the unit is not an instance of blueye.protocol.TemperatureUnit.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.thickness_enabled","title":"thickness_enabled  <code>property</code> <code>writable</code>","text":"<pre><code>thickness_enabled: bool\n</code></pre> <p>Get or set the state of the thickness overlay.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>The current state of the thickness overlay.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>enable_thickness</code>               (<code>bool</code>)           \u2013            <p>True to enable the thickness overlay, False to disable it.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.thickness_unit","title":"thickness_unit  <code>property</code> <code>writable</code>","text":"<pre><code>thickness_unit: ThicknessUnit\n</code></pre> <p>Get or set the thickness unit for the overlay.</p> <p>Returns:</p> <ul> <li> <code>ThicknessUnit</code>           \u2013            <p>The current thickness unit.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>unit</code>               (<code>ThicknessUnit</code>)           \u2013            <p>The thickness unit to set.</p> </li> </ul> <p>Warns:</p> <ul> <li> <code>RuntimeWarning</code>             \u2013            <p>If the unit is not an instance of blueye.protocol.ThicknessUnit.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.tilt_enabled","title":"tilt_enabled  <code>property</code> <code>writable</code>","text":"<pre><code>tilt_enabled: bool\n</code></pre> <p>Get or set the state of the tilt overlay.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>The current state of the tilt overlay.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>enable_tilt</code>               (<code>bool</code>)           \u2013            <p>True to enable the tilt overlay, False to disable it.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.timezone_offset","title":"timezone_offset  <code>property</code> <code>writable</code>","text":"<pre><code>timezone_offset: int\n</code></pre> <p>Get or set the timezone offset for the overlay.</p> <p>Set to the number of minutes (either positive or negative) the timestamp should be offset.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The current timezone offset.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>offset</code>               (<code>int</code>)           \u2013            <p>The timezone offset to set.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.title","title":"title  <code>property</code> <code>writable</code>","text":"<pre><code>title: str\n</code></pre> <p>Get or set the title for the overlay.</p> <p>The title needs to be a string of only ASCII characters with a maximum length of 63 characters.</p> <p>Set to an empty string to disable title.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The current title.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>input_title</code>               (<code>str</code>)           \u2013            <p>The title to set. Truncated to 63 characters if longer.</p> </li> </ul> <p>Warns:</p> <ul> <li> <code>RuntimeWarning</code>             \u2013            <p>If the title is too long or contains non-ASCII characters.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.delete_logo","title":"delete_logo","text":"<pre><code>delete_logo(timeout: float = 1.0)\n</code></pre> <p>Delete the user uploaded logo from the drone.</p> <p>Parameters:</p> <ul> <li> <code>timeout</code>               (<code>float</code>, default:                   <code>1.0</code> )           \u2013            <p>The timeout for the delete request.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>HTTPError</code>             \u2013            <p>If an error occurs during deletion.</p> </li> <li> <code>ConnectTimeout</code>             \u2013            <p>If unable to create a connection within the                                 specified timeout.</p> </li> </ul> Source code in <code>blueye/sdk/camera.py</code> <pre><code>def delete_logo(self, timeout: float = 1.0):\n    \"\"\"Delete the user uploaded logo from the drone.\n\n    Args:\n        timeout (float): The timeout for the delete request.\n\n    Raises:\n        requests.exceptions.HTTPError: If an error occurs during deletion.\n        requests.exceptions.ConnectTimeout: If unable to create a connection within the\n                                            specified timeout.\n    \"\"\"\n    response = requests.delete(f\"http://{self._parent_drone._ip}/asset/logo\", timeout=timeout)\n    response.raise_for_status()\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.download_logo","title":"download_logo","text":"<pre><code>download_logo(output_directory='.', timeout: float = 1.0)\n</code></pre> <p>Download the original user uploaded logo (PNG or JPG).</p> <p>Select the download directory with the output_directory parameter.</p> <p>Parameters:</p> <ul> <li> <code>output_directory</code>               (<code>str</code>, default:                   <code>'.'</code> )           \u2013            <p>The directory to save the downloaded logo.</p> </li> <li> <code>timeout</code>               (<code>float</code>, default:                   <code>1.0</code> )           \u2013            <p>The timeout for the download request.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>HTTPError</code>             \u2013            <p>If no custom logo is uploaded.</p> </li> <li> <code>ConnectTimeout</code>             \u2013            <p>If unable to create a connection within the                                 specified timeout.</p> </li> </ul> Source code in <code>blueye/sdk/camera.py</code> <pre><code>def download_logo(self, output_directory=\".\", timeout: float = 1.0):\n    \"\"\"Download the original user uploaded logo (PNG or JPG).\n\n    Select the download directory with the output_directory parameter.\n\n    Args:\n        output_directory (str): The directory to save the downloaded logo.\n        timeout (float): The timeout for the download request.\n\n    Raises:\n        requests.exceptions.HTTPError: If no custom logo is uploaded.\n        requests.exceptions.ConnectTimeout: If unable to create a connection within the\n                                            specified timeout.\n    \"\"\"\n    response = requests.get(f\"http://{self._parent_drone._ip}/asset/logo\", timeout=timeout)\n    response.raise_for_status()\n    filename = re.findall('filename=\"(.+)\"', response.headers[\"Content-Disposition\"])[0]\n    with open(f\"{output_directory}/{filename}\", \"wb\") as f:\n        f.write(response.content)\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Overlay.upload_logo","title":"upload_logo","text":"<pre><code>upload_logo(path_to_logo: str, timeout: float = 1.0)\n</code></pre> <p>Upload user selectable logo for watermarking videos and pictures.</p> <p>Set the logo-property to <code>blueye.protocol.LogoType.LOG_TYPE_CUSTOM</code> to enable this logo.</p> <p>Allowed filetype: JPG or PNG. Max resolution: 2000 px. Max file size: 5 MB.</p> <p>Parameters:</p> <ul> <li> <code>path_to_logo</code>               (<code>str</code>)           \u2013            <p>The path to the logo file.</p> </li> <li> <code>timeout</code>               (<code>float</code>, default:                   <code>1.0</code> )           \u2013            <p>The timeout for the upload request.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>HTTPError</code>             \u2013            <p>If the file is invalid (status code 400).</p> </li> <li> <code>ConnectTimeout</code>             \u2013            <p>If unable to create a connection within the                                 specified timeout.</p> </li> </ul> Source code in <code>blueye/sdk/camera.py</code> <pre><code>def upload_logo(self, path_to_logo: str, timeout: float = 1.0):\n    \"\"\"Upload user selectable logo for watermarking videos and pictures.\n\n    Set the logo-property to `blueye.protocol.LogoType.LOG_TYPE_CUSTOM` to enable this logo.\n\n    Allowed filetype: JPG or PNG.\n    Max resolution: 2000 px.\n    Max file size: 5 MB.\n\n    Args:\n        path_to_logo (str): The path to the logo file.\n        timeout (float, optional): The timeout for the upload request.\n\n    Raises:\n        requests.exceptions.HTTPError: If the file is invalid (status code 400).\n        requests.exceptions.ConnectTimeout: If unable to create a connection within the\n                                            specified timeout.\n    \"\"\"\n    with open(path_to_logo, \"rb\") as f:\n        url = f\"http://{self._parent_drone._ip}/asset/logo\"\n        files = {\"image\": f}\n        response = requests.post(url, files=files, timeout=timeout)\n    response.raise_for_status()\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Tilt","title":"Tilt","text":"<pre><code>Tilt(parent_drone: Drone)\n</code></pre> <p>Handles the camera tilt functionality for the Blueye drone.</p> <p>Parameters:</p> <ul> <li> <code>parent_drone</code>               (<code>Drone</code>)           \u2013            <p>The parent drone instance.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>set_velocity</code>             \u2013              <p>Set the speed and direction of the camera tilt.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>angle</code>               (<code>Optional[float]</code>)           \u2013            <p>Return the current angle of the camera tilt.</p> </li> <li> <code>stabilization_enabled</code>               (<code>Optional[bool]</code>)           \u2013            <p>Get the state of active camera stabilization.</p> </li> </ul> Source code in <code>blueye/sdk/camera.py</code> <pre><code>def __init__(self, parent_drone: Drone):\n    \"\"\"Initialize the Tilt class.\n\n    Args:\n        parent_drone (Drone): The parent drone instance.\n    \"\"\"\n    self._parent_drone = parent_drone\n</code></pre>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Tilt.angle","title":"angle  <code>property</code>","text":"<pre><code>angle: Optional[float]\n</code></pre> <p>Return the current angle of the camera tilt.</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>The current angle of the camera tilt.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>If the connected drone does not have the tilt option.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Tilt.stabilization_enabled","title":"stabilization_enabled  <code>property</code> <code>writable</code>","text":"<pre><code>stabilization_enabled: Optional[bool]\n</code></pre> <p>Get the state of active camera stabilization.</p> <p>Returns:</p> <ul> <li> <code>Optional[bool]</code>           \u2013            <p>The current state of active camera stabilization.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>If the connected drone does not have the tilt option.</p> </li> </ul>"},{"location":"reference/blueye/sdk/camera/#blueye.sdk.camera.Tilt.set_velocity","title":"set_velocity","text":"<pre><code>set_velocity(velocity: float)\n</code></pre> <p>Set the speed and direction of the camera tilt.</p> <p>Parameters:</p> <ul> <li> <code>velocity</code>               (<code>float</code>)           \u2013            <p>Speed and direction of the tilt. 1 is max speed up, -1 is max speed down.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>If the connected drone does not have the tilt option.</p> </li> </ul> Source code in <code>blueye/sdk/camera.py</code> <pre><code>def set_velocity(self, velocity: float):\n    \"\"\"Set the speed and direction of the camera tilt.\n\n    Args:\n        velocity: Speed and direction of the tilt. 1 is max speed up, -1 is max speed down.\n\n    Raises:\n        RuntimeError: If the connected drone does not have the tilt option.\n    \"\"\"\n    self._verify_tilt_in_features()\n    self._parent_drone._ctrl_client.set_tilt_velocity(velocity)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/","title":"blueye.sdk.connection","text":""},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection","title":"connection","text":"<p>Modules:</p> <ul> <li> <code>blueye</code>           \u2013            </li> <li> <code>threading</code>           \u2013            <p>Thread module emulating a subset of Java's threading model.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>Callback</code>           \u2013            <p>Specifications for callback for telemetry messages.</p> </li> <li> <code>CtrlClient</code>           \u2013            <p>A thread that handles control messages to the drone.</p> </li> <li> <code>ReqRepClient</code>           \u2013            <p>A thread that handles request-reply messages to and from the drone.</p> </li> <li> <code>TelemetryClient</code>           \u2013            <p>A thread that handles telemetry messages from the drone</p> </li> <li> <code>WatchdogPublisher</code>           \u2013            <p>A thread that publishes watchdog messages to keep the connection alive.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>logger</code>           \u2013            </li> </ul>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.Callback","title":"Callback","text":"<p>               Bases: <code>NamedTuple</code></p> <p>Specifications for callback for telemetry messages.</p> <p>Attributes:</p> <ul> <li> <code>message_filter</code>               (<code>List[Message]</code>)           \u2013            <p>The list of message types to filter.</p> </li> <li> <code>function</code>               (<code>Callable[[str, Message], None]</code>)           \u2013            <p>The callback function.</p> </li> <li> <code>pass_raw_data</code>               (<code>bool</code>)           \u2013            <p>Whether to pass raw data to the callback.</p> </li> <li> <code>uuid_hex</code>               (<code>str</code>)           \u2013            <p>The UUID of the callback in hexadecimal format.</p> </li> <li> <code>kwargs</code>               (<code>Dict[str, Any]</code>)           \u2013            <p>Additional keyword arguments for the callback.</p> </li> </ul>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient","title":"CtrlClient","text":"<pre><code>CtrlClient(\n    parent_drone: \"blueye.sdk.Drone\",\n    context: Context = None,\n)\n</code></pre> <p>               Bases: <code>Thread</code></p> <p>A thread that handles control messages to the drone.</p> <p>Parameters:</p> <ul> <li> <code>parent_drone</code>               (<code>Drone</code>)           \u2013            <p>The parent drone instance.</p> </li> <li> <code>context</code>               (<code>Context</code>, default:                   <code>None</code> )           \u2013            <p>The ZeroMQ context.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>getName</code>             \u2013              <p>Return a string used for identification purposes only.</p> </li> <li> <code>isDaemon</code>             \u2013              <p>Return whether this thread is a daemon.</p> </li> <li> <code>is_alive</code>             \u2013              <p>Return whether the thread is alive.</p> </li> <li> <code>join</code>             \u2013              <p>Wait until the thread terminates.</p> </li> <li> <code>run</code>             \u2013              <p>Run the control client thread.</p> </li> <li> <code>setDaemon</code>             \u2013              <p>Set whether this thread is a daemon.</p> </li> <li> <code>setName</code>             \u2013              <p>Set the name string for this thread.</p> </li> <li> <code>set_auto_altitude_state</code>             \u2013              <p>Enable or disable auto altitude control.</p> </li> <li> <code>set_auto_depth_state</code>             \u2013              <p>Enable or disable auto depth control.</p> </li> <li> <code>set_auto_heading_state</code>             \u2013              <p>Enable or disable auto heading control.</p> </li> <li> <code>set_gripper_velocities</code>             \u2013              <p>Set the gripper velocities.</p> </li> <li> <code>set_guest_port_lights</code>             \u2013              <p>Set the intensity of the guest port lights.</p> </li> <li> <code>set_laser_intensity</code>             \u2013              <p>Set the laser intensity.</p> </li> <li> <code>set_lights</code>             \u2013              <p>Set the intensity of the lights.</p> </li> <li> <code>set_motion_input</code>             \u2013              <p>Set the motion input values.</p> </li> <li> <code>set_recording_state</code>             \u2013              <p>Enable or disable recording.</p> </li> <li> <code>set_station_keeping_state</code>             \u2013              <p>Enable or disable station keeping.</p> </li> <li> <code>set_tilt_stabilization</code>             \u2013              <p>Enable or disable tilt stabilization.</p> </li> <li> <code>set_tilt_velocity</code>             \u2013              <p>Set the tilt velocity.</p> </li> <li> <code>set_water_density</code>             \u2013              <p>Set the water density.</p> </li> <li> <code>set_weather_vaning_state</code>             \u2013              <p>Enable or disable weather vaning.</p> </li> <li> <code>start</code>             \u2013              <p>Start the thread's activity.</p> </li> <li> <code>stop</code>             \u2013              <p>Stop the control client thread.</p> </li> <li> <code>take_still_picture</code>             \u2013              <p>Take a still picture.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>daemon</code>           \u2013            <p>A boolean value indicating whether this thread is a daemon thread.</p> </li> <li> <code>ident</code>           \u2013            <p>Thread identifier of this thread or None if it has not been started.</p> </li> <li> <code>name</code>           \u2013            <p>A string used for identification purposes only.</p> </li> <li> <code>native_id</code>           \u2013            <p>Native integral thread ID of this thread, or None if it has not been started.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def __init__(\n    self,\n    parent_drone: \"blueye.sdk.Drone\",\n    context: zmq.Context = None,\n):\n    \"\"\"Initialize the CtrlClient.\n\n    Args:\n        parent_drone (blueye.sdk.Drone): The parent drone instance.\n        context (zmq.Context, optional): The ZeroMQ context.\n    \"\"\"\n    super().__init__(daemon=True)\n    self._context = context or zmq.Context().instance()\n    self._parent_drone = parent_drone\n    self._drone_pub_socket = self._context.socket(zmq.PUB)\n    self._drone_pub_socket.connect(f\"tcp://{self._parent_drone._ip}:5557\")\n    self._messages_to_send = queue.Queue()\n    self._exit_flag = threading.Event()\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.daemon","title":"daemon  <code>property</code> <code>writable</code>","text":"<pre><code>daemon\n</code></pre> <p>A boolean value indicating whether this thread is a daemon thread.</p> <p>This must be set before start() is called, otherwise RuntimeError is raised. Its initial value is inherited from the creating thread; the main thread is not a daemon thread and therefore all threads created in the main thread default to daemon = False.</p> <p>The entire Python program exits when only daemon threads are left.</p>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.ident","title":"ident  <code>property</code>","text":"<pre><code>ident\n</code></pre> <p>Thread identifier of this thread or None if it has not been started.</p> <p>This is a nonzero integer. See the get_ident() function. Thread identifiers may be recycled when a thread exits and another thread is created. The identifier is available even after the thread has exited.</p>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.name","title":"name  <code>property</code> <code>writable</code>","text":"<pre><code>name\n</code></pre> <p>A string used for identification purposes only.</p> <p>It has no semantics. Multiple threads may be given the same name. The initial name is set by the constructor.</p>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.native_id","title":"native_id  <code>property</code>","text":"<pre><code>native_id\n</code></pre> <p>Native integral thread ID of this thread, or None if it has not been started.</p> <p>This is a non-negative integer. See the get_native_id() function. This represents the Thread ID as reported by the kernel.</p>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.getName","title":"getName","text":"<pre><code>getName()\n</code></pre> <p>Return a string used for identification purposes only.</p> <p>This method is deprecated, use the name attribute instead.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def getName(self):\n    \"\"\"Return a string used for identification purposes only.\n\n    This method is deprecated, use the name attribute instead.\n\n    \"\"\"\n    import warnings\n    warnings.warn('getName() is deprecated, get the name attribute instead',\n                  DeprecationWarning, stacklevel=2)\n    return self.name\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.isDaemon","title":"isDaemon","text":"<pre><code>isDaemon()\n</code></pre> <p>Return whether this thread is a daemon.</p> <p>This method is deprecated, use the daemon attribute instead.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def isDaemon(self):\n    \"\"\"Return whether this thread is a daemon.\n\n    This method is deprecated, use the daemon attribute instead.\n\n    \"\"\"\n    import warnings\n    warnings.warn('isDaemon() is deprecated, get the daemon attribute instead',\n                  DeprecationWarning, stacklevel=2)\n    return self.daemon\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.is_alive","title":"is_alive","text":"<pre><code>is_alive()\n</code></pre> <p>Return whether the thread is alive.</p> <p>This method returns True just before the run() method starts until just after the run() method terminates. See also the module function enumerate().</p> Source code in <code>python3.10/threading.py</code> <pre><code>def is_alive(self):\n    \"\"\"Return whether the thread is alive.\n\n    This method returns True just before the run() method starts until just\n    after the run() method terminates. See also the module function\n    enumerate().\n\n    \"\"\"\n    assert self._initialized, \"Thread.__init__() not called\"\n    if self._is_stopped or not self._started.is_set():\n        return False\n    self._wait_for_tstate_lock(False)\n    return not self._is_stopped\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.join","title":"join","text":"<pre><code>join(timeout=None)\n</code></pre> <p>Wait until the thread terminates.</p> <p>This blocks the calling thread until the thread whose join() method is called terminates -- either normally or through an unhandled exception or until the optional timeout occurs.</p> <p>When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). As join() always returns None, you must call is_alive() after join() to decide whether a timeout happened -- if the thread is still alive, the join() call timed out.</p> <p>When the timeout argument is not present or None, the operation will block until the thread terminates.</p> <p>A thread can be join()ed many times.</p> <p>join() raises a RuntimeError if an attempt is made to join the current thread as that would cause a deadlock. It is also an error to join() a thread before it has been started and attempts to do so raises the same exception.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def join(self, timeout=None):\n    \"\"\"Wait until the thread terminates.\n\n    This blocks the calling thread until the thread whose join() method is\n    called terminates -- either normally or through an unhandled exception\n    or until the optional timeout occurs.\n\n    When the timeout argument is present and not None, it should be a\n    floating point number specifying a timeout for the operation in seconds\n    (or fractions thereof). As join() always returns None, you must call\n    is_alive() after join() to decide whether a timeout happened -- if the\n    thread is still alive, the join() call timed out.\n\n    When the timeout argument is not present or None, the operation will\n    block until the thread terminates.\n\n    A thread can be join()ed many times.\n\n    join() raises a RuntimeError if an attempt is made to join the current\n    thread as that would cause a deadlock. It is also an error to join() a\n    thread before it has been started and attempts to do so raises the same\n    exception.\n\n    \"\"\"\n    if not self._initialized:\n        raise RuntimeError(\"Thread.__init__() not called\")\n    if not self._started.is_set():\n        raise RuntimeError(\"cannot join thread before it is started\")\n    if self is current_thread():\n        raise RuntimeError(\"cannot join current thread\")\n\n    if timeout is None:\n        self._wait_for_tstate_lock()\n    else:\n        # the behavior of a negative timeout isn't documented, but\n        # historically .join(timeout=x) for x&lt;0 has acted as if timeout=0\n        self._wait_for_tstate_lock(timeout=max(timeout, 0))\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.run","title":"run","text":"<pre><code>run()\n</code></pre> <p>Run the control client thread.</p> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def run(self):\n    \"\"\"Run the control client thread.\"\"\"\n    while not self._exit_flag.is_set():\n        try:\n            msg = self._messages_to_send.get(timeout=0.1)\n            self._drone_pub_socket.send_multipart(\n                [\n                    bytes(msg._pb.DESCRIPTOR.full_name, \"utf-8\"),\n                    msg.__class__.serialize(msg),\n                ]\n            )\n        except queue.Empty:\n            # No messages to send, so we can\n            continue\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.setDaemon","title":"setDaemon","text":"<pre><code>setDaemon(daemonic)\n</code></pre> <p>Set whether this thread is a daemon.</p> <p>This method is deprecated, use the .daemon property instead.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def setDaemon(self, daemonic):\n    \"\"\"Set whether this thread is a daemon.\n\n    This method is deprecated, use the .daemon property instead.\n\n    \"\"\"\n    import warnings\n    warnings.warn('setDaemon() is deprecated, set the daemon attribute instead',\n                  DeprecationWarning, stacklevel=2)\n    self.daemon = daemonic\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.setName","title":"setName","text":"<pre><code>setName(name)\n</code></pre> <p>Set the name string for this thread.</p> <p>This method is deprecated, use the name attribute instead.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def setName(self, name):\n    \"\"\"Set the name string for this thread.\n\n    This method is deprecated, use the name attribute instead.\n\n    \"\"\"\n    import warnings\n    warnings.warn('setName() is deprecated, set the name attribute instead',\n                  DeprecationWarning, stacklevel=2)\n    self.name = name\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.set_auto_altitude_state","title":"set_auto_altitude_state","text":"<pre><code>set_auto_altitude_state(enabled: bool)\n</code></pre> <p>Enable or disable auto altitude control.</p> <p>Parameters:</p> <ul> <li> <code>enabled</code>               (<code>bool</code>)           \u2013            <p>Whether to enable auto altitude control.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def set_auto_altitude_state(self, enabled: bool):\n    \"\"\"Enable or disable auto altitude control.\n\n    Args:\n        enabled (bool): Whether to enable auto altitude control.\n    \"\"\"\n    msg = blueye.protocol.AutoAltitudeCtrl(state={\"enabled\": enabled})\n    self._messages_to_send.put(msg)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.set_auto_depth_state","title":"set_auto_depth_state","text":"<pre><code>set_auto_depth_state(enabled: bool)\n</code></pre> <p>Enable or disable auto depth control.</p> <p>Parameters:</p> <ul> <li> <code>enabled</code>               (<code>bool</code>)           \u2013            <p>Whether to enable auto depth control.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def set_auto_depth_state(self, enabled: bool):\n    \"\"\"Enable or disable auto depth control.\n\n    Args:\n        enabled (bool): Whether to enable auto depth control.\n    \"\"\"\n    msg = blueye.protocol.AutoDepthCtrl(state={\"enabled\": enabled})\n    self._messages_to_send.put(msg)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.set_auto_heading_state","title":"set_auto_heading_state","text":"<pre><code>set_auto_heading_state(enabled: bool)\n</code></pre> <p>Enable or disable auto heading control.</p> <p>Parameters:</p> <ul> <li> <code>enabled</code>               (<code>bool</code>)           \u2013            <p>Whether to enable auto heading control.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def set_auto_heading_state(self, enabled: bool):\n    \"\"\"Enable or disable auto heading control.\n\n    Args:\n        enabled (bool): Whether to enable auto heading control.\n    \"\"\"\n    msg = blueye.protocol.AutoHeadingCtrl(state={\"enabled\": enabled})\n    self._messages_to_send.put(msg)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.set_gripper_velocities","title":"set_gripper_velocities","text":"<pre><code>set_gripper_velocities(grip: float, rotation: float)\n</code></pre> <p>Set the gripper velocities.</p> <p>Parameters:</p> <ul> <li> <code>grip</code>               (<code>float</code>)           \u2013            <p>The grip velocity.</p> </li> <li> <code>rotation</code>               (<code>float</code>)           \u2013            <p>The rotation velocity.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def set_gripper_velocities(self, grip: float, rotation: float):\n    \"\"\"Set the gripper velocities.\n\n    Args:\n        grip (float): The grip velocity.\n        rotation (float): The rotation velocity.\n    \"\"\"\n    msg = blueye.protocol.GripperCtrl(\n        gripper_velocities={\"grip_velocity\": grip, \"rotate_velocity\": rotation}\n    )\n    self._messages_to_send.put(msg)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.set_guest_port_lights","title":"set_guest_port_lights","text":"<pre><code>set_guest_port_lights(value: float)\n</code></pre> <p>Set the intensity of the guest port lights.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>float</code>)           \u2013            <p>The intensity value.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def set_guest_port_lights(self, value: float):\n    \"\"\"Set the intensity of the guest port lights.\n\n    Args:\n        value (float): The intensity value.\n    \"\"\"\n    msg = blueye.protocol.GuestportLightsCtrl(lights={\"value\": value})\n    self._messages_to_send.put(msg)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.set_laser_intensity","title":"set_laser_intensity","text":"<pre><code>set_laser_intensity(intensity: float)\n</code></pre> <p>Set the laser intensity.</p> <p>Parameters:</p> <ul> <li> <code>intensity</code>               (<code>float</code>)           \u2013            <p>The laser intensity value.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def set_laser_intensity(self, intensity: float):\n    \"\"\"Set the laser intensity.\n\n    Args:\n        intensity (float): The laser intensity value.\n    \"\"\"\n    msg = blueye.protocol.LaserCtrl(laser={\"value\": intensity})\n    self._messages_to_send.put(msg)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.set_lights","title":"set_lights","text":"<pre><code>set_lights(value: float)\n</code></pre> <p>Set the intensity of the lights.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>float</code>)           \u2013            <p>The intensity value.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def set_lights(self, value: float):\n    \"\"\"Set the intensity of the lights.\n\n    Args:\n        value (float): The intensity value.\n    \"\"\"\n    msg = blueye.protocol.LightsCtrl(lights={\"value\": value})\n    self._messages_to_send.put(msg)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.set_motion_input","title":"set_motion_input","text":"<pre><code>set_motion_input(\n    surge: float,\n    sway: float,\n    heave: float,\n    yaw: float,\n    slow: float,\n    boost: float,\n)\n</code></pre> <p>Set the motion input values.</p> <p>Parameters:</p> <ul> <li> <code>surge</code>               (<code>float</code>)           \u2013            <p>The surge value.</p> </li> <li> <code>sway</code>               (<code>float</code>)           \u2013            <p>The sway value.</p> </li> <li> <code>heave</code>               (<code>float</code>)           \u2013            <p>The heave value.</p> </li> <li> <code>yaw</code>               (<code>float</code>)           \u2013            <p>The yaw value.</p> </li> <li> <code>slow</code>               (<code>float</code>)           \u2013            <p>The slow value.</p> </li> <li> <code>boost</code>               (<code>float</code>)           \u2013            <p>The boost value.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def set_motion_input(\n    self, surge: float, sway: float, heave: float, yaw: float, slow: float, boost: float\n):\n    \"\"\"Set the motion input values.\n\n    Args:\n        surge (float): The surge value.\n        sway (float): The sway value.\n        heave (float): The heave value.\n        yaw (float): The yaw value.\n        slow (float): The slow value.\n        boost (float): The boost value.\n    \"\"\"\n    msg = blueye.protocol.MotionInputCtrl(\n        motion_input={\n            \"surge\": surge,\n            \"sway\": sway,\n            \"heave\": heave,\n            \"yaw\": yaw,\n            \"slow\": slow,\n            \"boost\": boost,\n        }\n    )\n    self._messages_to_send.put(msg)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.set_recording_state","title":"set_recording_state","text":"<pre><code>set_recording_state(\n    main_enabled: bool, guestport_enabled: bool\n)\n</code></pre> <p>Enable or disable recording.</p> <p>Parameters:</p> <ul> <li> <code>main_enabled</code>               (<code>bool</code>)           \u2013            <p>Whether to enable main recording.</p> </li> <li> <code>guestport_enabled</code>               (<code>bool</code>)           \u2013            <p>Whether to enable guest port recording.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def set_recording_state(self, main_enabled: bool, guestport_enabled: bool):\n    \"\"\"Enable or disable recording.\n\n    Args:\n        main_enabled (bool): Whether to enable main recording.\n        guestport_enabled (bool): Whether to enable guest port recording.\n    \"\"\"\n    msg = blueye.protocol.RecordCtrl(\n        record_on={\"main\": main_enabled, \"guestport\": guestport_enabled}\n    )\n    self._messages_to_send.put(msg)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.set_station_keeping_state","title":"set_station_keeping_state","text":"<pre><code>set_station_keeping_state(enabled: bool)\n</code></pre> <p>Enable or disable station keeping.</p> <p>Parameters:</p> <ul> <li> <code>enabled</code>               (<code>bool</code>)           \u2013            <p>Whether to enable station keeping.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def set_station_keeping_state(self, enabled: bool):\n    \"\"\"Enable or disable station keeping.\n\n    Args:\n        enabled (bool): Whether to enable station keeping.\n    \"\"\"\n    msg = blueye.protocol.StationKeepingCtrl(state={\"enabled\": enabled})\n    self._messages_to_send.put(msg)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.set_tilt_stabilization","title":"set_tilt_stabilization","text":"<pre><code>set_tilt_stabilization(enabled: bool)\n</code></pre> <p>Enable or disable tilt stabilization.</p> <p>Parameters:</p> <ul> <li> <code>enabled</code>               (<code>bool</code>)           \u2013            <p>Whether to enable tilt stabilization.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def set_tilt_stabilization(self, enabled: bool):\n    \"\"\"Enable or disable tilt stabilization.\n\n    Args:\n        enabled (bool): Whether to enable tilt stabilization.\n    \"\"\"\n    msg = blueye.protocol.TiltStabilizationCtrl(state={\"enabled\": enabled})\n    self._messages_to_send.put(msg)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.set_tilt_velocity","title":"set_tilt_velocity","text":"<pre><code>set_tilt_velocity(value: float)\n</code></pre> <p>Set the tilt velocity.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>float</code>)           \u2013            <p>The tilt velocity value.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def set_tilt_velocity(self, value: float):\n    \"\"\"Set the tilt velocity.\n\n    Args:\n        value (float): The tilt velocity value.\n    \"\"\"\n    msg = blueye.protocol.TiltVelocityCtrl(velocity={\"value\": value})\n    self._messages_to_send.put(msg)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.set_water_density","title":"set_water_density","text":"<pre><code>set_water_density(value: float)\n</code></pre> <p>Set the water density.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>float</code>)           \u2013            <p>The water density value.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def set_water_density(self, value: float):\n    \"\"\"Set the water density.\n\n    Args:\n        value (float): The water density value.\n    \"\"\"\n    msg = blueye.protocol.WaterDensityCtrl(density={\"value\": value})\n    self._messages_to_send.put(msg)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.set_weather_vaning_state","title":"set_weather_vaning_state","text":"<pre><code>set_weather_vaning_state(enabled: bool)\n</code></pre> <p>Enable or disable weather vaning.</p> <p>Parameters:</p> <ul> <li> <code>enabled</code>               (<code>bool</code>)           \u2013            <p>Whether to enable weather vaning.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def set_weather_vaning_state(self, enabled: bool):\n    \"\"\"Enable or disable weather vaning.\n\n    Args:\n        enabled (bool): Whether to enable weather vaning.\n    \"\"\"\n    msg = blueye.protocol.WeatherVaningCtrl(state={\"enabled\": enabled})\n    self._messages_to_send.put(msg)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start the thread's activity.</p> <p>It must be called at most once per thread object. It arranges for the object's run() method to be invoked in a separate thread of control.</p> <p>This method will raise a RuntimeError if called more than once on the same thread object.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def start(self):\n    \"\"\"Start the thread's activity.\n\n    It must be called at most once per thread object. It arranges for the\n    object's run() method to be invoked in a separate thread of control.\n\n    This method will raise a RuntimeError if called more than once on the\n    same thread object.\n\n    \"\"\"\n    if not self._initialized:\n        raise RuntimeError(\"thread.__init__() not called\")\n\n    if self._started.is_set():\n        raise RuntimeError(\"threads can only be started once\")\n\n    with _active_limbo_lock:\n        _limbo[self] = self\n    try:\n        _start_new_thread(self._bootstrap, ())\n    except Exception:\n        with _active_limbo_lock:\n            del _limbo[self]\n        raise\n    self._started.wait()\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop the control client thread.</p> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def stop(self):\n    \"\"\"Stop the control client thread.\"\"\"\n    self._exit_flag.set()\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.CtrlClient.take_still_picture","title":"take_still_picture","text":"<pre><code>take_still_picture()\n</code></pre> <p>Take a still picture.</p> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def take_still_picture(self):\n    \"\"\"Take a still picture.\"\"\"\n    msg = blueye.protocol.TakePictureCtrl()\n    self._messages_to_send.put(msg)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient","title":"ReqRepClient","text":"<pre><code>ReqRepClient(\n    parent_drone: \"blueye.sdk.Drone\",\n    context: Context = None,\n)\n</code></pre> <p>               Bases: <code>Thread</code></p> <p>A thread that handles request-reply messages to and from the drone.</p> <p>Parameters:</p> <ul> <li> <code>parent_drone</code>               (<code>Drone</code>)           \u2013            <p>The parent drone instance.</p> </li> <li> <code>context</code>               (<code>Context</code>, default:                   <code>None</code> )           \u2013            <p>The ZeroMQ context.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>connect_client</code>             \u2013              <p>Connect a client to the drone.</p> </li> <li> <code>disconnect_client</code>             \u2013              <p>Disconnect a client from the drone.</p> </li> <li> <code>getName</code>             \u2013              <p>Return a string used for identification purposes only.</p> </li> <li> <code>get_camera_parameters</code>             \u2013              <p>Get the camera parameters.</p> </li> <li> <code>get_overlay_parameters</code>             \u2013              <p>Get the overlay parameters.</p> </li> <li> <code>get_telemetry_msg</code>             \u2013              <p>Get a telemetry message.</p> </li> <li> <code>isDaemon</code>             \u2013              <p>Return whether this thread is a daemon.</p> </li> <li> <code>is_alive</code>             \u2013              <p>Return whether the thread is alive.</p> </li> <li> <code>join</code>             \u2013              <p>Wait until the thread terminates.</p> </li> <li> <code>ping</code>             \u2013              <p>Send a ping request to the drone.</p> </li> <li> <code>run</code>             \u2013              <p>Run the request-reply client thread.</p> </li> <li> <code>setDaemon</code>             \u2013              <p>Set whether this thread is a daemon.</p> </li> <li> <code>setName</code>             \u2013              <p>Set the name string for this thread.</p> </li> <li> <code>set_camera_parameters</code>             \u2013              <p>Set the camera parameters.</p> </li> <li> <code>set_overlay_parameters</code>             \u2013              <p>Set the overlay parameters.</p> </li> <li> <code>set_telemetry_msg_publish_frequency</code>             \u2013              <p>Set the telemetry message publish frequency.</p> </li> <li> <code>start</code>             \u2013              <p>Start the thread's activity.</p> </li> <li> <code>stop</code>             \u2013              <p>Stop the request-reply client thread.</p> </li> <li> <code>sync_time</code>             \u2013              <p>Synchronize the time with the drone.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>daemon</code>           \u2013            <p>A boolean value indicating whether this thread is a daemon thread.</p> </li> <li> <code>ident</code>           \u2013            <p>Thread identifier of this thread or None if it has not been started.</p> </li> <li> <code>name</code>           \u2013            <p>A string used for identification purposes only.</p> </li> <li> <code>native_id</code>           \u2013            <p>Native integral thread ID of this thread, or None if it has not been started.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def __init__(self, parent_drone: \"blueye.sdk.Drone\", context: zmq.Context = None):\n    \"\"\"Initialize the ReqRepClient.\n\n    Args:\n        parent_drone (blueye.sdk.Drone): The parent drone instance.\n        context (zmq.Context, optional): The ZeroMQ context.\n    \"\"\"\n    super().__init__(daemon=True)\n    self._context = context or zmq.Context().instance()\n    self._parent_drone = parent_drone\n    self._socket = self._context.socket(zmq.REQ)\n    self._socket.connect(f\"tcp://{self._parent_drone._ip}:5556\")\n    self._requests_to_send = queue.Queue()\n    self._exit_flag = threading.Event()\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.daemon","title":"daemon  <code>property</code> <code>writable</code>","text":"<pre><code>daemon\n</code></pre> <p>A boolean value indicating whether this thread is a daemon thread.</p> <p>This must be set before start() is called, otherwise RuntimeError is raised. Its initial value is inherited from the creating thread; the main thread is not a daemon thread and therefore all threads created in the main thread default to daemon = False.</p> <p>The entire Python program exits when only daemon threads are left.</p>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.ident","title":"ident  <code>property</code>","text":"<pre><code>ident\n</code></pre> <p>Thread identifier of this thread or None if it has not been started.</p> <p>This is a nonzero integer. See the get_ident() function. Thread identifiers may be recycled when a thread exits and another thread is created. The identifier is available even after the thread has exited.</p>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.name","title":"name  <code>property</code> <code>writable</code>","text":"<pre><code>name\n</code></pre> <p>A string used for identification purposes only.</p> <p>It has no semantics. Multiple threads may be given the same name. The initial name is set by the constructor.</p>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.native_id","title":"native_id  <code>property</code>","text":"<pre><code>native_id\n</code></pre> <p>Native integral thread ID of this thread, or None if it has not been started.</p> <p>This is a non-negative integer. See the get_native_id() function. This represents the Thread ID as reported by the kernel.</p>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.connect_client","title":"connect_client","text":"<pre><code>connect_client(\n    client_info: ClientInfo = None,\n    is_observer: bool = False,\n    timeout: float = 0.05,\n) -&gt; ConnectClientRep\n</code></pre> <p>Connect a client to the drone.</p> <p>Parameters:</p> <ul> <li> <code>client_info</code>               (<code>ClientInfo</code>, default:                   <code>None</code> )           \u2013            <p>The client information.</p> </li> <li> <code>is_observer</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether the client is an observer.</p> </li> <li> <code>timeout</code>               (<code>float</code>, default:                   <code>0.05</code> )           \u2013            <p>The timeout for the response.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ConnectClientRep</code>           \u2013            <p>The connect client response.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def connect_client(\n    self,\n    client_info: blueye.protocol.ClientInfo = None,\n    is_observer: bool = False,\n    timeout: float = 0.05,\n) -&gt; blueye.protocol.ConnectClientRep:\n    \"\"\"Connect a client to the drone.\n\n    Args:\n        client_info (blueye.protocol.ClientInfo, optional): The client information.\n        is_observer (bool, optional): Whether the client is an observer.\n        timeout (float, optional): The timeout for the response.\n\n    Returns:\n        The connect client response.\n    \"\"\"\n    client = client_info or self._get_client_info()\n    client.is_observer = is_observer\n    request = blueye.protocol.ConnectClientReq(client_info=client)\n    return self._send_request_get_response(request, blueye.protocol.ConnectClientRep, timeout)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.disconnect_client","title":"disconnect_client","text":"<pre><code>disconnect_client(\n    client_id: int, timeout: float = 0.05\n) -&gt; DisconnectClientRep\n</code></pre> <p>Disconnect a client from the drone.</p> <p>Parameters:</p> <ul> <li> <code>client_id</code>               (<code>int</code>)           \u2013            <p>The client ID.</p> </li> <li> <code>timeout</code>               (<code>float</code>, default:                   <code>0.05</code> )           \u2013            <p>The timeout for the response.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DisconnectClientRep</code>           \u2013            <p>The disconnect client response.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def disconnect_client(\n    self, client_id: int, timeout: float = 0.05\n) -&gt; blueye.protocol.DisconnectClientRep:\n    \"\"\"Disconnect a client from the drone.\n\n    Args:\n        client_id (int): The client ID.\n        timeout (float, optional): The timeout for the response.\n\n    Returns:\n        The disconnect client response.\n    \"\"\"\n    request = blueye.protocol.DisconnectClientReq(client_id=client_id)\n    return self._send_request_get_response(\n        request, blueye.protocol.DisconnectClientRep, timeout\n    )\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.getName","title":"getName","text":"<pre><code>getName()\n</code></pre> <p>Return a string used for identification purposes only.</p> <p>This method is deprecated, use the name attribute instead.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def getName(self):\n    \"\"\"Return a string used for identification purposes only.\n\n    This method is deprecated, use the name attribute instead.\n\n    \"\"\"\n    import warnings\n    warnings.warn('getName() is deprecated, get the name attribute instead',\n                  DeprecationWarning, stacklevel=2)\n    return self.name\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.get_camera_parameters","title":"get_camera_parameters","text":"<pre><code>get_camera_parameters(\n    camera: Camera, timeout: float = 0.05\n) -&gt; CameraParameters\n</code></pre> <p>Get the camera parameters.</p> <p>Parameters:</p> <ul> <li> <code>camera</code>               (<code>Camera</code>)           \u2013            <p>The camera instance.</p> </li> <li> <code>timeout</code>               (<code>float</code>, default:                   <code>0.05</code> )           \u2013            <p>The timeout for the response.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>CameraParameters</code>           \u2013            <p>The camera parameters.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def get_camera_parameters(\n    self, camera: blueye.protocol.Camera, timeout: float = 0.05\n) -&gt; blueye.protocol.CameraParameters:\n    \"\"\"Get the camera parameters.\n\n    Args:\n        camera (blueye.protocol.Camera): The camera instance.\n        timeout (float, optional): The timeout for the response.\n\n    Returns:\n        The camera parameters.\n    \"\"\"\n    request = blueye.protocol.GetCameraParametersReq(camera=camera)\n    response = self._send_request_get_response(\n        request, blueye.protocol.GetCameraParametersRep, timeout\n    )\n    return response.camera_parameters\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.get_overlay_parameters","title":"get_overlay_parameters","text":"<pre><code>get_overlay_parameters(\n    timeout: float = 0.05,\n) -&gt; OverlayParameters\n</code></pre> <p>Get the overlay parameters.</p> <p>Parameters:</p> <ul> <li> <code>timeout</code>               (<code>float</code>, default:                   <code>0.05</code> )           \u2013            <p>The timeout for the response.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OverlayParameters</code>           \u2013            <p>blueye.protocol.OverlayParameters: The overlay parameters.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def get_overlay_parameters(self, timeout: float = 0.05) -&gt; blueye.protocol.OverlayParameters:\n    \"\"\"Get the overlay parameters.\n\n    Args:\n        timeout (float, optional): The timeout for the response.\n\n    Returns:\n        blueye.protocol.OverlayParameters: The overlay parameters.\n    \"\"\"\n    request = blueye.protocol.GetOverlayParametersReq()\n    response = self._send_request_get_response(\n        request, blueye.protocol.GetOverlayParametersRep, timeout\n    )\n    return response.overlay_parameters\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.get_telemetry_msg","title":"get_telemetry_msg","text":"<pre><code>get_telemetry_msg(\n    msg: MessageMeta | str, timeout: float = 0.05\n) -&gt; GetTelemetryRep\n</code></pre> <p>Get a telemetry message.</p> <p>Parameters:</p> <ul> <li> <code>msg</code>               (<code>MessageMeta | str</code>)           \u2013            <p>The message type.</p> </li> <li> <code>timeout</code>               (<code>float</code>, default:                   <code>0.05</code> )           \u2013            <p>The timeout for the response.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>GetTelemetryRep</code>           \u2013            <p>The telemetry message.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def get_telemetry_msg(\n    self, msg: proto.message.MessageMeta | str, timeout: float = 0.05\n) -&gt; blueye.protocol.GetTelemetryRep:\n    \"\"\"Get a telemetry message.\n\n    Args:\n        msg (proto.message.MessageMeta | str): The message type.\n        timeout (float, optional): The timeout for the response.\n\n    Returns:\n        The telemetry message.\n    \"\"\"\n    message_type = self._parse_type_to_string(msg)\n    request = blueye.protocol.GetTelemetryReq(message_type=message_type)\n    return self._send_request_get_response(request, blueye.protocol.GetTelemetryRep, timeout)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.isDaemon","title":"isDaemon","text":"<pre><code>isDaemon()\n</code></pre> <p>Return whether this thread is a daemon.</p> <p>This method is deprecated, use the daemon attribute instead.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def isDaemon(self):\n    \"\"\"Return whether this thread is a daemon.\n\n    This method is deprecated, use the daemon attribute instead.\n\n    \"\"\"\n    import warnings\n    warnings.warn('isDaemon() is deprecated, get the daemon attribute instead',\n                  DeprecationWarning, stacklevel=2)\n    return self.daemon\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.is_alive","title":"is_alive","text":"<pre><code>is_alive()\n</code></pre> <p>Return whether the thread is alive.</p> <p>This method returns True just before the run() method starts until just after the run() method terminates. See also the module function enumerate().</p> Source code in <code>python3.10/threading.py</code> <pre><code>def is_alive(self):\n    \"\"\"Return whether the thread is alive.\n\n    This method returns True just before the run() method starts until just\n    after the run() method terminates. See also the module function\n    enumerate().\n\n    \"\"\"\n    assert self._initialized, \"Thread.__init__() not called\"\n    if self._is_stopped or not self._started.is_set():\n        return False\n    self._wait_for_tstate_lock(False)\n    return not self._is_stopped\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.join","title":"join","text":"<pre><code>join(timeout=None)\n</code></pre> <p>Wait until the thread terminates.</p> <p>This blocks the calling thread until the thread whose join() method is called terminates -- either normally or through an unhandled exception or until the optional timeout occurs.</p> <p>When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). As join() always returns None, you must call is_alive() after join() to decide whether a timeout happened -- if the thread is still alive, the join() call timed out.</p> <p>When the timeout argument is not present or None, the operation will block until the thread terminates.</p> <p>A thread can be join()ed many times.</p> <p>join() raises a RuntimeError if an attempt is made to join the current thread as that would cause a deadlock. It is also an error to join() a thread before it has been started and attempts to do so raises the same exception.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def join(self, timeout=None):\n    \"\"\"Wait until the thread terminates.\n\n    This blocks the calling thread until the thread whose join() method is\n    called terminates -- either normally or through an unhandled exception\n    or until the optional timeout occurs.\n\n    When the timeout argument is present and not None, it should be a\n    floating point number specifying a timeout for the operation in seconds\n    (or fractions thereof). As join() always returns None, you must call\n    is_alive() after join() to decide whether a timeout happened -- if the\n    thread is still alive, the join() call timed out.\n\n    When the timeout argument is not present or None, the operation will\n    block until the thread terminates.\n\n    A thread can be join()ed many times.\n\n    join() raises a RuntimeError if an attempt is made to join the current\n    thread as that would cause a deadlock. It is also an error to join() a\n    thread before it has been started and attempts to do so raises the same\n    exception.\n\n    \"\"\"\n    if not self._initialized:\n        raise RuntimeError(\"Thread.__init__() not called\")\n    if not self._started.is_set():\n        raise RuntimeError(\"cannot join thread before it is started\")\n    if self is current_thread():\n        raise RuntimeError(\"cannot join current thread\")\n\n    if timeout is None:\n        self._wait_for_tstate_lock()\n    else:\n        # the behavior of a negative timeout isn't documented, but\n        # historically .join(timeout=x) for x&lt;0 has acted as if timeout=0\n        self._wait_for_tstate_lock(timeout=max(timeout, 0))\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.ping","title":"ping","text":"<pre><code>ping(timeout: float) -&gt; PingRep\n</code></pre> <p>Send a ping request to the drone.</p> <p>Parameters:</p> <ul> <li> <code>timeout</code>               (<code>float</code>)           \u2013            <p>The timeout for the response.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PingRep</code>           \u2013            <p>blueye.protocol.PingRep: The ping response.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def ping(self, timeout: float) -&gt; blueye.protocol.PingRep:\n    \"\"\"Send a ping request to the drone.\n\n    Args:\n        timeout (float): The timeout for the response.\n\n    Returns:\n        blueye.protocol.PingRep: The ping response.\n    \"\"\"\n    request = blueye.protocol.PingReq()\n    return self._send_request_get_response(request, blueye.protocol.PingRep, timeout)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.run","title":"run","text":"<pre><code>run()\n</code></pre> <p>Run the request-reply client thread.</p> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def run(self):\n    \"\"\"Run the request-reply client thread.\"\"\"\n    while not self._exit_flag.is_set():\n        try:\n            msg, response_type, response_callback_queue = self._requests_to_send.get(\n                timeout=0.1\n            )\n            self._socket.send_multipart(\n                [\n                    bytes(msg._pb.DESCRIPTOR.full_name, \"utf-8\"),\n                    msg.__class__.serialize(msg),\n                ]\n            )\n        except queue.Empty:\n            # No requests to send, so we can\n            continue\n        # TODO: Deal with timeout\n        resp = self._socket.recv_multipart()\n        resp_deserialized = response_type.deserialize(resp[1])\n        response_callback_queue.put(resp_deserialized)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.setDaemon","title":"setDaemon","text":"<pre><code>setDaemon(daemonic)\n</code></pre> <p>Set whether this thread is a daemon.</p> <p>This method is deprecated, use the .daemon property instead.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def setDaemon(self, daemonic):\n    \"\"\"Set whether this thread is a daemon.\n\n    This method is deprecated, use the .daemon property instead.\n\n    \"\"\"\n    import warnings\n    warnings.warn('setDaemon() is deprecated, set the daemon attribute instead',\n                  DeprecationWarning, stacklevel=2)\n    self.daemon = daemonic\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.setName","title":"setName","text":"<pre><code>setName(name)\n</code></pre> <p>Set the name string for this thread.</p> <p>This method is deprecated, use the name attribute instead.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def setName(self, name):\n    \"\"\"Set the name string for this thread.\n\n    This method is deprecated, use the name attribute instead.\n\n    \"\"\"\n    import warnings\n    warnings.warn('setName() is deprecated, set the name attribute instead',\n                  DeprecationWarning, stacklevel=2)\n    self.name = name\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.set_camera_parameters","title":"set_camera_parameters","text":"<pre><code>set_camera_parameters(\n    parameters: CameraParameters, timeout: float = 0.05\n) -&gt; SetCameraParametersRep\n</code></pre> <p>Set the camera parameters.</p> <p>Parameters:</p> <ul> <li> <code>parameters</code>               (<code>CameraParameters</code>)           \u2013            <p>The camera parameters.</p> </li> <li> <code>timeout</code>               (<code>float</code>, default:                   <code>0.05</code> )           \u2013            <p>The timeout for the response.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>SetCameraParametersRep</code>           \u2013            <p>The response message.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def set_camera_parameters(\n    self,\n    parameters: blueye.protocol.CameraParameters,\n    timeout: float = 0.05,\n) -&gt; blueye.protocol.SetCameraParametersRep:\n    \"\"\"Set the camera parameters.\n\n    Args:\n        parameters (blueye.protocol.CameraParameters): The camera parameters.\n        timeout (float, optional): The timeout for the response.\n\n    Returns:\n        The response message.\n    \"\"\"\n    request = blueye.protocol.SetCameraParametersReq(camera_parameters=parameters)\n    return self._send_request_get_response(\n        request, blueye.protocol.SetCameraParametersRep, timeout\n    )\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.set_overlay_parameters","title":"set_overlay_parameters","text":"<pre><code>set_overlay_parameters(\n    parameters: OverlayParameters, timeout: float = 0.05\n) -&gt; SetOverlayParametersRep\n</code></pre> <p>Set the overlay parameters.</p> <p>Parameters:</p> <ul> <li> <code>parameters</code>               (<code>OverlayParameters</code>)           \u2013            <p>The overlay parameters.</p> </li> <li> <code>timeout</code>               (<code>float</code>, default:                   <code>0.05</code> )           \u2013            <p>The timeout for the response.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>SetOverlayParametersRep</code>           \u2013            <p>The response message.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def set_overlay_parameters(\n    self, parameters: blueye.protocol.OverlayParameters, timeout: float = 0.05\n) -&gt; blueye.protocol.SetOverlayParametersRep:\n    \"\"\"Set the overlay parameters.\n\n    Args:\n        parameters (blueye.protocol.OverlayParameters): The overlay parameters.\n        timeout (float, optional): The timeout for the response.\n\n    Returns:\n        The response message.\n    \"\"\"\n    request = blueye.protocol.SetOverlayParametersReq(overlay_parameters=parameters)\n    return self._send_request_get_response(\n        request, blueye.protocol.SetOverlayParametersRep, timeout\n    )\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.set_telemetry_msg_publish_frequency","title":"set_telemetry_msg_publish_frequency","text":"<pre><code>set_telemetry_msg_publish_frequency(\n    msg: MessageMeta | str,\n    frequency: float,\n    timeout: float = 0.05,\n) -&gt; SetPubFrequencyRep\n</code></pre> <p>Set the telemetry message publish frequency.</p> <p>Parameters:</p> <ul> <li> <code>msg</code>               (<code>MessageMeta | str</code>)           \u2013            <p>The message type.</p> </li> <li> <code>frequency</code>               (<code>float</code>)           \u2013            <p>The publish frequency.</p> </li> <li> <code>timeout</code>               (<code>float</code>, default:                   <code>0.05</code> )           \u2013            <p>The timeout for the response.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>SetPubFrequencyRep</code>           \u2013            <p>The set publish frequency response.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def set_telemetry_msg_publish_frequency(\n    self, msg: proto.message.MessageMeta | str, frequency: float, timeout: float = 0.05\n) -&gt; blueye.protocol.SetPubFrequencyRep:\n    \"\"\"Set the telemetry message publish frequency.\n\n    Args:\n        msg (proto.message.MessageMeta | str): The message type.\n        frequency (float): The publish frequency.\n        timeout (float, optional): The timeout for the response.\n\n    Returns:\n        The set publish frequency response.\n    \"\"\"\n    message_type = self._parse_type_to_string(msg)\n    request = blueye.protocol.SetPubFrequencyReq(\n        message_type=message_type,\n        frequency=frequency,\n    )\n    return self._send_request_get_response(request, blueye.protocol.SetPubFrequencyRep, timeout)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start the thread's activity.</p> <p>It must be called at most once per thread object. It arranges for the object's run() method to be invoked in a separate thread of control.</p> <p>This method will raise a RuntimeError if called more than once on the same thread object.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def start(self):\n    \"\"\"Start the thread's activity.\n\n    It must be called at most once per thread object. It arranges for the\n    object's run() method to be invoked in a separate thread of control.\n\n    This method will raise a RuntimeError if called more than once on the\n    same thread object.\n\n    \"\"\"\n    if not self._initialized:\n        raise RuntimeError(\"thread.__init__() not called\")\n\n    if self._started.is_set():\n        raise RuntimeError(\"threads can only be started once\")\n\n    with _active_limbo_lock:\n        _limbo[self] = self\n    try:\n        _start_new_thread(self._bootstrap, ())\n    except Exception:\n        with _active_limbo_lock:\n            del _limbo[self]\n        raise\n    self._started.wait()\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop the request-reply client thread.</p> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def stop(self):\n    \"\"\"Stop the request-reply client thread.\"\"\"\n    self._exit_flag.set()\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.ReqRepClient.sync_time","title":"sync_time","text":"<pre><code>sync_time(time: int, timeout: float = 0.05) -&gt; SyncTimeRep\n</code></pre> <p>Synchronize the time with the drone.</p> <p>Parameters:</p> <ul> <li> <code>time</code>               (<code>int</code>)           \u2013            <p>The Unix timestamp to synchronize.</p> </li> <li> <code>timeout</code>               (<code>float</code>, default:                   <code>0.05</code> )           \u2013            <p>The timeout for the response.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>SyncTimeRep</code>           \u2013            <p>The response message.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def sync_time(self, time: int, timeout: float = 0.05) -&gt; blueye.protocol.SyncTimeRep:\n    \"\"\"Synchronize the time with the drone.\n\n    Args:\n        time (int): The Unix timestamp to synchronize.\n        timeout (float, optional): The timeout for the response.\n\n    Returns:\n        The response message.\n    \"\"\"\n    request = blueye.protocol.SyncTimeReq(\n        time={\"unix_timestamp\": {\"seconds\": time, \"nanos\": 0}}\n    )\n    return self._send_request_get_response(request, blueye.protocol.SyncTimeRep, timeout)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.TelemetryClient","title":"TelemetryClient","text":"<pre><code>TelemetryClient(\n    parent_drone: \"blueye.sdk.Drone\",\n    context: Context = None,\n)\n</code></pre> <p>               Bases: <code>Thread</code></p> <p>A thread that handles telemetry messages from the drone</p> <p>Parameters:</p> <ul> <li> <code>parent_drone</code>               (<code>Drone</code>)           \u2013            <p>The parent drone instance.</p> </li> <li> <code>context</code>               (<code>Context</code>, default:                   <code>None</code> )           \u2013            <p>The ZeroMQ context.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>add_callback</code>             \u2013              <p>Add a callback for telemetry messages.</p> </li> <li> <code>get</code>             \u2013              <p>Get the latest received message of a specific type.</p> </li> <li> <code>getName</code>             \u2013              <p>Return a string used for identification purposes only.</p> </li> <li> <code>isDaemon</code>             \u2013              <p>Return whether this thread is a daemon.</p> </li> <li> <code>is_alive</code>             \u2013              <p>Return whether the thread is alive.</p> </li> <li> <code>join</code>             \u2013              <p>Wait until the thread terminates.</p> </li> <li> <code>remove_callback</code>             \u2013              <p>Remove a callback by its UUID.</p> </li> <li> <code>run</code>             \u2013              <p>Run the telemetry client thread.</p> </li> <li> <code>setDaemon</code>             \u2013              <p>Set whether this thread is a daemon.</p> </li> <li> <code>setName</code>             \u2013              <p>Set the name string for this thread.</p> </li> <li> <code>start</code>             \u2013              <p>Start the thread's activity.</p> </li> <li> <code>stop</code>             \u2013              <p>Stop the telemetry client thread.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>daemon</code>           \u2013            <p>A boolean value indicating whether this thread is a daemon thread.</p> </li> <li> <code>ident</code>           \u2013            <p>Thread identifier of this thread or None if it has not been started.</p> </li> <li> <code>name</code>           \u2013            <p>A string used for identification purposes only.</p> </li> <li> <code>native_id</code>           \u2013            <p>Native integral thread ID of this thread, or None if it has not been started.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def __init__(self, parent_drone: \"blueye.sdk.Drone\", context: zmq.Context = None):\n    \"\"\"Initialize the TelemetryClient.\n\n    Args:\n        parent_drone (blueye.sdk.Drone): The parent drone instance.\n        context (zmq.Context, optional): The ZeroMQ context.\n    \"\"\"\n    super().__init__(daemon=True)\n    self._parent_drone = parent_drone\n    self._context = context or zmq.Context().instance()\n    self._socket = self._context.socket(zmq.SUB)\n    self._socket.connect(f\"tcp://{self._parent_drone._ip}:5555\")\n    self._socket.setsockopt_string(zmq.SUBSCRIBE, \"\")\n    self._exit_flag = threading.Event()\n    self._state_lock = threading.Lock()\n    self._callbacks: List[Callback] = []\n    self._state: Dict[proto.message.Message, bytes] = {}\n    \"\"\"`_state` is dictionary of the latest received messages, where the key is the protobuf\n    message class, eg. blueye.protocol.DepthTel and the value is the serialized protobuf\n    message\"\"\"\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.TelemetryClient.daemon","title":"daemon  <code>property</code> <code>writable</code>","text":"<pre><code>daemon\n</code></pre> <p>A boolean value indicating whether this thread is a daemon thread.</p> <p>This must be set before start() is called, otherwise RuntimeError is raised. Its initial value is inherited from the creating thread; the main thread is not a daemon thread and therefore all threads created in the main thread default to daemon = False.</p> <p>The entire Python program exits when only daemon threads are left.</p>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.TelemetryClient.ident","title":"ident  <code>property</code>","text":"<pre><code>ident\n</code></pre> <p>Thread identifier of this thread or None if it has not been started.</p> <p>This is a nonzero integer. See the get_ident() function. Thread identifiers may be recycled when a thread exits and another thread is created. The identifier is available even after the thread has exited.</p>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.TelemetryClient.name","title":"name  <code>property</code> <code>writable</code>","text":"<pre><code>name\n</code></pre> <p>A string used for identification purposes only.</p> <p>It has no semantics. Multiple threads may be given the same name. The initial name is set by the constructor.</p>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.TelemetryClient.native_id","title":"native_id  <code>property</code>","text":"<pre><code>native_id\n</code></pre> <p>Native integral thread ID of this thread, or None if it has not been started.</p> <p>This is a non-negative integer. See the get_native_id() function. This represents the Thread ID as reported by the kernel.</p>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.TelemetryClient.add_callback","title":"add_callback","text":"<pre><code>add_callback(\n    msg_filter: List[Message],\n    callback_function: Callable[[str, Message], None],\n    raw: bool,\n    **kwargs: Dict[str, Any]\n) -&gt; str\n</code></pre> <p>Add a callback for telemetry messages.</p> <p>Parameters:</p> <ul> <li> <code>msg_filter</code>               (<code>List[Message]</code>)           \u2013            <p>The list of message types to run the callback                                       function for.</p> </li> <li> <code>callback_function</code>               (<code>Callable[[str, Message], None]</code>)           \u2013            <p>The callback function.</p> </li> <li> <code>raw</code>               (<code>bool</code>)           \u2013            <p>Whether to pass raw data to the callback.</p> </li> <li> <code>**kwargs</code>               (<code>Dict[str, Any]</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments for the callback.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The UUID of the callback in hexadecimal format.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def add_callback(\n    self,\n    msg_filter: List[proto.message.Message],\n    callback_function: Callable[[str, proto.message.Message], None],\n    raw: bool,\n    **kwargs: Dict[str, Any],\n) -&gt; str:\n    \"\"\"Add a callback for telemetry messages.\n\n    Args:\n        msg_filter (List[proto.message.Message]): The list of message types to run the callback\n                                                  function for.\n        callback_function (Callable[[str, proto.message.Message], None]): The callback function.\n        raw (bool): Whether to pass raw data to the callback.\n        **kwargs: Additional keyword arguments for the callback.\n\n    Returns:\n        str: The UUID of the callback in hexadecimal format.\n    \"\"\"\n    uuid_hex = uuid.uuid1().hex\n    self._callbacks.append(Callback(msg_filter, callback_function, raw, uuid_hex, kwargs))\n    return uuid_hex\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.TelemetryClient.get","title":"get","text":"<pre><code>get(key: Message) -&gt; bytes\n</code></pre> <p>Get the latest received message of a specific type.</p> <p>Parameters:</p> <ul> <li> <code>key</code>               (<code>Message</code>)           \u2013            <p>The message type to retrieve.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bytes</code> (              <code>bytes</code> )          \u2013            <p>The serialized message payload.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def get(self, key: proto.message.Message) -&gt; bytes:\n    \"\"\"Get the latest received message of a specific type.\n\n    Args:\n        key (proto.message.Message): The message type to retrieve.\n\n    Returns:\n        bytes: The serialized message payload.\n    \"\"\"\n    with self._state_lock:\n        return self._state[key]\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.TelemetryClient.getName","title":"getName","text":"<pre><code>getName()\n</code></pre> <p>Return a string used for identification purposes only.</p> <p>This method is deprecated, use the name attribute instead.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def getName(self):\n    \"\"\"Return a string used for identification purposes only.\n\n    This method is deprecated, use the name attribute instead.\n\n    \"\"\"\n    import warnings\n    warnings.warn('getName() is deprecated, get the name attribute instead',\n                  DeprecationWarning, stacklevel=2)\n    return self.name\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.TelemetryClient.isDaemon","title":"isDaemon","text":"<pre><code>isDaemon()\n</code></pre> <p>Return whether this thread is a daemon.</p> <p>This method is deprecated, use the daemon attribute instead.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def isDaemon(self):\n    \"\"\"Return whether this thread is a daemon.\n\n    This method is deprecated, use the daemon attribute instead.\n\n    \"\"\"\n    import warnings\n    warnings.warn('isDaemon() is deprecated, get the daemon attribute instead',\n                  DeprecationWarning, stacklevel=2)\n    return self.daemon\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.TelemetryClient.is_alive","title":"is_alive","text":"<pre><code>is_alive()\n</code></pre> <p>Return whether the thread is alive.</p> <p>This method returns True just before the run() method starts until just after the run() method terminates. See also the module function enumerate().</p> Source code in <code>python3.10/threading.py</code> <pre><code>def is_alive(self):\n    \"\"\"Return whether the thread is alive.\n\n    This method returns True just before the run() method starts until just\n    after the run() method terminates. See also the module function\n    enumerate().\n\n    \"\"\"\n    assert self._initialized, \"Thread.__init__() not called\"\n    if self._is_stopped or not self._started.is_set():\n        return False\n    self._wait_for_tstate_lock(False)\n    return not self._is_stopped\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.TelemetryClient.join","title":"join","text":"<pre><code>join(timeout=None)\n</code></pre> <p>Wait until the thread terminates.</p> <p>This blocks the calling thread until the thread whose join() method is called terminates -- either normally or through an unhandled exception or until the optional timeout occurs.</p> <p>When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). As join() always returns None, you must call is_alive() after join() to decide whether a timeout happened -- if the thread is still alive, the join() call timed out.</p> <p>When the timeout argument is not present or None, the operation will block until the thread terminates.</p> <p>A thread can be join()ed many times.</p> <p>join() raises a RuntimeError if an attempt is made to join the current thread as that would cause a deadlock. It is also an error to join() a thread before it has been started and attempts to do so raises the same exception.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def join(self, timeout=None):\n    \"\"\"Wait until the thread terminates.\n\n    This blocks the calling thread until the thread whose join() method is\n    called terminates -- either normally or through an unhandled exception\n    or until the optional timeout occurs.\n\n    When the timeout argument is present and not None, it should be a\n    floating point number specifying a timeout for the operation in seconds\n    (or fractions thereof). As join() always returns None, you must call\n    is_alive() after join() to decide whether a timeout happened -- if the\n    thread is still alive, the join() call timed out.\n\n    When the timeout argument is not present or None, the operation will\n    block until the thread terminates.\n\n    A thread can be join()ed many times.\n\n    join() raises a RuntimeError if an attempt is made to join the current\n    thread as that would cause a deadlock. It is also an error to join() a\n    thread before it has been started and attempts to do so raises the same\n    exception.\n\n    \"\"\"\n    if not self._initialized:\n        raise RuntimeError(\"Thread.__init__() not called\")\n    if not self._started.is_set():\n        raise RuntimeError(\"cannot join thread before it is started\")\n    if self is current_thread():\n        raise RuntimeError(\"cannot join current thread\")\n\n    if timeout is None:\n        self._wait_for_tstate_lock()\n    else:\n        # the behavior of a negative timeout isn't documented, but\n        # historically .join(timeout=x) for x&lt;0 has acted as if timeout=0\n        self._wait_for_tstate_lock(timeout=max(timeout, 0))\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.TelemetryClient.remove_callback","title":"remove_callback","text":"<pre><code>remove_callback(callback_id: str)\n</code></pre> <p>Remove a callback by its UUID.</p> <p>Parameters:</p> <ul> <li> <code>callback_id</code>               (<code>str</code>)           \u2013            <p>The UUID of the callback to remove.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def remove_callback(self, callback_id: str):\n    \"\"\"Remove a callback by its UUID.\n\n    Args:\n        callback_id (str): The UUID of the callback to remove.\n    \"\"\"\n    try:\n        self._callbacks.pop([cb.uuid_hex for cb in self._callbacks].index(callback_id))\n    except ValueError:\n        logger.warning(f\"Callback with id {callback_id} not found, ignoring\")\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.TelemetryClient.run","title":"run","text":"<pre><code>run()\n</code></pre> <p>Run the telemetry client thread.</p> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def run(self):\n    \"\"\"Run the telemetry client thread.\"\"\"\n    poller = zmq.Poller()\n    poller.register(self._socket, zmq.POLLIN)\n\n    while not self._exit_flag.is_set():\n        events_to_be_processed = poller.poll(10)\n        if len(events_to_be_processed) &gt; 0:\n            msg = self._socket.recv_multipart()\n            self._handle_message(msg)\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.TelemetryClient.setDaemon","title":"setDaemon","text":"<pre><code>setDaemon(daemonic)\n</code></pre> <p>Set whether this thread is a daemon.</p> <p>This method is deprecated, use the .daemon property instead.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def setDaemon(self, daemonic):\n    \"\"\"Set whether this thread is a daemon.\n\n    This method is deprecated, use the .daemon property instead.\n\n    \"\"\"\n    import warnings\n    warnings.warn('setDaemon() is deprecated, set the daemon attribute instead',\n                  DeprecationWarning, stacklevel=2)\n    self.daemon = daemonic\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.TelemetryClient.setName","title":"setName","text":"<pre><code>setName(name)\n</code></pre> <p>Set the name string for this thread.</p> <p>This method is deprecated, use the name attribute instead.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def setName(self, name):\n    \"\"\"Set the name string for this thread.\n\n    This method is deprecated, use the name attribute instead.\n\n    \"\"\"\n    import warnings\n    warnings.warn('setName() is deprecated, set the name attribute instead',\n                  DeprecationWarning, stacklevel=2)\n    self.name = name\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.TelemetryClient.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start the thread's activity.</p> <p>It must be called at most once per thread object. It arranges for the object's run() method to be invoked in a separate thread of control.</p> <p>This method will raise a RuntimeError if called more than once on the same thread object.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def start(self):\n    \"\"\"Start the thread's activity.\n\n    It must be called at most once per thread object. It arranges for the\n    object's run() method to be invoked in a separate thread of control.\n\n    This method will raise a RuntimeError if called more than once on the\n    same thread object.\n\n    \"\"\"\n    if not self._initialized:\n        raise RuntimeError(\"thread.__init__() not called\")\n\n    if self._started.is_set():\n        raise RuntimeError(\"threads can only be started once\")\n\n    with _active_limbo_lock:\n        _limbo[self] = self\n    try:\n        _start_new_thread(self._bootstrap, ())\n    except Exception:\n        with _active_limbo_lock:\n            del _limbo[self]\n        raise\n    self._started.wait()\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.TelemetryClient.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop the telemetry client thread.</p> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def stop(self):\n    \"\"\"Stop the telemetry client thread.\"\"\"\n    self._exit_flag.set()\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.WatchdogPublisher","title":"WatchdogPublisher","text":"<pre><code>WatchdogPublisher(\n    parent_drone: \"blueye.sdk.Drone\",\n    context: Context = None,\n)\n</code></pre> <p>               Bases: <code>Thread</code></p> <p>A thread that publishes watchdog messages to keep the connection alive.</p> <p>Parameters:</p> <ul> <li> <code>parent_drone</code>               (<code>Drone</code>)           \u2013            <p>The parent drone instance.</p> </li> <li> <code>context</code>               (<code>Context</code>, default:                   <code>None</code> )           \u2013            <p>The ZeroMQ context.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>getName</code>             \u2013              <p>Return a string used for identification purposes only.</p> </li> <li> <code>isDaemon</code>             \u2013              <p>Return whether this thread is a daemon.</p> </li> <li> <code>is_alive</code>             \u2013              <p>Return whether the thread is alive.</p> </li> <li> <code>join</code>             \u2013              <p>Wait until the thread terminates.</p> </li> <li> <code>pet_watchdog</code>             \u2013              <p>Send a watchdog message.</p> </li> <li> <code>run</code>             \u2013              <p>Run the watchdog publisher thread.</p> </li> <li> <code>setDaemon</code>             \u2013              <p>Set whether this thread is a daemon.</p> </li> <li> <code>setName</code>             \u2013              <p>Set the name string for this thread.</p> </li> <li> <code>start</code>             \u2013              <p>Start the thread's activity.</p> </li> <li> <code>stop</code>             \u2013              <p>Stop the watchdog thread started by run().</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>daemon</code>           \u2013            <p>A boolean value indicating whether this thread is a daemon thread.</p> </li> <li> <code>ident</code>           \u2013            <p>Thread identifier of this thread or None if it has not been started.</p> </li> <li> <code>name</code>           \u2013            <p>A string used for identification purposes only.</p> </li> <li> <code>native_id</code>           \u2013            <p>Native integral thread ID of this thread, or None if it has not been started.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def __init__(self, parent_drone: \"blueye.sdk.Drone\", context: zmq.Context = None):\n    super().__init__(daemon=True)\n    self._parent_drone = parent_drone\n    self._context = context or zmq.Context().instance()\n    self._socket = self._context.socket(zmq.PUB)\n    self._socket.connect(f\"tcp://{self._parent_drone._ip}:5557\")\n    self._exit_flag = threading.Event()\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.WatchdogPublisher.daemon","title":"daemon  <code>property</code> <code>writable</code>","text":"<pre><code>daemon\n</code></pre> <p>A boolean value indicating whether this thread is a daemon thread.</p> <p>This must be set before start() is called, otherwise RuntimeError is raised. Its initial value is inherited from the creating thread; the main thread is not a daemon thread and therefore all threads created in the main thread default to daemon = False.</p> <p>The entire Python program exits when only daemon threads are left.</p>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.WatchdogPublisher.ident","title":"ident  <code>property</code>","text":"<pre><code>ident\n</code></pre> <p>Thread identifier of this thread or None if it has not been started.</p> <p>This is a nonzero integer. See the get_ident() function. Thread identifiers may be recycled when a thread exits and another thread is created. The identifier is available even after the thread has exited.</p>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.WatchdogPublisher.name","title":"name  <code>property</code> <code>writable</code>","text":"<pre><code>name\n</code></pre> <p>A string used for identification purposes only.</p> <p>It has no semantics. Multiple threads may be given the same name. The initial name is set by the constructor.</p>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.WatchdogPublisher.native_id","title":"native_id  <code>property</code>","text":"<pre><code>native_id\n</code></pre> <p>Native integral thread ID of this thread, or None if it has not been started.</p> <p>This is a non-negative integer. See the get_native_id() function. This represents the Thread ID as reported by the kernel.</p>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.WatchdogPublisher.getName","title":"getName","text":"<pre><code>getName()\n</code></pre> <p>Return a string used for identification purposes only.</p> <p>This method is deprecated, use the name attribute instead.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def getName(self):\n    \"\"\"Return a string used for identification purposes only.\n\n    This method is deprecated, use the name attribute instead.\n\n    \"\"\"\n    import warnings\n    warnings.warn('getName() is deprecated, get the name attribute instead',\n                  DeprecationWarning, stacklevel=2)\n    return self.name\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.WatchdogPublisher.isDaemon","title":"isDaemon","text":"<pre><code>isDaemon()\n</code></pre> <p>Return whether this thread is a daemon.</p> <p>This method is deprecated, use the daemon attribute instead.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def isDaemon(self):\n    \"\"\"Return whether this thread is a daemon.\n\n    This method is deprecated, use the daemon attribute instead.\n\n    \"\"\"\n    import warnings\n    warnings.warn('isDaemon() is deprecated, get the daemon attribute instead',\n                  DeprecationWarning, stacklevel=2)\n    return self.daemon\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.WatchdogPublisher.is_alive","title":"is_alive","text":"<pre><code>is_alive()\n</code></pre> <p>Return whether the thread is alive.</p> <p>This method returns True just before the run() method starts until just after the run() method terminates. See also the module function enumerate().</p> Source code in <code>python3.10/threading.py</code> <pre><code>def is_alive(self):\n    \"\"\"Return whether the thread is alive.\n\n    This method returns True just before the run() method starts until just\n    after the run() method terminates. See also the module function\n    enumerate().\n\n    \"\"\"\n    assert self._initialized, \"Thread.__init__() not called\"\n    if self._is_stopped or not self._started.is_set():\n        return False\n    self._wait_for_tstate_lock(False)\n    return not self._is_stopped\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.WatchdogPublisher.join","title":"join","text":"<pre><code>join(timeout=None)\n</code></pre> <p>Wait until the thread terminates.</p> <p>This blocks the calling thread until the thread whose join() method is called terminates -- either normally or through an unhandled exception or until the optional timeout occurs.</p> <p>When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). As join() always returns None, you must call is_alive() after join() to decide whether a timeout happened -- if the thread is still alive, the join() call timed out.</p> <p>When the timeout argument is not present or None, the operation will block until the thread terminates.</p> <p>A thread can be join()ed many times.</p> <p>join() raises a RuntimeError if an attempt is made to join the current thread as that would cause a deadlock. It is also an error to join() a thread before it has been started and attempts to do so raises the same exception.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def join(self, timeout=None):\n    \"\"\"Wait until the thread terminates.\n\n    This blocks the calling thread until the thread whose join() method is\n    called terminates -- either normally or through an unhandled exception\n    or until the optional timeout occurs.\n\n    When the timeout argument is present and not None, it should be a\n    floating point number specifying a timeout for the operation in seconds\n    (or fractions thereof). As join() always returns None, you must call\n    is_alive() after join() to decide whether a timeout happened -- if the\n    thread is still alive, the join() call timed out.\n\n    When the timeout argument is not present or None, the operation will\n    block until the thread terminates.\n\n    A thread can be join()ed many times.\n\n    join() raises a RuntimeError if an attempt is made to join the current\n    thread as that would cause a deadlock. It is also an error to join() a\n    thread before it has been started and attempts to do so raises the same\n    exception.\n\n    \"\"\"\n    if not self._initialized:\n        raise RuntimeError(\"Thread.__init__() not called\")\n    if not self._started.is_set():\n        raise RuntimeError(\"cannot join thread before it is started\")\n    if self is current_thread():\n        raise RuntimeError(\"cannot join current thread\")\n\n    if timeout is None:\n        self._wait_for_tstate_lock()\n    else:\n        # the behavior of a negative timeout isn't documented, but\n        # historically .join(timeout=x) for x&lt;0 has acted as if timeout=0\n        self._wait_for_tstate_lock(timeout=max(timeout, 0))\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.WatchdogPublisher.pet_watchdog","title":"pet_watchdog","text":"<pre><code>pet_watchdog(duration)\n</code></pre> <p>Send a watchdog message.</p> <p>Parameters:</p> <ul> <li> <code>duration</code>               (<code>int</code>)           \u2013            <p>The duration of the connection.</p> </li> </ul> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def pet_watchdog(self, duration):\n    \"\"\"Send a watchdog message.\n\n    Args:\n        duration (int): The duration of the connection.\n    \"\"\"\n    msg = blueye.protocol.WatchdogCtrl(\n        connection_duration={\"value\": duration}, client_id=self._parent_drone.client_id\n    )\n    self._socket.send_multipart(\n        [\n            bytes(msg._pb.DESCRIPTOR.full_name, \"utf-8\"),\n            blueye.protocol.WatchdogCtrl.serialize(msg),\n        ]\n    )\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.WatchdogPublisher.run","title":"run","text":"<pre><code>run()\n</code></pre> <p>Run the watchdog publisher thread.</p> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def run(self):\n    \"\"\"Run the watchdog publisher thread.\"\"\"\n    duration = 0\n    WATCHDOG_DELAY = 1\n    while not self._exit_flag.wait(WATCHDOG_DELAY):\n        self.pet_watchdog(duration)\n        duration += 1\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.WatchdogPublisher.setDaemon","title":"setDaemon","text":"<pre><code>setDaemon(daemonic)\n</code></pre> <p>Set whether this thread is a daemon.</p> <p>This method is deprecated, use the .daemon property instead.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def setDaemon(self, daemonic):\n    \"\"\"Set whether this thread is a daemon.\n\n    This method is deprecated, use the .daemon property instead.\n\n    \"\"\"\n    import warnings\n    warnings.warn('setDaemon() is deprecated, set the daemon attribute instead',\n                  DeprecationWarning, stacklevel=2)\n    self.daemon = daemonic\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.WatchdogPublisher.setName","title":"setName","text":"<pre><code>setName(name)\n</code></pre> <p>Set the name string for this thread.</p> <p>This method is deprecated, use the name attribute instead.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def setName(self, name):\n    \"\"\"Set the name string for this thread.\n\n    This method is deprecated, use the name attribute instead.\n\n    \"\"\"\n    import warnings\n    warnings.warn('setName() is deprecated, set the name attribute instead',\n                  DeprecationWarning, stacklevel=2)\n    self.name = name\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.WatchdogPublisher.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start the thread's activity.</p> <p>It must be called at most once per thread object. It arranges for the object's run() method to be invoked in a separate thread of control.</p> <p>This method will raise a RuntimeError if called more than once on the same thread object.</p> Source code in <code>python3.10/threading.py</code> <pre><code>def start(self):\n    \"\"\"Start the thread's activity.\n\n    It must be called at most once per thread object. It arranges for the\n    object's run() method to be invoked in a separate thread of control.\n\n    This method will raise a RuntimeError if called more than once on the\n    same thread object.\n\n    \"\"\"\n    if not self._initialized:\n        raise RuntimeError(\"thread.__init__() not called\")\n\n    if self._started.is_set():\n        raise RuntimeError(\"threads can only be started once\")\n\n    with _active_limbo_lock:\n        _limbo[self] = self\n    try:\n        _start_new_thread(self._bootstrap, ())\n    except Exception:\n        with _active_limbo_lock:\n            del _limbo[self]\n        raise\n    self._started.wait()\n</code></pre>"},{"location":"reference/blueye/sdk/connection/#blueye.sdk.connection.WatchdogPublisher.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop the watchdog thread started by run().</p> Source code in <code>blueye/sdk/connection.py</code> <pre><code>def stop(self):\n    \"\"\"Stop the watchdog thread started by run().\"\"\"\n    self._exit_flag.set()\n</code></pre>"},{"location":"reference/blueye/sdk/constants/","title":"blueye.sdk.constants","text":""},{"location":"reference/blueye/sdk/constants/#blueye.sdk.constants","title":"constants","text":"<p>This file contains constants used by the SDK.</p>"},{"location":"reference/blueye/sdk/constants/#blueye.sdk.constants.WaterDensities","title":"WaterDensities","text":"<p>Various typical densities for water (in grams/liter).</p> <p>Attributes:</p> <ul> <li> <code>fresh</code>               (<code>float</code>)           \u2013            <p>Density of fresh water.</p> </li> <li> <code>brackish</code>               (<code>float</code>)           \u2013            <p>Density of brackish water.</p> </li> <li> <code>salty</code>               (<code>float</code>)           \u2013            <p>Density of salty water.</p> </li> </ul>"},{"location":"reference/blueye/sdk/drone/","title":"blueye.sdk.drone","text":""},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone","title":"drone","text":"<p>Classes:</p> <ul> <li> <code>Config</code>           \u2013            <p>Handles the configuration settings for the Blueye drone.</p> </li> <li> <code>Drone</code>           \u2013            <p>A class providing an interface to a Blueye drone's functions.</p> </li> <li> <code>Telemetry</code>           \u2013            <p>Handles the telemetry messages for the Blueye drone.</p> </li> </ul>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Config","title":"Config","text":"<pre><code>Config(parent_drone: 'Drone')\n</code></pre> <p>Handles the configuration settings for the Blueye drone.</p> <p>Parameters:</p> <ul> <li> <code>parent_drone</code>               (<code>Drone</code>)           \u2013            <p>The parent drone instance.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>set_drone_time</code>             \u2013              <p>Set the system time for the drone.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>water_density</code>           \u2013            <p>Get or set the current water density for increased pressure sensor accuracy.</p> </li> </ul> Source code in <code>blueye/sdk/drone.py</code> <pre><code>def __init__(self, parent_drone: \"Drone\"):\n    \"\"\"Initialize the Config class.\n\n    Args:\n        parent_drone (Drone): The parent drone instance.\n    \"\"\"\n    self._parent_drone = parent_drone\n    self._water_density = WaterDensities.salty\n</code></pre>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Config.water_density","title":"water_density  <code>property</code> <code>writable</code>","text":"<pre><code>water_density\n</code></pre> <p>Get or set the current water density for increased pressure sensor accuracy.</p> <p>Older software versions will assume a water density of 1025 grams per liter.</p> <p>The WaterDensities class contains typical densities for salty-, brackish-, and fresh water (these are the same values that the Blueye app uses).</p> <p>Parameters:</p> <ul> <li> <code>density</code>               (<code>float</code>)           \u2013            <p>The water density to set.</p> </li> </ul>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Config.set_drone_time","title":"set_drone_time","text":"<pre><code>set_drone_time(time: int)\n</code></pre> <p>Set the system time for the drone.</p> <p>This method is used to set the system time for the drone. The argument <code>time</code> is expected to be a Unix timestamp (i.e., the number of seconds since the epoch).</p> <p>Parameters:</p> <ul> <li> <code>time</code>               (<code>int</code>)           \u2013            <p>The Unix timestamp to set.</p> </li> </ul> Source code in <code>blueye/sdk/drone.py</code> <pre><code>def set_drone_time(self, time: int):\n    \"\"\"Set the system time for the drone.\n\n    This method is used to set the system time for the drone. The argument `time` is expected to\n    be a Unix timestamp (i.e., the number of seconds since the epoch).\n\n    Args:\n        time (int): The Unix timestamp to set.\n    \"\"\"\n    self._parent_drone._req_rep_client.sync_time(time)\n</code></pre>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Drone","title":"Drone","text":"<pre><code>Drone(\n    ip=\"192.168.1.101\",\n    auto_connect=True,\n    timeout=10,\n    disconnect_other_clients=False,\n    connect_as_observer=False,\n)\n</code></pre> <p>A class providing an interface to a Blueye drone's functions.</p> <p>Automatically connects to the drone using the default IP when instantiated. This behavior can be disabled by setting <code>auto_connect=False</code>.</p> <p>Parameters:</p> <ul> <li> <code>ip</code>               (<code>str</code>, default:                   <code>'192.168.1.101'</code> )           \u2013            <p>The IP address of the drone.</p> </li> <li> <code>auto_connect</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to automatically connect to the drone.</p> </li> <li> <code>timeout</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>The timeout for the connection attempt.</p> </li> <li> <code>disconnect_other_clients</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to disconnect other clients.</p> </li> <li> <code>connect_as_observer</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to connect as an observer.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>connect</code>             \u2013              <p>Establish a connection to the drone.</p> </li> <li> <code>disconnect</code>             \u2013              <p>Disconnects the connection, allowing another client to take control of the drone.</p> </li> <li> <code>ping</code>             \u2013              <p>Ping the drone.</p> </li> <li> <code>take_control</code>             \u2013              <p>Take control of the drone, disconnecting other clients.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>active_video_streams</code>               (<code>Dict[str, int]</code>)           \u2013            <p>Get the number of currently active connections to the video stream.</p> </li> <li> <code>altitude</code>               (<code>Optional[float]</code>)           \u2013            <p>Get the current altitude in meters.</p> </li> <li> <code>client_in_control</code>               (<code>Optional[int]</code>)           \u2013            <p>Get the client ID of the client in control of the drone.</p> </li> <li> <code>connected_clients</code>               (<code>Optional[List[ConnectedClient]]</code>)           \u2013            <p>Get a list of connected clients.</p> </li> <li> <code>depth</code>               (<code>Optional[float]</code>)           \u2013            <p>Get the current depth in meters.</p> </li> <li> <code>dive_time</code>               (<code>Optional[int]</code>)           \u2013            <p>Get the amount of time the drone has been submerged.</p> </li> <li> <code>error_flags</code>               (<code>Dict[str, bool]</code>)           \u2013            <p>Get the error flags.</p> </li> <li> <code>lights</code>               (<code>Optional[float]</code>)           \u2013            <p>Get or set the intensity of the drone lights.</p> </li> <li> <code>peripherals</code>               (<code>Optional[List[Peripheral]]</code>)           \u2013            <p>This list holds the peripherals connected to the drone. If it is <code>None</code>, then no</p> </li> <li> <code>pose</code>               (<code>Optional[Dict[str, float]]</code>)           \u2013            <p>Get the current orientation of the drone.</p> </li> <li> <code>water_temperature</code>               (<code>Optional[float]</code>)           \u2013            <p>Get the water temperature in degrees Celsius.</p> </li> </ul> Source code in <code>blueye/sdk/drone.py</code> <pre><code>def __init__(\n    self,\n    ip=\"192.168.1.101\",\n    auto_connect=True,\n    timeout=10,\n    disconnect_other_clients=False,\n    connect_as_observer=False,\n):\n    \"\"\"Initialize the Drone class.\n\n    Args:\n        ip (str, optional):\n            The IP address of the drone.\n        auto_connect (bool, optional):\n            Whether to automatically connect to the drone.\n        timeout (int, optional):\n            The timeout for the connection attempt.\n        disconnect_other_clients (bool, optional):\n            Whether to disconnect other clients.\n        connect_as_observer (bool, optional):\n            Whether to connect as an observer.\n    \"\"\"\n    self._ip = ip\n    self.camera = Camera(self, is_guestport_camera=False)\n    self.motion = Motion(self)\n    self.logs = Logs(self)\n    self.legacy_logs = LegacyLogs(self)\n    self.config = Config(self)\n    self.battery = Battery(self)\n    self.telemetry = Telemetry(self)\n    self.connected = False\n    self.client_id: int = None\n    self.in_control: bool = False\n    self._watchdog_publisher = _NoConnectionClient()\n    self._telemetry_watcher = _NoConnectionClient()\n    self._req_rep_client = _NoConnectionClient()\n    self._ctrl_client = _NoConnectionClient()\n\n    self.peripherals: Optional[List[Peripheral]] = None\n    \"\"\"This list holds the peripherals connected to the drone. If it is `None`, then no\n    Guestport telemetry message has been received yet.\"\"\"\n\n    if auto_connect is True:\n        self.connect(\n            timeout=timeout,\n            disconnect_other_clients=disconnect_other_clients,\n            connect_as_observer=connect_as_observer,\n        )\n</code></pre>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Drone.active_video_streams","title":"active_video_streams  <code>property</code>","text":"<pre><code>active_video_streams: Dict[str, int]\n</code></pre> <p>Get the number of currently active connections to the video stream.</p> <p>Every client connected to the RTSP stream (does not matter if it's directly from GStreamer, or from the Blueye app) counts as one connection.</p> <p>Returns:</p> <ul> <li> <code>Dict[str, int]</code>           \u2013            <p>A dictionary with the number of active connections to the main and guestport video streams.</p> </li> </ul>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Drone.altitude","title":"altitude  <code>property</code>","text":"<pre><code>altitude: Optional[float]\n</code></pre> <p>Get the current altitude in meters.</p> <p>If the drone has a DVL or a positioning system with a valid reading, this property will return the current altitude.</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>The altitude in meters above the bottom.</p> </li> </ul>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Drone.client_in_control","title":"client_in_control  <code>property</code>","text":"<pre><code>client_in_control: Optional[int]\n</code></pre> <p>Get the client ID of the client in control of the drone.</p> <p>Returns:</p> <ul> <li> <code>Optional[int]</code>           \u2013            <p>The client ID of the client in control, or None if no client is in control.</p> </li> </ul>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Drone.connected_clients","title":"connected_clients  <code>property</code>","text":"<pre><code>connected_clients: Optional[List[ConnectedClient]]\n</code></pre> <p>Get a list of connected clients.</p> <p>Returns:</p> <ul> <li> <code>Optional[List[ConnectedClient]]</code>           \u2013            <p>A list of connected clients, or None if no clients are connected.</p> </li> </ul>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Drone.depth","title":"depth  <code>property</code>","text":"<pre><code>depth: Optional[float]\n</code></pre> <p>Get the current depth in meters.</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>The depth in meters of water column.</p> </li> </ul>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Drone.dive_time","title":"dive_time  <code>property</code>","text":"<pre><code>dive_time: Optional[int]\n</code></pre> <p>Get the amount of time the drone has been submerged.</p> <p>The drone starts incrementing this value when the depth is above 250 mm.</p> <p>Returns:</p> <ul> <li> <code>Optional[int]</code>           \u2013            <p>The time in seconds the drone has been submerged.</p> </li> </ul>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Drone.error_flags","title":"error_flags  <code>property</code>","text":"<pre><code>error_flags: Dict[str, bool]\n</code></pre> <p>Get the error flags.</p> <p>Returns:</p> <ul> <li> <code>Dict[str, bool]</code>           \u2013            <p>The error flags as bools in a dictionary.</p> </li> </ul>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Drone.lights","title":"lights  <code>property</code> <code>writable</code>","text":"<pre><code>lights: Optional[float]\n</code></pre> <p>Get or set the intensity of the drone lights.</p> <p>Parameters:</p> <ul> <li> <code>brightness</code>               (<code>float</code>)           \u2013            <p>Set the intensity of the drone light (0..1).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>The intensity of the drone light (0..1). <code>None</code> if no telemetry message has been received.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If the brightness is not in the range</p> </li> </ul>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Drone.peripherals","title":"peripherals  <code>instance-attribute</code>","text":"<pre><code>peripherals: Optional[List[Peripheral]] = None\n</code></pre> <p>This list holds the peripherals connected to the drone. If it is <code>None</code>, then no Guestport telemetry message has been received yet.</p>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Drone.pose","title":"pose  <code>property</code>","text":"<pre><code>pose: Optional[Dict[str, float]]\n</code></pre> <p>Get the current orientation of the drone.</p> <p>Returns:</p> <ul> <li> <code>Optional[Dict[str, float]]</code>           \u2013            <p>A dictionary with roll, pitch, and yaw in degrees, from 0 to 359.</p> </li> </ul>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Drone.water_temperature","title":"water_temperature  <code>property</code>","text":"<pre><code>water_temperature: Optional[float]\n</code></pre> <p>Get the water temperature in degrees Celsius.</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>The water temperature in degrees Celsius.</p> </li> </ul>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Drone.connect","title":"connect","text":"<pre><code>connect(\n    client_info: ClientInfo = None,\n    timeout: float = 4,\n    disconnect_other_clients: bool = False,\n    connect_as_observer: bool = False,\n)\n</code></pre> <p>Establish a connection to the drone.</p> <p>Spawns several threads for receiving telemetry, sending control messages, and publishing watchdog messages.</p> <p>When a watchdog message is received by the drone, the thrusters are armed. To stop the drone from moving unexpectedly when connecting, all thruster set points are set to zero when connecting.</p> <p>Parameters:</p> <ul> <li> <code>client_info</code>               (<code>ClientInfo</code>, default:                   <code>None</code> )           \u2013            <p>Information about the client connecting. If None, the SDK will attempt to read it from the environment.</p> </li> <li> <code>timeout</code>               (<code>float</code>, default:                   <code>4</code> )           \u2013            <p>Seconds to wait for connection.</p> </li> <li> <code>disconnect_other_clients</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, disconnect clients until the drone reports that we are in control.</p> </li> <li> <code>connect_as_observer</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, the client will not be promoted to in control of the drone.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ConnectionError</code>             \u2013            <p>If the connection attempt fails.</p> </li> <li> <code>RuntimeError</code>             \u2013            <p>If the Blunux version of the connected drone is too old.</p> </li> </ul> Source code in <code>blueye/sdk/drone.py</code> <pre><code>def connect(\n    self,\n    client_info: blueye.protocol.ClientInfo = None,\n    timeout: float = 4,\n    disconnect_other_clients: bool = False,\n    connect_as_observer: bool = False,\n):\n    \"\"\"Establish a connection to the drone.\n\n    Spawns several threads for receiving telemetry, sending control messages, and publishing\n    watchdog messages.\n\n    When a watchdog message is received by the drone, the thrusters are armed. To stop the drone\n    from moving unexpectedly when connecting, all thruster set points are set to zero when\n    connecting.\n\n    Args:\n        client_info (blueye.protocol.ClientInfo, optional):\n            Information about the client connecting. If None, the SDK will attempt to read it\n            from the environment.\n        timeout (float, optional):\n            Seconds to wait for connection.\n        disconnect_other_clients (bool, optional):\n            If True, disconnect clients until the drone reports that we are in control.\n        connect_as_observer (bool, optional):\n            If True, the client will not be promoted to in control of the drone.\n\n    Raises:\n        ConnectionError: If the connection attempt fails.\n        RuntimeError: If the Blunux version of the connected drone is too old.\n    \"\"\"\n    logger.info(f\"Attempting to connect to drone at {self._ip}\")\n    self._update_drone_info(timeout=timeout)\n    self._verify_required_blunux_version(\"3.2\")\n\n    self._telemetry_watcher = TelemetryClient(self)\n    self._ctrl_client = CtrlClient(self)\n    self._watchdog_publisher = WatchdogPublisher(self)\n    self._req_rep_client = ReqRepClient(self)\n\n    self._telemetry_watcher.start()\n    self._req_rep_client.start()\n    self._ctrl_client.start()\n    self._watchdog_publisher.start()\n\n    try:\n        self.ping()\n        connect_resp = self._req_rep_client.connect_client(\n            client_info=client_info, is_observer=connect_as_observer\n        )\n    except blueye.protocol.exceptions.ResponseTimeout as e:\n        raise ConnectionError(\"Could not establish connection with drone\") from e\n    logger.info(f\"Connection successful, client id: {connect_resp.client_id}\")\n    logger.info(f\"Client id in control: {connect_resp.client_id_in_control}\")\n    logger.info(f\"There are {len(connect_resp.connected_clients)-1} other clients connected\")\n    self.client_id = connect_resp.client_id\n    self.in_control = connect_resp.client_id == connect_resp.client_id_in_control\n    self.connected = True\n    if disconnect_other_clients and not self.in_control and not connect_as_observer:\n        self.take_control()\n    self._drone_info_cb_id = self.telemetry.add_msg_callback(\n        [blueye.protocol.DroneInfoTel],\n        Drone._drone_info_callback,\n        False,\n        drone=self,\n    )\n\n    if self.in_control:\n        # The drone runs from a read-only filesystem, and as such does not keep any state,\n        # therefore when we connect to it we should send the current time\n        current_time = int(time.time())\n        time_formatted = datetime.fromtimestamp(current_time).strftime(\"%d. %b %Y %H:%M\")\n        logger.debug(f\"Setting current time to {current_time} ({time_formatted})\")\n        self.config.set_drone_time(current_time)\n        logger.debug(f\"Disabling thrusters\")\n        self.motion.send_thruster_setpoint(0, 0, 0, 0)\n</code></pre>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Drone.disconnect","title":"disconnect","text":"<pre><code>disconnect()\n</code></pre> <p>Disconnects the connection, allowing another client to take control of the drone.</p> Source code in <code>blueye/sdk/drone.py</code> <pre><code>def disconnect(self):\n    \"\"\"Disconnects the connection, allowing another client to take control of the drone.\"\"\"\n    try:\n        self._req_rep_client.disconnect_client(self.client_id)\n    except blueye.protocol.exceptions.ResponseTimeout:\n        # If there's no response the connection is likely already closed, so we can just\n        # continue to stop threads and disconnect\n        pass\n    self._watchdog_publisher.stop()\n    self._telemetry_watcher.stop()\n    self._req_rep_client.stop()\n    self._ctrl_client.stop()\n\n    self._watchdog_publisher = _NoConnectionClient()\n    self._telemetry_watcher = _NoConnectionClient()\n    self._req_rep_client = _NoConnectionClient()\n    self._ctrl_client = _NoConnectionClient()\n\n    self.connected = False\n</code></pre>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Drone.ping","title":"ping","text":"<pre><code>ping(timeout: float = 1.0)\n</code></pre> <p>Ping the drone.</p> <p>Parameters:</p> <ul> <li> <code>timeout</code>               (<code>float</code>, default:                   <code>1.0</code> )           \u2013            <p>The timeout for the ping request.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ResponseTimeout</code>             \u2013            <p>If the drone does not respond within the timeout period.</p> </li> </ul> Source code in <code>blueye/sdk/drone.py</code> <pre><code>def ping(self, timeout: float = 1.0):\n    \"\"\"Ping the drone.\n\n    Args:\n        timeout (float, optional): The timeout for the ping request.\n\n    Raises:\n        blueye.protocol.exceptions.ResponseTimeout:\n            If the drone does not respond within the timeout period.\n    \"\"\"\n    self._req_rep_client.ping(timeout)\n</code></pre>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Drone.take_control","title":"take_control","text":"<pre><code>take_control(timeout=1)\n</code></pre> <p>Take control of the drone, disconnecting other clients.</p> <p>Will disconnect other clients until the client is in control of the drone.</p> <p>Parameters:</p> <ul> <li> <code>timeout</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>The timeout for taking control.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>If the client could not take control of the drone in the given time.</p> </li> </ul> Source code in <code>blueye/sdk/drone.py</code> <pre><code>def take_control(self, timeout=1):\n    \"\"\"Take control of the drone, disconnecting other clients.\n\n    Will disconnect other clients until the client is in control of the drone.\n\n    Args:\n        timeout (int, optional): The timeout for taking control.\n\n    Raises:\n        RuntimeError: If the client could not take control of the drone in the given time.\n    \"\"\"\n    start_time = time.time()\n    client_in_control = self.client_in_control\n    while self.client_id != client_in_control:\n        if time.time() - start_time &gt; timeout:\n            raise RuntimeError(\"Could not take control of the drone in the given time\")\n        resp = self._req_rep_client.disconnect_client(client_in_control)\n        client_in_control = resp.client_id_in_control\n    self.in_control = True\n</code></pre>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Telemetry","title":"Telemetry","text":"<pre><code>Telemetry(parent_drone: 'Drone')\n</code></pre> <p>Handles the telemetry messages for the Blueye drone.</p> <p>Parameters:</p> <ul> <li> <code>parent_drone</code>               (<code>Drone</code>)           \u2013            <p>The parent drone instance.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>add_msg_callback</code>             \u2013              <p>Register a telemetry message callback.</p> </li> <li> <code>get</code>             \u2013              <p>Get the latest telemetry message of the specified type.</p> </li> <li> <code>remove_msg_callback</code>             \u2013              <p>Remove a telemetry message callback.</p> </li> <li> <code>set_msg_publish_frequency</code>             \u2013              <p>Set the publishing frequency of a specific telemetry message.</p> </li> </ul> Source code in <code>blueye/sdk/drone.py</code> <pre><code>def __init__(self, parent_drone: \"Drone\"):\n    \"\"\"Initialize the Telemetry class.\n\n    Args:\n        parent_drone (Drone): The parent drone instance.\n    \"\"\"\n    self._parent_drone = parent_drone\n</code></pre>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Telemetry.add_msg_callback","title":"add_msg_callback","text":"<pre><code>add_msg_callback(\n    msg_filter: List[Message],\n    callback: Callable[[str, Message], None],\n    raw: bool = False,\n    **kwargs: Dict[str, Any]\n) -&gt; str\n</code></pre> <p>Register a telemetry message callback.</p> <p>The callback is called each time a message of the type is received.</p> <p>Parameters:</p> <ul> <li> <code>msg_filter</code>               (<code>List[Message]</code>)           \u2013            <p>A list of message types to register the callback for. E.g., <code>[blueye.protocol.DepthTel, blueye.protocol.Imu1Tel]</code>. If the list is empty, the callback will be registered for all message types.</p> </li> <li> <code>callback</code>               (<code>Callable[[str, Message], None]</code>)           \u2013            <p>The callback function. It should be minimal and return as fast as possible to not block the telemetry communication. It is called with two arguments, the message type name and the message object.</p> </li> <li> <code>raw</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Pass the raw data instead of the deserialized message to the callback function.</p> </li> <li> <code>**kwargs</code>               (<code>Dict[str, Any]</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to the callback function.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The UUID of the callback.</p> </li> </ul> Source code in <code>blueye/sdk/drone.py</code> <pre><code>def add_msg_callback(\n    self,\n    msg_filter: List[proto.message.Message],\n    callback: Callable[[str, proto.message.Message], None],\n    raw: bool = False,\n    **kwargs: Dict[str, Any],\n) -&gt; str:\n    \"\"\"Register a telemetry message callback.\n\n    The callback is called each time a message of the type is received.\n\n    Args:\n        msg_filter (List[proto.message.Message]):\n            A list of message types to register the callback for. E.g.,\n            `[blueye.protocol.DepthTel, blueye.protocol.Imu1Tel]`. If the list is empty, the\n            callback will be registered for all message types.\n        callback (Callable[[str, proto.message.Message], None]):\n            The callback function. It should be minimal and return as fast as possible to not\n            block the telemetry communication. It is called with two arguments, the message\n            type name and the message object.\n        raw (bool, optional):\n            Pass the raw data instead of the deserialized message to the callback function.\n        **kwargs:\n            Additional keyword arguments to pass to the callback function.\n\n    Returns:\n        The UUID of the callback.\n    \"\"\"\n    uuid_hex = self._parent_drone._telemetry_watcher.add_callback(\n        msg_filter, callback, raw, **kwargs\n    )\n    return uuid_hex\n</code></pre>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Telemetry.get","title":"get","text":"<pre><code>get(\n    msg_type: Message, deserialize=True\n) -&gt; Optional[Message | bytes]\n</code></pre> <p>Get the latest telemetry message of the specified type.</p> <p>Parameters:</p> <ul> <li> <code>msg_type</code>               (<code>Message</code>)           \u2013            <p>The message type to get. E.g., blueye.protocol.DepthTel.</p> </li> <li> <code>deserialize</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, the message will be deserialized before being returned. If False, the raw bytes will be returned.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Optional[Message | bytes]</code>           \u2013            <p>The latest message of the specified type, or None if no message has been received yet.</p> </li> </ul> Source code in <code>blueye/sdk/drone.py</code> <pre><code>def get(\n    self, msg_type: proto.message.Message, deserialize=True\n) -&gt; Optional[proto.message.Message | bytes]:\n    \"\"\"Get the latest telemetry message of the specified type.\n\n    Args:\n        msg_type (proto.message.Message):\n            The message type to get. E.g., blueye.protocol.DepthTel.\n        deserialize (bool, optional):\n            If True, the message will be deserialized before being returned. If False, the raw\n            bytes will be returned.\n\n    Returns:\n        The latest message of the specified type, or None if no message has been received yet.\n    \"\"\"\n    try:\n        msg = self._parent_drone._telemetry_watcher.get(msg_type)\n    except KeyError:\n        if version.parse(self._parent_drone.software_version_short) &gt;= version.parse(\"3.3\"):\n            msg = self._parent_drone._req_rep_client.get_telemetry_msg(msg_type).payload.value\n            if msg == b\"\":\n                return None\n        else:\n            return None\n    if deserialize:\n        return msg_type.deserialize(msg)\n    else:\n        return msg\n</code></pre>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Telemetry.remove_msg_callback","title":"remove_msg_callback","text":"<pre><code>remove_msg_callback(callback_id: str) -&gt; Optional[str]\n</code></pre> <p>Remove a telemetry message callback.</p> <p>Parameters:</p> <ul> <li> <code>callback_id</code>               (<code>str</code>)           \u2013            <p>The callback ID from when the callback was registered.</p> </li> </ul> Source code in <code>blueye/sdk/drone.py</code> <pre><code>def remove_msg_callback(self, callback_id: str) -&gt; Optional[str]:\n    \"\"\"Remove a telemetry message callback.\n\n    Args:\n        callback_id (str): The callback ID from when the callback was registered.\n    \"\"\"\n    self._parent_drone._telemetry_watcher.remove_callback(callback_id)\n</code></pre>"},{"location":"reference/blueye/sdk/drone/#blueye.sdk.drone.Telemetry.set_msg_publish_frequency","title":"set_msg_publish_frequency","text":"<pre><code>set_msg_publish_frequency(msg: Message, frequency: float)\n</code></pre> <p>Set the publishing frequency of a specific telemetry message.</p> <p>Parameters:</p> <ul> <li> <code>msg</code>               (<code>Message</code>)           \u2013            <p>The message to set the frequency of. Needs to be one of the                          messages in blueye.protocol that end in Tel, e.g.,                          blueye.protocol.DepthTel.</p> </li> <li> <code>frequency</code>               (<code>float</code>)           \u2013            <p>The frequency in Hz. Valid range is (0 .. 100).</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>If the drone fails to set the frequency.  Possible causes could be a frequency outside the valid range, or an incorrect message type.</p> </li> </ul> Source code in <code>blueye/sdk/drone.py</code> <pre><code>def set_msg_publish_frequency(self, msg: proto.message.Message, frequency: float):\n    \"\"\"Set the publishing frequency of a specific telemetry message.\n\n    Args:\n        msg (proto.message.Message): The message to set the frequency of. Needs to be one of the\n                                     messages in blueye.protocol that end in Tel, e.g.,\n                                     blueye.protocol.DepthTel.\n        frequency (float): The frequency in Hz. Valid range is (0 .. 100).\n\n    Raises:\n        RuntimeError:\n            If the drone fails to set the frequency.  Possible causes could be a frequency\n            outside the valid range, or an incorrect message type.\n    \"\"\"\n    resp = self._parent_drone._req_rep_client.set_telemetry_msg_publish_frequency(\n        msg, frequency\n    )\n    if not resp.success:\n        raise RuntimeError(\"Could not set telemetry message frequency\")\n</code></pre>"},{"location":"reference/blueye/sdk/guestport/","title":"blueye.sdk.guestport","text":""},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport","title":"guestport","text":"<p>Classes:</p> <ul> <li> <code>Gripper</code>           \u2013            <p>Represents a gripper connected to a guest port on the Blueye drone.</p> </li> <li> <code>GuestPortCamera</code>           \u2013            <p>Represents a camera connected to a guest port on the Blueye drone.</p> </li> <li> <code>GuestPortLight</code>           \u2013            <p>Represents a light connected to a guest port on the Blueye drone.</p> </li> <li> <code>Laser</code>           \u2013            <p>Represents a laser connected to a guest port on the Blueye drone.</p> </li> <li> <code>Peripheral</code>           \u2013            <p>Represents a peripheral device connected to a guest port on the Blueye drone.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>device_to_peripheral</code>             \u2013              <p>Convert a device to its corresponding peripheral class.</p> </li> </ul>"},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport.Gripper","title":"Gripper","text":"<pre><code>Gripper(\n    parent_drone: Drone,\n    port_number: GuestPortNumber,\n    device: GuestPortDevice,\n)\n</code></pre> <p>Represents a gripper connected to a guest port on the Blueye drone.</p> <p>Parameters:</p> <ul> <li> <code>parent_drone</code>               (<code>Drone</code>)           \u2013            <p>The parent drone instance.</p> </li> <li> <code>port_number</code>               (<code>GuestPortNumber</code>)           \u2013            <p>The guest port number.</p> </li> <li> <code>device</code>               (<code>GuestPortDevice</code>)           \u2013            <p>The guest port device.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>grip_velocity</code>               (<code>float</code>)           \u2013            <p>Get or set the current grip velocity of the Gripper.</p> </li> <li> <code>rotation_velocity</code>               (<code>float</code>)           \u2013            <p>Get or set the current rotation velocity of the Gripper.</p> </li> </ul> Source code in <code>blueye/sdk/guestport.py</code> <pre><code>def __init__(\n    self, parent_drone: \"Drone\", port_number: bp.GuestPortNumber, device: bp.GuestPortDevice\n):\n    \"\"\"Initialize the Gripper class.\n\n    Args:\n        parent_drone (Drone): The parent drone instance.\n        port_number (bp.GuestPortNumber): The guest port number.\n        device (bp.GuestPortDevice): The guest port device.\n    \"\"\"\n    Peripheral.__init__(self, parent_drone, port_number, device)\n    self._grip_velocity = 0\n    self._rotation_velocity = 0\n</code></pre>"},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport.Gripper.grip_velocity","title":"grip_velocity  <code>property</code> <code>writable</code>","text":"<pre><code>grip_velocity: float\n</code></pre> <p>Get or set the current grip velocity of the Gripper.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>float</code>)           \u2013            <p>The new grip velocity to set. Must be a float between -1.0 and 1.0.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>float</code>           \u2013            <p>The current grip velocity of the Gripper.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If the grip velocity is not between -1.0 and 1.0.</p> </li> </ul>"},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport.Gripper.rotation_velocity","title":"rotation_velocity  <code>property</code> <code>writable</code>","text":"<pre><code>rotation_velocity: float\n</code></pre> <p>Get or set the current rotation velocity of the Gripper.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>float</code>)           \u2013            <p>The new rotation velocity to set. Must be a float between -1.0 and 1.0.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>float</code>           \u2013            <p>The current rotation velocity of the Gripper.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If the rotation velocity is not between -1.0 and 1.0.</p> </li> </ul>"},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport.GuestPortCamera","title":"GuestPortCamera","text":"<pre><code>GuestPortCamera(\n    parent_drone: Drone,\n    port_number: GuestPortNumber,\n    device: GuestPortDevice,\n)\n</code></pre> <p>Represents a camera connected to a guest port on the Blueye drone.</p> <p>Parameters:</p> <ul> <li> <code>parent_drone</code>               (<code>Drone</code>)           \u2013            <p>The parent drone instance.</p> </li> <li> <code>port_number</code>               (<code>GuestPortNumber</code>)           \u2013            <p>The guest port number.</p> </li> <li> <code>device</code>               (<code>GuestPortDevice</code>)           \u2013            <p>The guest port device.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>take_picture</code>             \u2013              <p>Take a still picture and store it locally on the drone.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>bitrate</code>               (<code>int</code>)           \u2013            <p>Set or get the video stream bitrate.</p> </li> <li> <code>bitrate_still_picture</code>               (<code>int</code>)           \u2013            <p>Set or get the bitrate for the still picture stream.</p> </li> <li> <code>exposure</code>               (<code>int</code>)           \u2013            <p>Set or get the camera exposure.</p> </li> <li> <code>framerate</code>               (<code>int</code>)           \u2013            <p>Set or get the camera frame rate.</p> </li> <li> <code>hue</code>               (<code>int</code>)           \u2013            <p>Set or get the camera hue.</p> </li> <li> <code>is_recording</code>               (<code>Optional[bool]</code>)           \u2013            <p>Get or set the camera recording state.</p> </li> <li> <code>record_time</code>               (<code>Optional[int]</code>)           \u2013            <p>Get the duration of the current camera recording.</p> </li> <li> <code>resolution</code>               (<code>int</code>)           \u2013            <p>Set or get the camera resolution.</p> </li> <li> <code>whitebalance</code>               (<code>int</code>)           \u2013            <p>Set or get the camera white balance.</p> </li> </ul> Source code in <code>blueye/sdk/guestport.py</code> <pre><code>def __init__(\n    self, parent_drone: \"Drone\", port_number: bp.GuestPortNumber, device: bp.GuestPortDevice\n):\n    \"\"\"Initialize the GuestPortCamera class.\n\n    Args:\n        parent_drone (Drone): The parent drone instance.\n        port_number (bp.GuestPortNumber): The guest port number.\n        device (bp.GuestPortDevice): The guest port device.\n    \"\"\"\n    Camera.__init__(self, parent_drone, is_guestport_camera=True)\n    Peripheral.__init__(self, parent_drone, port_number, device)\n</code></pre>"},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport.GuestPortCamera.bitrate","title":"bitrate  <code>property</code> <code>writable</code>","text":"<pre><code>bitrate: int\n</code></pre> <p>Set or get the video stream bitrate.</p> <p>Parameters:</p> <ul> <li> <code>bitrate</code>               (<code>int</code>)           \u2013            <p>Set the video stream bitrate in bits, valid values are in range            (1 000 000 .. 16 000 000).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The H264 video stream bitrate.</p> </li> </ul>"},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport.GuestPortCamera.bitrate_still_picture","title":"bitrate_still_picture  <code>property</code> <code>writable</code>","text":"<pre><code>bitrate_still_picture: int\n</code></pre> <p>Set or get the bitrate for the still picture stream.</p> <p>Parameters:</p> <ul> <li> <code>bitrate</code>               (<code>int</code>)           \u2013            <p>Set the still picture stream bitrate in bits, valid values are in range            (1 000 000 .. 300 000 000). Default value is 100 000 000.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The still picture stream bitrate.</p> </li> </ul>"},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport.GuestPortCamera.exposure","title":"exposure  <code>property</code> <code>writable</code>","text":"<pre><code>exposure: int\n</code></pre> <p>Set or get the camera exposure.</p> <p>Parameters:</p> <ul> <li> <code>exposure</code>               (<code>int</code>)           \u2013            <p>Set the camera exposure time. Unit is thousandths of a second,             ie. 5 = 5s/1000. Valid values are in the range (1 .. 5000) or -1             for auto exposure.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The camera exposure.</p> </li> </ul>"},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport.GuestPortCamera.framerate","title":"framerate  <code>property</code> <code>writable</code>","text":"<pre><code>framerate: int\n</code></pre> <p>Set or get the camera frame rate.</p> <p>Parameters:</p> <ul> <li> <code>framerate</code>               (<code>int</code>)           \u2013            <p>Set the camera frame rate in frames per second.              Valid values are 25 or 30.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The camera frame rate.</p> </li> </ul>"},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport.GuestPortCamera.hue","title":"hue  <code>property</code> <code>writable</code>","text":"<pre><code>hue: int\n</code></pre> <p>Set or get the camera hue.</p> <p>Parameters:</p> <ul> <li> <code>hue</code>               (<code>int</code>)           \u2013            <p>Set the camera hue. Valid values are in the range (-40..40).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The camera hue.</p> </li> </ul>"},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport.GuestPortCamera.is_recording","title":"is_recording  <code>property</code> <code>writable</code>","text":"<pre><code>is_recording: Optional[bool]\n</code></pre> <p>Get or set the camera recording state.</p> <p>Parameters:</p> <ul> <li> <code>start_recording</code>               (<code>bool</code>)           \u2013            <p>Set to True to start a recording, set to False to stop the                     current recording.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Optional[bool]</code>           \u2013            <p>True if the camera is currently recording, False if not. Returns None if the SDK hasn't received a RecordState telemetry message.</p> </li> </ul> <p>Warns:</p> <ul> <li> <code>RuntimeWarning</code>             \u2013            <p>If no recording state telemetry data is received.</p> </li> </ul>"},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport.GuestPortCamera.record_time","title":"record_time  <code>property</code>","text":"<pre><code>record_time: Optional[int]\n</code></pre> <p>Get the duration of the current camera recording.</p> <p>Returns:</p> <ul> <li> <code>Optional[int]</code>           \u2013            <p>The length in seconds of the current recording, -1 if the camera is not currently recording. Returns None if the SDK hasn't received a RecordState telemetry message.</p> </li> </ul>"},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport.GuestPortCamera.resolution","title":"resolution  <code>property</code> <code>writable</code>","text":"<pre><code>resolution: int\n</code></pre> <p>Set or get the camera resolution.</p> <p>Parameters:</p> <ul> <li> <code>resolution</code>               (<code>int</code>)           \u2013            <p>Set the camera in vertical pixels. Valid values are 720 or 1080.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The camera resolution.</p> </li> </ul>"},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport.GuestPortCamera.whitebalance","title":"whitebalance  <code>property</code> <code>writable</code>","text":"<pre><code>whitebalance: int\n</code></pre> <p>Set or get the camera white balance.</p> <p>Parameters:</p> <ul> <li> <code>white_balance</code>               (<code>int</code>)           \u2013            <p>Set the camera white balance. Valid values are in the range                  (2800..9300) or -1 for auto white balance.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The camera white balance.</p> </li> </ul>"},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport.GuestPortCamera.take_picture","title":"take_picture","text":"<pre><code>take_picture()\n</code></pre> <p>Take a still picture and store it locally on the drone.</p> <p>These pictures can be downloaded with the Blueye App, or by any WebDAV compatible client.</p> Source code in <code>blueye/sdk/camera.py</code> <pre><code>def take_picture(self):\n    \"\"\"Take a still picture and store it locally on the drone.\n\n    These pictures can be downloaded with the Blueye App, or by any WebDAV compatible client.\n    \"\"\"\n    self._parent_drone._ctrl_client.take_still_picture()\n</code></pre>"},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport.GuestPortLight","title":"GuestPortLight","text":"<pre><code>GuestPortLight(\n    parent_drone: Drone,\n    port_number: GuestPortNumber,\n    device: GuestPortDevice,\n)\n</code></pre> <p>Represents a light connected to a guest port on the Blueye drone.</p> <p>Parameters:</p> <ul> <li> <code>parent_drone</code>               (<code>Drone</code>)           \u2013            <p>The parent drone instance.</p> </li> <li> <code>port_number</code>               (<code>GuestPortNumber</code>)           \u2013            <p>The guest port number.</p> </li> <li> <code>device</code>               (<code>GuestPortDevice</code>)           \u2013            <p>The guest port device.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_intensity</code>             \u2013              <p>Get the intensity of the guest port light.</p> </li> <li> <code>set_intensity</code>             \u2013              <p>Set the intensity of the guest port light.</p> </li> </ul> Source code in <code>blueye/sdk/guestport.py</code> <pre><code>def __init__(\n    self, parent_drone: \"Drone\", port_number: bp.GuestPortNumber, device: bp.GuestPortDevice\n):\n    \"\"\"Initialize the GuestPortLight class.\n\n    Args:\n        parent_drone (Drone): The parent drone instance.\n        port_number (bp.GuestPortNumber): The guest port number.\n        device (bp.GuestPortDevice): The guest port device.\n    \"\"\"\n    Peripheral.__init__(self, parent_drone, port_number, device)\n</code></pre>"},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport.GuestPortLight.get_intensity","title":"get_intensity","text":"<pre><code>get_intensity() -&gt; Optional[float]\n</code></pre> <p>Get the intensity of the guest port light.</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>The intensity of the light (0..1).</p> </li> </ul> Source code in <code>blueye/sdk/guestport.py</code> <pre><code>def get_intensity(self) -&gt; Optional[float]:\n    \"\"\"Get the intensity of the guest port light.\n\n    Returns:\n        The intensity of the light (0..1).\n    \"\"\"\n    return self.parent_drone.telemetry.get(bp.GuestPortLightsTel).lights.value\n</code></pre>"},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport.GuestPortLight.set_intensity","title":"set_intensity","text":"<pre><code>set_intensity(intensity: float)\n</code></pre> <p>Set the intensity of the guest port light.</p> <p>Parameters:</p> <ul> <li> <code>intensity</code>               (<code>float</code>)           \u2013            <p>The intensity of the light (0..1).</p> </li> </ul> Source code in <code>blueye/sdk/guestport.py</code> <pre><code>def set_intensity(self, intensity: float):\n    \"\"\"Set the intensity of the guest port light.\n\n    Args:\n        intensity (float): The intensity of the light (0..1).\n    \"\"\"\n    self.parent_drone._ctrl_client.set_guest_port_lights(intensity)\n</code></pre>"},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport.Laser","title":"Laser","text":"<pre><code>Laser(\n    parent_drone: Drone,\n    port_number: GuestPortNumber,\n    device: GuestPortDevice,\n)\n</code></pre> <p>Represents a laser connected to a guest port on the Blueye drone.</p> <p>Parameters:</p> <ul> <li> <code>parent_drone</code>               (<code>Drone</code>)           \u2013            <p>The parent drone instance.</p> </li> <li> <code>port_number</code>               (<code>GuestPortNumber</code>)           \u2013            <p>The guest port number.</p> </li> <li> <code>device</code>               (<code>GuestPortDevice</code>)           \u2013            <p>The guest port device.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_intensity</code>             \u2013              <p>Get the current intensity of the laser.</p> </li> <li> <code>set_intensity</code>             \u2013              <p>Set the intensity of the laser.</p> </li> </ul> Source code in <code>blueye/sdk/guestport.py</code> <pre><code>def __init__(\n    self, parent_drone: \"Drone\", port_number: bp.GuestPortNumber, device: bp.GuestPortDevice\n):\n    \"\"\"Initialize the Laser class.\n\n    Args:\n        parent_drone (Drone): The parent drone instance.\n        port_number (bp.GuestPortNumber): The guest port number.\n        device (bp.GuestPortDevice): The guest port device.\n    \"\"\"\n    Peripheral.__init__(self, parent_drone, port_number, device)\n</code></pre>"},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport.Laser.get_intensity","title":"get_intensity","text":"<pre><code>get_intensity() -&gt; Optional[float]\n</code></pre> <p>Get the current intensity of the laser.</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>The current intensity of the laser.</p> </li> </ul> Source code in <code>blueye/sdk/guestport.py</code> <pre><code>def get_intensity(self) -&gt; Optional[float]:\n    \"\"\"Get the current intensity of the laser.\n\n    Returns:\n        The current intensity of the laser.\n    \"\"\"\n    telemetry_msg = self.parent_drone.telemetry.get(bp.LaserTel)\n    if telemetry_msg is None:\n        return None\n    else:\n        return telemetry_msg.laser.value\n</code></pre>"},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport.Laser.set_intensity","title":"set_intensity","text":"<pre><code>set_intensity(intensity: float)\n</code></pre> <p>Set the intensity of the laser.</p> <p>If the laser does not support dimming but only on and off, a value of 0 turns the laser off, and any value above 0 turns the laser on.</p> <p>Parameters:</p> <ul> <li> <code>intensity</code>               (<code>float</code>)           \u2013            <p>The intensity of the laser (0..1).</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If the intensity is not between 0 and 1.</p> </li> </ul> Source code in <code>blueye/sdk/guestport.py</code> <pre><code>def set_intensity(self, intensity: float):\n    \"\"\"Set the intensity of the laser.\n\n    If the laser does not support dimming but only on and off, a value of 0 turns the laser off,\n    and any value above 0 turns the laser on.\n\n    Args:\n        intensity (float): The intensity of the laser (0..1).\n\n    Raises:\n        ValueError: If the intensity is not between 0 and 1.\n    \"\"\"\n    if intensity &lt; 0 or intensity &gt; 1:\n        raise ValueError(\"Laser intensity must be between 0 and 1.\")\n    self.parent_drone._ctrl_client.set_laser_intensity(intensity)\n</code></pre>"},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport.Peripheral","title":"Peripheral","text":"<pre><code>Peripheral(\n    parent_drone: Drone,\n    port_number: GuestPortNumber,\n    device: GuestPortDevice,\n)\n</code></pre> <p>Represents a peripheral device connected to a guest port on the Blueye drone.</p> <p>Parameters:</p> <ul> <li> <code>parent_drone</code>               (<code>Drone</code>)           \u2013            <p>The parent drone instance.</p> </li> <li> <code>port_number</code>               (<code>GuestPortNumber</code>)           \u2013            <p>The guest port number.</p> </li> <li> <code>device</code>               (<code>GuestPortDevice</code>)           \u2013            <p>The guest port device.</p> </li> </ul> Source code in <code>blueye/sdk/guestport.py</code> <pre><code>def __init__(\n    self, parent_drone: \"Drone\", port_number: bp.GuestPortNumber, device: bp.GuestPortDevice\n):\n    \"\"\"Initialize the Peripheral class.\n\n    Args:\n        parent_drone (Drone): The parent drone instance.\n        port_number (bp.GuestPortNumber): The guest port number.\n        device (bp.GuestPortDevice): The guest port device.\n    \"\"\"\n    self.parent_drone = parent_drone\n    self.port_number: bp.GuestPortNumber = port_number\n    self.name: str = device.name\n    self.manufacturer: str = device.manufacturer\n    self.serial_number: str = device.serial_number\n    self.depth_rating: float = device.depth_rating\n    self.required_blunux_version: str = device.required_blunux_version\n    self.device_id: bp.GuestPortDeviceID = device.device_id\n    if self.required_blunux_version != \"\":\n        if version.parse(self.required_blunux_version) &gt; version.parse(\n            parent_drone.software_version_short\n        ):\n            logger.warning(\n                f\"Peripheral {self.name} requires Blunux version \"\n                f\"{self.required_blunux_version}, but the drone is running \"\n                f\"{parent_drone.software_version_short}\"\n            )\n</code></pre>"},{"location":"reference/blueye/sdk/guestport/#blueye.sdk.guestport.device_to_peripheral","title":"device_to_peripheral","text":"<pre><code>device_to_peripheral(\n    parent_drone: Drone,\n    port_number: GuestPortNumber,\n    device: GuestPortDevice,\n) -&gt; Peripheral\n</code></pre> <p>Convert a device to its corresponding peripheral class.</p> <p>Parameters:</p> <ul> <li> <code>parent_drone</code>               (<code>Drone</code>)           \u2013            <p>The parent drone instance.</p> </li> <li> <code>port_number</code>               (<code>GuestPortNumber</code>)           \u2013            <p>The guest port number.</p> </li> <li> <code>device</code>               (<code>GuestPortDevice</code>)           \u2013            <p>The guest port device.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Peripheral</code>           \u2013            <p>The corresponding peripheral class instance.</p> </li> </ul> Source code in <code>blueye/sdk/guestport.py</code> <pre><code>def device_to_peripheral(\n    parent_drone: \"Drone\", port_number: bp.GuestPortNumber, device: bp.GuestPortDevice\n) -&gt; Peripheral:\n    \"\"\"Convert a device to its corresponding peripheral class.\n\n    Args:\n        parent_drone (Drone): The parent drone instance.\n        port_number (bp.GuestPortNumber): The guest port number.\n        device (bp.GuestPortDevice): The guest port device.\n\n    Returns:\n        The corresponding peripheral class instance.\n    \"\"\"\n    logger.debug(f\"Found a {device.name} at port {port_number}\")\n    if device.device_id == bp.GuestPortDeviceID.GUEST_PORT_DEVICE_ID_BLUEYE_CAM:\n        peripheral = GuestPortCamera(parent_drone, port_number, device)\n    elif (\n        device.device_id == bp.GuestPortDeviceID.GUEST_PORT_DEVICE_ID_BLUEYE_LIGHT\n        or device.device_id == bp.GuestPortDeviceID.GUEST_PORT_DEVICE_ID_BLUEYE_LIGHT_PAIR\n        or device.device_id == bp.GuestPortDeviceID.GUEST_PORT_DEVICE_ID_BLUE_ROBOTICS_LUMEN\n    ):\n        peripheral = GuestPortLight(parent_drone, port_number, device)\n    elif (\n        device.device_id == bp.GuestPortDeviceID.GUEST_PORT_DEVICE_ID_BLUE_ROBOTICS_NEWTON\n        or device.device_id\n        == bp.GuestPortDeviceID.GUEST_PORT_DEVICE_ID_BLUE_ROBOTICS_DETACHABLE_NEWTON\n        or device.device_id == bp.GuestPortDeviceID.GUEST_PORT_DEVICE_ID_BLUEPRINT_LAB_REACH_ALPHA\n    ):\n        peripheral = Gripper(parent_drone, port_number, device)\n    elif (\n        device.device_id == bp.GuestPortDeviceID.GUEST_PORT_DEVICE_ID_LASER_TOOLS_SEA_BEAM\n        or device.device_id == bp.GuestPortDeviceID.GUEST_PORT_DEVICE_ID_SPOT_X_LASER_SCALERS\n    ):\n        peripheral = Laser(parent_drone, port_number, device)\n    else:\n        peripheral = Peripheral(parent_drone, port_number, device)\n    return peripheral\n</code></pre>"},{"location":"reference/blueye/sdk/logs/","title":"blueye.sdk.logs","text":""},{"location":"reference/blueye/sdk/logs/#blueye.sdk.logs","title":"logs","text":"<p>Classes:</p> <ul> <li> <code>LegacyLogFile</code>           \u2013            <p>This class is a container for a log file stored on the drone</p> </li> <li> <code>LegacyLogs</code>           \u2013            <p>This class is an index of the legacy csv log files stored on the drone</p> </li> <li> <code>LogFile</code>           \u2013            </li> <li> <code>LogStream</code>           \u2013            <p>Class for streaming a log</p> </li> <li> <code>Logs</code>           \u2013            </li> </ul> <p>Functions:</p> <ul> <li> <code>decompress_log</code>             \u2013              <p>Decompress a log file</p> </li> <li> <code>human_readable_filesize</code>             \u2013              <p>Convert bytes to human readable string</p> </li> </ul>"},{"location":"reference/blueye/sdk/logs/#blueye.sdk.logs.LegacyLogFile","title":"LegacyLogFile","text":"<pre><code>LegacyLogFile(maxdepth, name, timestamp, binsize, ip)\n</code></pre> <p>This class is a container for a log file stored on the drone</p> <p>The drone lists the file name, max depth, start time, and file size for each log, and you can show this information by printing the log object, eg. on a Drone object called <code>myDrone</code>:</p> <pre><code>print(myDrone.logs[0])\n</code></pre> <p>or, if you want to display the header you can format the object with <code>with_header</code>:</p> <pre><code>print(f\"{myDrone.logs[0]:with_header}\")\n</code></pre> <p>Calling the download() method on a log object will pull the CSV (Comma Separated Value) file from the drone to your local filesystem.</p> <p>Methods:</p> <ul> <li> <code>download</code>             \u2013              <p>Download the specified log to your local file system</p> </li> </ul> Source code in <code>blueye/sdk/logs.py</code> <pre><code>def __init__(self, maxdepth, name, timestamp, binsize, ip):\n    self.maxdepth = maxdepth\n    self.name = name\n    self.timestamp: datetime = dateutil.parser.isoparse(timestamp)\n    self.binsize = binsize\n    self.download_path = \"http://\" + ip + \"/logcsv/\" + name\n    self._formatted_values = [\n        self.name,\n        self.timestamp.strftime(\"%d. %b %Y %H:%M\"),\n        f\"{self.maxdepth/1000:.2f} m\",\n        human_readable_filesize(self.binsize),\n    ]\n</code></pre>"},{"location":"reference/blueye/sdk/logs/#blueye.sdk.logs.LegacyLogFile.download","title":"download","text":"<pre><code>download(\n    output_path=None,\n    output_name=None,\n    downsample_divisor=10,\n)\n</code></pre> <p>Download the specified log to your local file system</p> <p>If you specify an output_path the log file will be downloaded to that directory instead of the current one.</p> <p>Specifying output_name will overwrite the default file name with whatever you have specified (be sure to include the .csv extension).</p> <p>The drone samples the log content at 10 Hz, and by default this function downsamples this rate to 1 Hz.</p> Source code in <code>blueye/sdk/logs.py</code> <pre><code>def download(self, output_path=None, output_name=None, downsample_divisor=10):\n    \"\"\"\n    Download the specified log to your local file system\n\n    If you specify an output_path the log file will be downloaded to that directory\n    instead of the current one.\n\n    Specifying output_name will overwrite the default file name with whatever you\n    have specified (be sure to include the .csv extension).\n\n    The drone samples the log content at 10 Hz, and by default this function downsamples this\n    rate to 1 Hz.\n    \"\"\"\n    log = requests.get(self.download_path, params={\"divisor\": downsample_divisor}).content\n    if output_path is None:\n        output_path = \"./\"\n    if output_name is None:\n        output_name = self.name\n    with open(f\"{output_path}{output_name}\", \"wb\") as f:\n        f.write(log)\n</code></pre>"},{"location":"reference/blueye/sdk/logs/#blueye.sdk.logs.LegacyLogs","title":"LegacyLogs","text":"<pre><code>LegacyLogs(parent_drone, auto_download_index=False)\n</code></pre> <p>This class is an index of the legacy csv log files stored on the drone</p> <p>To show the available logs you simply print this object, ie. if your Drone object is called <code>myDrone</code>, you can do:</p> <pre><code>print(myDrone.legacy_logs)\n</code></pre> <p>This will print a list of all available logs, with some of their metadata, such as name and maxdepth.</p> <p>You can access logfile objects either by index or by name. Eg. if you want the first logfile in the list you can do <code>myDrone.logs[0]</code>, or if you want some particular log you can do <code>myDrone.logs[\"exampleName0001.csv\"]</code>. You can even give it a slice, so if you want the last 10 logs you can do <code>myDrone.logs[-10:]</code>.</p> <p>Methods:</p> <ul> <li> <code>refresh_log_index</code>             \u2013              <p>Refresh the log index from the drone</p> </li> </ul> Source code in <code>blueye/sdk/logs.py</code> <pre><code>def __init__(self, parent_drone, auto_download_index=False):\n    self.ip = parent_drone._ip\n    self._parent_drone = parent_drone\n    self.index_downloaded = False\n    if auto_download_index:\n        self.refresh_log_index()\n    else:\n        self._logs = {}\n</code></pre>"},{"location":"reference/blueye/sdk/logs/#blueye.sdk.logs.LegacyLogs.refresh_log_index","title":"refresh_log_index","text":"<pre><code>refresh_log_index(get_all_logs=False)\n</code></pre> <p>Refresh the log index from the drone</p> <p>This is method is run on the first log access by default, but if you would like to check for new log files it can be called at any time.</p> <p>Pass with <code>get_all_logs=True</code> to include logs that are not classified as dives.</p> Source code in <code>blueye/sdk/logs.py</code> <pre><code>def refresh_log_index(self, get_all_logs=False):\n    \"\"\"Refresh the log index from the drone\n\n    This is method is run on the first log access by default, but if you would like to check\n    for new log files it can be called at any time.\n\n    Pass with `get_all_logs=True` to include logs that are not classified as dives.\n    \"\"\"\n    if not self._parent_drone.connected:\n        raise ConnectionError(\n            \"The connection to the drone is not established, try calling the connect method \"\n            \"before retrying\"\n        )\n    list_of_logs_in_dictionaries = self._get_list_of_logs_from_drone(get_all_logs)\n    self._logs = self._build_log_files_from_dictionary(list_of_logs_in_dictionaries)\n    self.index_downloaded = True\n</code></pre>"},{"location":"reference/blueye/sdk/logs/#blueye.sdk.logs.LogFile","title":"LogFile","text":"<pre><code>LogFile(\n    name: str,\n    is_dive: bool,\n    filesize: int,\n    start_time: int,\n    max_depth_magnitude: int,\n    ip: str,\n)\n</code></pre> <p>Methods:</p> <ul> <li> <code>download</code>             \u2013              <p>Download a log file from the drone</p> </li> <li> <code>parse_to_stream</code>             \u2013              <p>Parse the log file to a stream</p> </li> </ul> Source code in <code>blueye/sdk/logs.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    is_dive: bool,\n    filesize: int,\n    start_time: int,\n    max_depth_magnitude: int,\n    ip: str,\n):\n    self.name = name\n    self.is_dive = is_dive\n    self.filesize = filesize\n    self.start_time: datetime = datetime.fromtimestamp(start_time, tz=timezone.utc)\n    self.max_depth_magnitude = max_depth_magnitude\n    self.download_url = f\"http://{ip}/logs/{self.name}/binlog\"\n    self.content = None\n    self._formatted_values = [\n        self.name,\n        self.start_time.strftime(\"%d. %b %Y %H:%M\"),\n        f\"{self.max_depth_magnitude} m\",\n        human_readable_filesize(self.filesize),\n    ]\n</code></pre>"},{"location":"reference/blueye/sdk/logs/#blueye.sdk.logs.LogFile.download","title":"download","text":"<pre><code>download(\n    output_path: Optional[Path | str] = None,\n    write_to_file: bool = True,\n    timeout: float = 1,\n    overwrite_cache: bool = False,\n) -&gt; bytes\n</code></pre> <p>Download a log file from the drone</p> <p>Arguments:</p> <ul> <li><code>output_path</code>:     Path to write the log file to. If <code>None</code>, the log will be written to the     current working directory. If the path is a directory, the log will be     downloaded to that directory with its original name. Else the log will be     downloaded to the specified path.</li> <li><code>write_to_file</code>:     If True, the log will be written to the specified path. If False, the     log will only be returned as a bytes object.</li> <li><code>timeout</code>:     Seconds to wait for response</li> <li><code>overwrite_cache</code>:     If True, the log will be downloaded even if it is already been downloaded.</li> </ul> <p>Returns:</p> <p>The compressed log file as a bytes object.</p> Source code in <code>blueye/sdk/logs.py</code> <pre><code>def download(\n    self,\n    output_path: Optional[Path | str] = None,\n    write_to_file: bool = True,\n    timeout: float = 1,\n    overwrite_cache: bool = False,\n) -&gt; bytes:\n    \"\"\"Download a log file from the drone\n\n    *Arguments*:\n\n    * `output_path`:\n        Path to write the log file to. If `None`, the log will be written to the\n        current working directory. If the path is a directory, the log will be\n        downloaded to that directory with its original name. Else the log will be\n        downloaded to the specified path.\n    * `write_to_file`:\n        If True, the log will be written to the specified path. If False, the\n        log will only be returned as a bytes object.\n    * `timeout`:\n        Seconds to wait for response\n    * `overwrite_cache`:\n        If True, the log will be downloaded even if it is already been downloaded.\n\n    *Returns*:\n\n    The compressed log file as a bytes object.\n    \"\"\"\n    if self.content is None or overwrite_cache:\n        self.content = requests.get(self.download_url, timeout=timeout).content\n    if write_to_file:\n        if output_path is None:\n            output_path = Path(f\"{self.name}.bez\")\n        else:\n            if type(output_path) == str:\n                output_path = Path(output_path)\n            if output_path.is_dir():\n                output_path = output_path.joinpath(f\"{self.name}.bez\")\n        with open(output_path, \"wb\") as f:\n            f.write(self.content)\n    return self.content\n</code></pre>"},{"location":"reference/blueye/sdk/logs/#blueye.sdk.logs.LogFile.parse_to_stream","title":"parse_to_stream","text":"<pre><code>parse_to_stream() -&gt; LogStream\n</code></pre> <p>Parse the log file to a stream</p> <p>Will download the log if it is not already downloaded.</p> <p>Returns:</p> <p>A <code>LogStream</code> object</p> Source code in <code>blueye/sdk/logs.py</code> <pre><code>def parse_to_stream(self) -&gt; LogStream:\n    \"\"\"Parse the log file to a stream\n\n    Will download the log if it is not already downloaded.\n\n    *Returns*:\n\n    A `LogStream` object\n    \"\"\"\n    return LogStream(self.download(write_to_file=False))\n</code></pre>"},{"location":"reference/blueye/sdk/logs/#blueye.sdk.logs.LogStream","title":"LogStream","text":"<pre><code>LogStream(log: bytes, decompress: bool = True)\n</code></pre> <p>Class for streaming a log</p> <p>Creates a stream from a downloaded log file. Iterate over the object to get the next log record.</p> Source code in <code>blueye/sdk/logs.py</code> <pre><code>def __init__(self, log: bytes, decompress: bool = True) -&gt; Iterator[\n    Tuple[\n        proto.datetime_helpers.DatetimeWithNanoseconds,  # Real time clock\n        timedelta,  # Time since first message\n        proto.message.MessageMeta,  # Message type\n        proto.message.Message,  # Message contents\n    ]\n]:\n    if decompress:\n        self.decompressed_log = decompress_log(log)\n    else:\n        self.decompressed_log = log\n    self.pos = 0\n    self.start_monotonic: proto.datetime_helpers.DatetimeWithNanoseconds = 0\n</code></pre>"},{"location":"reference/blueye/sdk/logs/#blueye.sdk.logs.Logs","title":"Logs","text":"<pre><code>Logs(parent_drone, auto_download_index=False)\n</code></pre> <p>Methods:</p> <ul> <li> <code>filter</code>             \u2013              <p>Return a new Logs object with only those matching the filter</p> </li> <li> <code>refresh_log_index</code>             \u2013              <p>Refresh the log index from the drone</p> </li> </ul> Source code in <code>blueye/sdk/logs.py</code> <pre><code>def __init__(self, parent_drone, auto_download_index=False):\n    self._parent_drone = parent_drone\n    self.auto_download_index = auto_download_index\n    self.index_downloaded = False\n    self._logs = {}\n    if auto_download_index:\n        self.refresh_log_index()\n</code></pre>"},{"location":"reference/blueye/sdk/logs/#blueye.sdk.logs.Logs.filter","title":"filter","text":"<pre><code>filter(filter_func: Callable[[LogFile], bool]) -&gt; Logs\n</code></pre> <p>Return a new Logs object with only those matching the filter</p> <p>Eg. to get logs classified as a dive: <pre><code>dive_logs = myDrone.logs.filter(lambda log: log.is_dive)\n</code></pre></p> <p>or to get all logs with a max depth greater than 10m: <pre><code>deep_logs = myDrone.logs.filter(lambda log: log.max_depth_magnitude &gt; 10)\n</code></pre></p> Source code in <code>blueye/sdk/logs.py</code> <pre><code>def filter(self, filter_func: Callable[[LogFile], bool]) -&gt; Logs:\n    \"\"\"Return a new Logs object with only those matching the filter\n\n    Eg. to get logs classified as a dive:\n    ```\n    dive_logs = myDrone.logs.filter(lambda log: log.is_dive)\n    ```\n\n    or to get all logs with a max depth greater than 10m:\n    ```\n    deep_logs = myDrone.logs.filter(lambda log: log.max_depth_magnitude &gt; 10)\n    ```\n    \"\"\"\n    if not self.index_downloaded:\n        self.refresh_log_index()\n    filtered_logs = Logs(self._parent_drone)\n    filtered_logs.index_downloaded = True\n    for log in self:\n        if filter_func(log):\n            filtered_logs._logs[log.name] = log\n    return filtered_logs\n</code></pre>"},{"location":"reference/blueye/sdk/logs/#blueye.sdk.logs.Logs.refresh_log_index","title":"refresh_log_index","text":"<pre><code>refresh_log_index()\n</code></pre> <p>Refresh the log index from the drone</p> <p>This is method is run on the first log access by default, but if you would like to check for new log files it can be called at any time.</p> Source code in <code>blueye/sdk/logs.py</code> <pre><code>def refresh_log_index(self):\n    \"\"\"Refresh the log index from the drone\n\n    This is method is run on the first log access by default, but if you would like to check\n    for new log files it can be called at any time.\n    \"\"\"\n    if not self._parent_drone.connected:\n        raise ConnectionError(\n            \"The connection to the drone is not established, try calling the connect method \"\n            \"before retrying\"\n        )\n    logger.debug(\"Refreshing log index\")\n    logs_endpoint = f\"http://{self._parent_drone._ip}/logs\"\n    logs: List[dict] = requests.get(logs_endpoint).json()\n\n    if version.parse(self._parent_drone.software_version_short) &lt; version.parse(\"3.3\"):\n        # Extend index with dive info, sends a request for each log file so can be quite slow\n        # for drones with many logs. Not necessary for Blunux &gt;= 3.3 as dive info is included in\n        # the index.\n        logger.debug(f\"Getting dive info for {len(logs)} logs\")\n        for index, log in enumerate(logs):\n            dive_info = requests.get(f\"{logs_endpoint}/{log['name']}/dive_info\").json()\n            logs[index].update(dive_info)\n\n    # Instantiate log objects for each log\n    logger.debug(f\"Creating log objects for {len(logs)} logs\")\n    for log in logs:\n        if log[\"has_binlog\"]:\n            self._logs[log[\"name\"]] = LogFile(\n                log[\"name\"],\n                log[\"is_dive\"],\n                log[\"binlog_size\"],\n                log[\"start_time\"],\n                log[\"max_depth_magnitude\"],\n                self._parent_drone._ip,\n            )\n        else:\n            logger.info(f\"Log {log['name']} does not have a binlog, ignoring\")\n    self.index_downloaded = True\n</code></pre>"},{"location":"reference/blueye/sdk/logs/#blueye.sdk.logs.decompress_log","title":"decompress_log","text":"<pre><code>decompress_log(log: bytes) -&gt; bytes\n</code></pre> <p>Decompress a log file</p> Source code in <code>blueye/sdk/logs.py</code> <pre><code>def decompress_log(log: bytes) -&gt; bytes:\n    \"\"\"Decompress a log file\"\"\"\n    return zlib.decompressobj(wbits=zlib.MAX_WBITS | 16).decompress(log)\n</code></pre>"},{"location":"reference/blueye/sdk/logs/#blueye.sdk.logs.human_readable_filesize","title":"human_readable_filesize","text":"<pre><code>human_readable_filesize(binsize: int) -&gt; str\n</code></pre> <p>Convert bytes to human readable string</p> Source code in <code>blueye/sdk/logs.py</code> <pre><code>def human_readable_filesize(binsize: int) -&gt; str:\n    \"\"\"Convert bytes to human readable string\"\"\"\n    suffix = \"B\"\n    num = binsize\n    for unit in [\"\", \"Ki\", \"Mi\"]:\n        if abs(num) &lt; 1024.0:\n            return f\"{num:3.1f} {unit}{suffix}\"\n        num /= 1024.0\n    return f\"{num:.1f} Gi{suffix}\"\n</code></pre>"},{"location":"reference/blueye/sdk/motion/","title":"blueye.sdk.motion","text":""},{"location":"reference/blueye/sdk/motion/#blueye.sdk.motion","title":"motion","text":"<p>Classes:</p> <ul> <li> <code>Motion</code>           \u2013            <p>Control the motion of the drone, and set automatic control modes</p> </li> </ul>"},{"location":"reference/blueye/sdk/motion/#blueye.sdk.motion.Motion","title":"Motion","text":"<pre><code>Motion(parent_drone)\n</code></pre> <p>Control the motion of the drone, and set automatic control modes</p> <p>Motion can be set one degree of freedom at a time by using the 4 motion properties (surge, sway, heave and yaw) or for all 4 degrees of freedom in one go through the <code>send_thruster_setpoint</code> method.</p> <p>Methods:</p> <ul> <li> <code>send_thruster_setpoint</code>             \u2013              <p>Control the thrusters of the drone</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>auto_altitude_active</code>               (<code>Optional[bool]</code>)           \u2013            <p>Enable or disable the auto altitude control mode</p> </li> <li> <code>auto_depth_active</code>               (<code>Optional[bool]</code>)           \u2013            <p>Enable or disable the auto depth control mode</p> </li> <li> <code>auto_heading_active</code>               (<code>Optional[bool]</code>)           \u2013            <p>Enable or disable the auto heading control mode</p> </li> <li> <code>boost</code>               (<code>float</code>)           \u2013            <p>Get or set the boost gain</p> </li> <li> <code>current_thruster_setpoints</code>           \u2013            <p>Returns the current setpoints for the thrusters</p> </li> <li> <code>heave</code>               (<code>float</code>)           \u2013            <p>Set force reference for the heave direction</p> </li> <li> <code>slow</code>               (<code>float</code>)           \u2013            <p>Get or set the \"slow gain\" (inverse of boost)</p> </li> <li> <code>station_keeping_active</code>               (<code>Optional[bool]</code>)           \u2013            <p>Enable or disable the station keeping control mode</p> </li> <li> <code>surge</code>               (<code>float</code>)           \u2013            <p>Set force reference for the surge direction</p> </li> <li> <code>sway</code>               (<code>float</code>)           \u2013            <p>Set force reference for the sway direction</p> </li> <li> <code>weather_vaning_active</code>               (<code>Optional[bool]</code>)           \u2013            <p>Enable or disable the weather vaning control mode</p> </li> <li> <code>yaw</code>               (<code>float</code>)           \u2013            <p>Set force reference for the yaw direction</p> </li> </ul> Source code in <code>blueye/sdk/motion.py</code> <pre><code>def __init__(self, parent_drone):\n    self._parent_drone = parent_drone\n    self.thruster_lock = threading.Lock()\n    self._current_thruster_setpoints = {\"surge\": 0, \"sway\": 0, \"heave\": 0, \"yaw\": 0}\n    self._current_boost_setpoints = {\"slow\": 0, \"boost\": 0}\n</code></pre>"},{"location":"reference/blueye/sdk/motion/#blueye.sdk.motion.Motion.auto_altitude_active","title":"auto_altitude_active  <code>property</code> <code>writable</code>","text":"<pre><code>auto_altitude_active: Optional[bool]\n</code></pre> <p>Enable or disable the auto altitude control mode</p> <p>When auto altitude is active, the drone will attempt to maintain its current altitude above the seabed. Input for the heave direction to the thruster_setpoint function specifies a speed set point instead of a force set point. A control loop on the drone will then attempt to maintain the wanted speed in the heave direction as long as auto altitude is active.</p> <p>Arguments: * Enable (bool): Activate auto altitude mode if true, de-activate if false. If the drone                  does not have a valid altitude reading this command will be ignored.</p> <p>Returns:</p> <ul> <li>Auto altitude state (bool): True if auto altitude is active, false if not</li> </ul>"},{"location":"reference/blueye/sdk/motion/#blueye.sdk.motion.Motion.auto_depth_active","title":"auto_depth_active  <code>property</code> <code>writable</code>","text":"<pre><code>auto_depth_active: Optional[bool]\n</code></pre> <p>Enable or disable the auto depth control mode</p> <p>When auto depth is active, input for the heave direction to the thruster_setpoint function specifies a speed set point instead of a force set point. A control loop on the drone will then attempt to maintain the wanted speed in the heave direction as long as auto depth is active.</p> <p>Arguments:</p> <ul> <li>Enable (bool): Activate auto depth mode if true, de-activate if false</li> </ul> <p>Returns:</p> <ul> <li>Auto depth state (bool): True if auto depth is active, false if not</li> </ul>"},{"location":"reference/blueye/sdk/motion/#blueye.sdk.motion.Motion.auto_heading_active","title":"auto_heading_active  <code>property</code> <code>writable</code>","text":"<pre><code>auto_heading_active: Optional[bool]\n</code></pre> <p>Enable or disable the auto heading control mode</p> <p>When auto heading is active, input for the yaw direction to the thruster_setpoint function specifies a angular speed set point instead of a moment set point. A control loop on the drone will then attempt to maintain the wanted angular velocity in the yaw direction as long as auto heading is active.</p> <p>Arguments:</p> <ul> <li>Enable (bool): Activate auto heading mode if true, de-activate if false</li> </ul> <p>Returns:</p> <ul> <li>Auto heading state (bool): True if auto heading mode is active, false if not</li> </ul>"},{"location":"reference/blueye/sdk/motion/#blueye.sdk.motion.Motion.boost","title":"boost  <code>property</code> <code>writable</code>","text":"<pre><code>boost: float\n</code></pre> <p>Get or set the boost gain</p> <p>Arguments:</p> <ul> <li>boost_gain (float): Range from 0 to 1.</li> </ul>"},{"location":"reference/blueye/sdk/motion/#blueye.sdk.motion.Motion.current_thruster_setpoints","title":"current_thruster_setpoints  <code>property</code> <code>writable</code>","text":"<pre><code>current_thruster_setpoints\n</code></pre> <p>Returns the current setpoints for the thrusters</p> <p>We maintain this state in the SDK since the drone expects to receive all of the setpoints at once.</p> <p>For setting the setpoints you should use the dedicated properties/functions for that, trying to set them directly with this property will raise an AttributeError.</p>"},{"location":"reference/blueye/sdk/motion/#blueye.sdk.motion.Motion.heave","title":"heave  <code>property</code> <code>writable</code>","text":"<pre><code>heave: float\n</code></pre> <p>Set force reference for the heave direction</p> <p>Arguments:</p> <ul> <li>heave (float): Force set point in the heave direction in range &lt;-1, 1&gt;,                      a positive set point makes the drone move downwards</li> </ul>"},{"location":"reference/blueye/sdk/motion/#blueye.sdk.motion.Motion.slow","title":"slow  <code>property</code> <code>writable</code>","text":"<pre><code>slow: float\n</code></pre> <p>Get or set the \"slow gain\" (inverse of boost)</p> <p>Arguments:</p> <ul> <li>slow_gain (float): Range from 0 to 1.</li> </ul>"},{"location":"reference/blueye/sdk/motion/#blueye.sdk.motion.Motion.station_keeping_active","title":"station_keeping_active  <code>property</code> <code>writable</code>","text":"<pre><code>station_keeping_active: Optional[bool]\n</code></pre> <p>Enable or disable the station keeping control mode</p> <p>When station keeping is active, the drone will attempt to maintain its current position and orientation in the water as long as the mode is active.</p> <p>Arguments:</p> <ul> <li>Enable (bool): Activate station keeping mode if true, de-activate if false</li> </ul> <p>Returns:</p> <ul> <li>Station keeping state (bool): True if station keeping mode is active, false if not</li> </ul>"},{"location":"reference/blueye/sdk/motion/#blueye.sdk.motion.Motion.surge","title":"surge  <code>property</code> <code>writable</code>","text":"<pre><code>surge: float\n</code></pre> <p>Set force reference for the surge direction</p> <p>Arguments:</p> <ul> <li>surge (float): Force set point in the surge direction in range &lt;-1, 1&gt;,                      a positive set point makes the drone move forward</li> </ul>"},{"location":"reference/blueye/sdk/motion/#blueye.sdk.motion.Motion.sway","title":"sway  <code>property</code> <code>writable</code>","text":"<pre><code>sway: float\n</code></pre> <p>Set force reference for the sway direction</p> <p>Arguments:</p> <ul> <li>sway (float): Force set point in the sway direction in range &lt;-1, 1&gt;,                     a positive set point makes the drone move to the right</li> </ul>"},{"location":"reference/blueye/sdk/motion/#blueye.sdk.motion.Motion.weather_vaning_active","title":"weather_vaning_active  <code>property</code> <code>writable</code>","text":"<pre><code>weather_vaning_active: Optional[bool]\n</code></pre> <p>Enable or disable the weather vaning control mode</p> <p>When weather vaning is active, the drone will attempt to maintain its current position in the water and orient itself parallel to the current.</p> <p>Arguments:</p> <ul> <li>Enable (bool): Activate weather vaning mode if true, de-activate if false. If the drone                  does not have a valid altitude reading this command will be ignored.</li> </ul> <p>Returns:</p> <ul> <li>Weather vaning state (bool): True if weather vaning mode is active, false if not</li> </ul>"},{"location":"reference/blueye/sdk/motion/#blueye.sdk.motion.Motion.yaw","title":"yaw  <code>property</code> <code>writable</code>","text":"<pre><code>yaw: float\n</code></pre> <p>Set force reference for the yaw direction</p> <p>Arguments:</p> <ul> <li>yaw (float): Moment set point in the sway direction in range &lt;-1, 1&gt;,                    a positive set point makes the drone rotate clockwise.</li> </ul>"},{"location":"reference/blueye/sdk/motion/#blueye.sdk.motion.Motion.send_thruster_setpoint","title":"send_thruster_setpoint","text":"<pre><code>send_thruster_setpoint(surge, sway, heave, yaw)\n</code></pre> <p>Control the thrusters of the drone</p> <p>Set reference values between -1 and 1 for each controllable degree of freedom on the drone. The reference values are mapped linearly to a thruster force, a set point of -1 correspons to maximum negative force and a set point of 1 corresponds to maximum positive force. For the yaw direction the reference is a moment not a force, as the yaw direction is rotational not translational.</p> <p>Arguments:</p> <ul> <li>surge (float): Force set point in the surge direction in range &lt;-1, 1&gt;,                      a positive set point makes the drone move forward</li> <li>sway (float): Force set point in the sway direction in range &lt;-1, 1&gt;,                      a positive set point makes the drone move to the right</li> <li>heave (float): Force set point in the heave direction in range &lt;-1, 1&gt;,                      a positive set point makes the drone move down.</li> <li>yaw (float): Moment set point in the yaw direction in range &lt;-1, 1&gt;,                      a positive set point makes the drone rotate clockwise.</li> </ul> Source code in <code>blueye/sdk/motion.py</code> <pre><code>def send_thruster_setpoint(self, surge, sway, heave, yaw):\n    \"\"\"Control the thrusters of the drone\n\n    Set reference values between -1 and 1 for each controllable degree of freedom on the drone.\n    The reference values are mapped linearly to a thruster force, a set point of -1 correspons\n    to maximum negative force and a set point of 1 corresponds to maximum positive force. For\n    the yaw direction the reference is a moment not a force, as the yaw direction is rotational\n    not translational.\n\n\n    Arguments:\n\n    * **surge** (float): Force set point in the surge direction in range &lt;-1, 1&gt;,\n                         a positive set point makes the drone move forward\n    * **sway** (float): Force set point in the sway direction in range &lt;-1, 1&gt;,\n                         a positive set point makes the drone move to the right\n    * **heave** (float): Force set point in the heave direction in range &lt;-1, 1&gt;,\n                         a positive set point makes the drone move down.\n    * **yaw** (float): Moment set point in the yaw direction in range &lt;-1, 1&gt;,\n                         a positive set point makes the drone rotate clockwise.\n    \"\"\"\n    with self.thruster_lock:\n        self._current_thruster_setpoints[\"surge\"] = surge\n        self._current_thruster_setpoints[\"sway\"] = sway\n        self._current_thruster_setpoints[\"heave\"] = heave\n        self._current_thruster_setpoints[\"yaw\"] = yaw\n        self._send_motion_input_message()\n</code></pre>"},{"location":"reference/blueye/sdk/utils/","title":"blueye.sdk.utils","text":""},{"location":"reference/blueye/sdk/utils/#blueye.sdk.utils","title":"utils","text":"<p>Functions:</p> <ul> <li> <code>deserialize_any_to_message</code>             \u2013              <p>Deserialize a protobuf Any message to a concrete message type</p> </li> <li> <code>open_local_documentation</code>             \u2013              <p>Open a pre-built local version of the SDK documentation</p> </li> </ul>"},{"location":"reference/blueye/sdk/utils/#blueye.sdk.utils.deserialize_any_to_message","title":"deserialize_any_to_message","text":"<pre><code>deserialize_any_to_message(\n    msg: Any,\n) -&gt; Tuple[MessageMeta, Message]\n</code></pre> <p>Deserialize a protobuf Any message to a concrete message type</p> <p>Arguments:</p> <ul> <li>msg: The Any message to deserialize. Needs to be a message defined in the blueye.protocol        package.</li> </ul> <p>Returns:</p> <ul> <li>A tuple with the metatype and the deserialized message</li> </ul> Source code in <code>blueye/sdk/utils.py</code> <pre><code>def deserialize_any_to_message(msg: Any) -&gt; Tuple[proto.message.MessageMeta, proto.message.Message]:\n    \"\"\"Deserialize a protobuf Any message to a concrete message type\n\n    *Arguments*:\n\n    * msg: The Any message to deserialize. Needs to be a message defined in the blueye.protocol\n           package.\n\n    *Returns*:\n\n    * A tuple with the metatype and the deserialized message\n    \"\"\"\n    payload_msg_name = msg.type_url.replace(\"type.googleapis.com/blueye.protocol.\", \"\")\n    payload_type = bp.__getattribute__(payload_msg_name)\n    payload_msg_deserialized = payload_type.deserialize(msg.value)\n    return (payload_type, payload_msg_deserialized)\n</code></pre>"},{"location":"reference/blueye/sdk/utils/#blueye.sdk.utils.open_local_documentation","title":"open_local_documentation","text":"<pre><code>open_local_documentation()\n</code></pre> <p>Open a pre-built local version of the SDK documentation</p> <p>Useful when you are connected to the drone wifi, and don't have access to the online version.</p> Source code in <code>blueye/sdk/utils.py</code> <pre><code>def open_local_documentation():\n    \"\"\"Open a pre-built local version of the SDK documentation\n\n    Useful when you are connected to the drone wifi, and don't have access to the online version.\n    \"\"\"\n    sdk_path = os.path.dirname(blueye.sdk.__file__)\n\n    # The documentation is located next to the top-level package so we move up a couple of levels\n    documentation_path = os.path.abspath(sdk_path + \"/../../blueye.sdk_docs/index.html\")\n\n    webbrowser.open(documentation_path)\n</code></pre>"},{"location":"video/downloading/","title":"Downloading videos and images","text":"<p>Videos and images can easiest be downloaded through the mobile app, or by using the <code>Blueye file transfer</code> desktop application for Windows, Mac OS and Linux.</p> <p>If one wants a more control over the download process, all files are listable through any client that supports WebDAV. The server is available on the drone (default ip: <code>192.168.1.101</code>) and port <code>5050</code>.</p> <p>For example using a Python WebDAV client we could do the following to list the files on drone:</p> <pre><code>import webdav3.client as wc\n\n# Define the options for connecting\noptions = {\n    'webdav_hostname': \"http://192.168.1.101:5050\"\n}\n\n# Instantiate the connection\nclient = wc.Client(options)\n\n# List the avaiable files\nclient.list()\n</code></pre>"},{"location":"video/downloading/#understanding-the-file-name-formats","title":"Understanding the file name formats","text":"<p>An example output from listing available files could be:</p> <p><pre><code>'video_BYEDP000105_2019-08-13_103035.jpg'\n'video_BYEDP000105_2019-08-13_103035.mp4'\n'picture_BYEDP000105_2019-09-27_074152.431.jpg',\n</code></pre> The format of the file names are described below.</p>"},{"location":"video/downloading/#video-files","title":"Video files","text":"<p>For each video recorded on the drone two files will be created, a <code>.mp4</code> file with the actual video, and a <code>.jpg</code> file with a thumbnail image from the video file. Other than the file extension the file names will be identical. An example of a video + thumbnail pair could be: <pre><code>'video_BYEDP000105_2019-08-13_103035.jpg'\n'video_BYEDP000105_2019-08-13_103035.mp4'\n</code></pre> The file names break down to:</p> File Type Prefix Drone Serial Number Timestamp (yyyy-MM-dd_hhmmss) File Extension video BYEDP000105 2019-08-13_103035 .mp4 video BYEDP000105 2019-08-13_103035 .jpg"},{"location":"video/downloading/#image-files","title":"Image files","text":"<p>Image files are images captured with the still image function. The file name for image files follow the same format as the video files, but the time stamp is extended with milliseconds to differentiate still images captured within the same second.</p> <p>An example still image file could be:</p> <p><pre><code>'picture_BYEDP000105_2019-09-27_074152.431.jpg',\n</code></pre> The file name breaks down to:</p> File Type Prefix Drone Serial Number Timestamp (yyyy-MM-dd_hhmmss.SSS) File Extension picture BYEDP000105 2019-09-27_074152.431 .jpg"},{"location":"video/gstreamer-for-video-streaming/","title":"GStreamer for video streaming","text":"<p>GStreamer is the lowest latency alternative for streaming video from the drone to your laptop.</p>"},{"location":"video/gstreamer-for-video-streaming/#installing-gstreamer","title":"Installing GStreamer","text":"<p>To run the streaming pipeline in the next section you will need a runtime installation of GStreamer. The instructions below show the basic steps for installing GStreamer on the most common operating systems. You can find more in depth instruction for your specific operating system in the <code>GStreamer docs</code>.</p> Windows <p>On Windows the basic installation steps are:</p> <ol> <li>Download the relevant installer for your computer from https://gstreamer.freedesktop.org/download . Using the latest stable relase should be fine, at the time of writing that is <code>1.16.1 runtime installer</code></li> <li>Run the installer. When asked to choose a setup type choose to do a complete installation. This is because some plugins that are needed for the basic pipeline later are not included if you choose to install the typical setup</li> <li>To run GStreamer commands form the terminal, GStreamer must be added to the PATH environment variable. This can be done from the advanced system settings. Add <code>%GSTREAMER_1_0_ROOT_X86_64%\\bin</code> to path. Alternatively you can choose to run gst-launch-1.0.exe from the folder it is installed in, typically <code>C:\\gstreamer\\1.0\\x86_64\\bin</code></li> </ol> Mac OS <p>On Mac OS GStreamer and its plugins can be installed using brew <pre><code>brew install gstreamer gst-plugins-base gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav\n</code></pre></p> Linux <p>On Ubuntu and Debian GStreamer and its plugins can be installed using apt. <pre><code>apt-get install libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good \\\ngstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc \\\ngstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa\n</code></pre></p> <p>You can test the installation by trying the basic pipeline from the next section when connected to a drone. Or with</p> <pre><code>gst-launch-1.0 videotestsrc ! autovideosink\n</code></pre>"},{"location":"video/gstreamer-for-video-streaming/#basic-streaming-pipeline","title":"Basic streaming pipeline","text":"<p>After installing you can run this pipeline in your terminal:</p> Windows <pre><code>gst-launch-1.0 rtspsrc location=rtsp://192.168.1.101:8554/test latency=0 ! rtph264depay ! avdec_h264 ! videoconvert ! fpsdisplaysink sync=false\n</code></pre> Linux and macOS <pre><code>gst-launch-1.0 rtspsrc location=rtsp://192.168.1.101:8554/test latency=0 \\\n    ! rtph264depay \\\n    ! avdec_h264 \\\n    ! videoconvert \\\n    ! fpsdisplaysink sync=false\n</code></pre> <p>Running the pipeline will open a window with the camera stream and information about packet loss and camera frame rate.</p>"},{"location":"video/gstreamer-for-video-streaming/#external-camera-streaming-pipeline","title":"External camera streaming pipeline","text":"<p>If you have a X3 drone with an external camera connected you can use the following pipeline:</p> Windows <pre><code>gst-launch-1.0 rtspsrc location=rtsp://192.168.1.101:8555/guestport_cam latency=0 ! rtph264depay ! avdec_h264 ! videoconvert ! autovideosink sync=false\n</code></pre> Linux and macOS <pre><code>gst-launch-1.0 rtspsrc location=rtsp://192.168.1.101:8555/guestport_cam latency=0 \\\n    ! rtph264depay \\\n    ! avdec_h264 \\\n    ! videoconvert \\\n    ! autovideosink sync=false\n</code></pre> <p>Running the pipeline will open a window with the external camera stream.</p>"}]}